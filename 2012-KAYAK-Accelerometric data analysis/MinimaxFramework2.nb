(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    873984,      16759]
NotebookOptionsPosition[    870419,      16641]
NotebookOutlinePosition[    870796,      16658]
CellTagsIndexPosition[    870753,      16655]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Metamodel", "Section",
 CellChangeTimes->{{3.515136055273868*^9, 3.515136074254366*^9}, {
  3.51515819709291*^9, 3.5151582015925407`*^9}}],

Cell[CellGroupData[{

Cell["General", "Subsection",
 CellChangeTimes->{{3.5151291821812353`*^9, 3.515129185137012*^9}, 
   3.51512929597278*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Needs", "[", "\"\<Units`\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"timeout", " ", "=", " ", "1800"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"print", "=", "PrintTemporary"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"printReport", "[", "message_String", "]"}], ":=", 
   RowBox[{"print", "[", 
    RowBox[{
     RowBox[{"Style", "[", " ", 
      RowBox[{"\"\<Report : \>\"", ",", 
       RowBox[{"Darker", "[", "Green", "]"}], ",", "Bold"}], "]"}], ",", 
     RowBox[{"Style", "[", 
      RowBox[{"message", ",", 
       RowBox[{"Darker", "[", "Green", "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"printInfo", "[", "message_String", "]"}], ":=", 
   RowBox[{"print", "[", 
    RowBox[{
     RowBox[{"Style", "[", "       ", 
      RowBox[{"\"\<Info : \>\"", ",", "Blue", ",", "Bold"}], "]"}], ",", 
     RowBox[{"Style", "[", 
      RowBox[{"message", ",", "Blue"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"printWarning", "[", "message_String", "]"}], ":=", 
   RowBox[{"print", "[", 
    RowBox[{
     RowBox[{"Style", "[", 
      RowBox[{"\"\<Warning : \>\"", ",", "Orange", ",", "Bold"}], "]"}], ",", 
     
     RowBox[{"Style", "[", 
      RowBox[{"message", ",", "Orange"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"printError", "[", "message_String", "]"}], ":=", 
   RowBox[{"print", "[", 
    RowBox[{
     RowBox[{"Style", "[", "    ", 
      RowBox[{"\"\<Error : \>\"", ",", "Red", ",", "Bold"}], "]"}], ",", 
     RowBox[{"Style", "[", 
      RowBox[{"message", ",", "Red"}], "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.515129190150083*^9, 3.515129283084878*^9}, {
   3.515129523380805*^9, 3.515129524332223*^9}, {3.515129684313588*^9, 
   3.515129689991424*^9}, {3.515130890151667*^9, 3.5151308954560432`*^9}, {
   3.515130982955378*^9, 3.515130984548946*^9}, {3.5151310168431787`*^9, 
   3.515131070192251*^9}, {3.515131100590782*^9, 3.515131101509714*^9}, {
   3.515141918654192*^9, 3.515141921534052*^9}, {3.515155933799025*^9, 
   3.515155947129341*^9}, {3.5151569001240473`*^9, 3.515156902217998*^9}, {
   3.5151576320907288`*^9, 3.515157678960745*^9}, {3.5151599441377983`*^9, 
   3.5151599484000273`*^9}, {3.51516118200042*^9, 3.515161184981586*^9}, {
   3.5151678383135023`*^9, 3.515167841011392*^9}, 3.515167951006075*^9, 
   3.515168917234057*^9, 3.515171306999404*^9, {3.5168540171373463`*^9, 
   3.516854019615204*^9}, {3.516854088150531*^9, 3.51685410531455*^9}, {
   3.5168541608246*^9, 3.51685417321236*^9}, 3.5168543094076977`*^9, 
   3.5803624418608513`*^9, {3.580462476250239*^9, 3.580462477498506*^9}, {
   3.580465270051188*^9, 3.580465273065009*^9}, {3.580465548754759*^9, 
   3.580465554648456*^9}, {3.5804692060951843`*^9, 3.5804692160913363`*^9}, 
   3.5940454754980717`*^9, {3.5940463160221977`*^9, 3.5940463224307127`*^9}, {
   3.594053870680626*^9, 3.5940538723918657`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data Import", "Subsection",
 CellChangeTimes->{{3.514974661302617*^9, 3.5149746720001593`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"importCSV", "[", "file_List", "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"startLine", "=", "8"}], ",", 
       RowBox[{"dateformat", "=", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Year\>\"", ",", "\"\</\>\"", ",", "\"\<Month\>\"", ",", 
          "\"\</\>\"", ",", "\"\<Day\>\"", ",", "\"\< \>\"", ",", 
          "\"\<Hour\>\"", ",", "\"\<:\>\"", ",", "\"\<Minute\>\"", ",", 
          "\"\<:\>\"", ",", "\"\<Second\>\""}], "}"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "parsecsv", ",", 
       "formattime", ",", "formatcsvrow", ",", "formatattribute", ",", 
       "formatattributes", ",", "formatlabels", ",", "formatdata", ",", 
       "finderrors", ",", "process", ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "err", ",", "importres", ",", "resindex"}], 
      "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"parsecsv", "[", "filename_String", "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"str", ",", "crit"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"str", "=", 
           RowBox[{"Import", "[", 
            RowBox[{"filename", ",", "\"\<String\>\""}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"crit", "=", 
           RowBox[{
            RowBox[{"StringCount", "[", 
             RowBox[{"str", ",", "\"\<.\>\""}], "]"}], "/", 
            RowBox[{"StringCount", "[", 
             RowBox[{"str", ",", "\"\<,\>\""}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"crit", ">", "0.1"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"printInfo", "[", "\"\<Correct file format\>\"", "]"}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"Return", "[", 
              RowBox[{"TimeConstrained", "[", 
               RowBox[{
                RowBox[{"Import", "[", 
                 RowBox[{"filename", ",", "\"\<CSV\>\""}], "]"}], ",", 
                "timeout", ",", 
                RowBox[{
                 RowBox[{
                 "printError", "[", 
                  "\"\<Import timeout, try with a smaller file\>\"", "]"}], 
                 ";"}]}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
             "printWarning", "[", 
              "\"\<You should export with decimal separator in English format \
in order to get better processing performance\>\"", "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Return", "[", 
              RowBox[{"TimeConstrained", "[", 
               RowBox[{
                RowBox[{"ImportString", "[", 
                 RowBox[{
                  RowBox[{"StringReplace", "[", 
                   RowBox[{
                    RowBox[{"StringReplace", "[", 
                    RowBox[{
                    RowBox[{"Import", "[", 
                    RowBox[{"filename", ",", "\"\<String\>\""}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<, \>\"", "\[Rule]", " ", "\"\<;\>\""}], ",", 
                    
                    RowBox[{"\"\<,\>\"", "\[Rule]", " ", "\"\<.\>\""}]}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<;\>\"", "\[Rule]", " ", "\"\<,\>\""}], ",", 
                    RowBox[{"\"\<..\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}], 
                   "]"}], ",", "\"\<CSV\>\""}], "]"}], ",", "timeout", ",", 
                RowBox[{
                 RowBox[{
                 "printError", "[", 
                  "\"\<Import timeout, try with a smaller file\>\"", "]"}], 
                 ";"}]}], "]"}], "]"}]}]}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"formattime", "[", "time_String", "]"}], ":=", 
       RowBox[{
        RowBox[{"60", "*", 
         RowBox[{"ToExpression", "[", 
          RowBox[{
           RowBox[{"StringSplit", "[", 
            RowBox[{"time", ",", "\"\<:\>\""}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "+", 
        RowBox[{"ToExpression", "[", 
         RowBox[{
          RowBox[{"StringSplit", "[", 
           RowBox[{"time", ",", "\"\<:\>\""}], "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"formatcsvrow", "[", 
        RowBox[{"{", 
         RowBox[{"date_", ",", "other___"}], "}"}], "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"formattime", "[", "date", "]"}], ",", "other"}], "}"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"formatattribute", "[", "attrib_String", "]"}], ":=", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"attrl", ",", "attrr", ",", "res"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"StringPosition", "[", 
               RowBox[{"attrib", ",", "\"\<=\>\""}], "]"}], "]"}], ">", "0"}],
             ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"attrl", "=", 
              RowBox[{"StringTrim", "[", 
               RowBox[{
                RowBox[{"StringSplit", "[", 
                 RowBox[{"attrib", ",", "\"\<=\>\""}], "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"StringSplit", "[", 
                  RowBox[{"attrib", ",", "\"\<=\>\""}], "]"}], "]"}], 
                "\[GreaterEqual]", "2"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"attrr", "=", 
                 RowBox[{"StringTrim", "[", 
                  RowBox[{
                   RowBox[{"StringSplit", "[", 
                    RowBox[{"attrib", ",", "\"\<=\>\""}], "]"}], "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"attrl", "\[Equal]", "\"\<From\>\""}], ",", 
                  RowBox[{"attrr", "=", 
                   RowBox[{"formattime", "[", "attrr", "]"}]}]}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"attrl", "\[Equal]", "\"\<To\>\""}], ",", 
                  RowBox[{"attrr", "=", 
                   RowBox[{"formattime", "[", "attrr", "]"}]}]}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"attrl", "\[Equal]", "\"\<Date\>\""}], ",", 
                  RowBox[{"attrr", "=", 
                   RowBox[{
                    RowBox[{"DateList", "[", "attrr", "]"}], "*", 
                    RowBox[{"{", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"attrl", "\[Equal]", "\"\<Time\>\""}], ",", 
                  RowBox[{"attrr", "=", 
                   RowBox[{
                    RowBox[{"DateList", "[", "attrr", "]"}], "*", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1"}], 
                    "}"}]}]}]}], "]"}]}], "\[IndentingNewLine]", ",", 
               RowBox[{"attrr", "=", "\"\<\>\""}]}], "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"attrl", "=", "\"\<softwareversion\>\""}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"attrr", "=", "attrib"}], ";"}]}], "\[IndentingNewLine]",
            "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"attrl", "\[Rule]", " ", "attrr"}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"formatattributes", "[", "attrib_List", "]"}], ":=", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"res", ",", "app"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"res", "=", 
           RowBox[{"Map", "[", 
            RowBox[{"formatattribute", ",", "attrib"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"app", "=", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"\"\<Time List\>\"", "\[Rule]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"\"\<Date\>\"", "/.", "res"}], ")"}], "+", " ", 
                RowBox[{"(", 
                 RowBox[{"\"\<Time\>\"", "/.", "res"}], ")"}]}], ")"}]}], ",",
              "\[IndentingNewLine]", 
             RowBox[{"\"\<Description\>\"", "\[Rule]", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"\"\<Athlete\>\"", "/.", "res"}], ")"}], " ", "<>", 
                "\"\< \>\"", "<>", 
                RowBox[{"(", 
                 RowBox[{"\"\<EventDescription\>\"", "/.", "res"}], ")"}], 
                "<>", "\"\< \>\"", "<>", 
                RowBox[{"DateString", "[", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\"\<Date\>\"", "/.", "res"}], ")"}], "+", " ", 
                    RowBox[{"(", 
                    RowBox[{"\"\<Time\>\"", "/.", "res"}], ")"}]}], ")"}], 
                  ",", "dateformat"}], "]"}]}], ")"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"\"\<Sample Interval\>\"", "\[Rule]", " ", "0.01"}], ",",
              "\[IndentingNewLine]", 
             RowBox[{"\"\<Mass\>\"", "\[Rule]", " ", "340"}], " ", ",", 
             "\[IndentingNewLine]", 
             RowBox[{"\"\<Number\>\"", "\[Rule]", " ", "1"}], ",", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"\"\<Air Cx\>\"", "\[Rule]", " ", "1"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"\"\<Air Velocity\>\"", "\[Rule]", "0"}], ",", 
             RowBox[{"(*", 
              RowBox[{"Wind", " ", "speed"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"\"\<Air Direction\>\"", "\[Rule]", "0"}], ",", 
             RowBox[{"(*", 
              RowBox[{
              "Wind", " ", "coming", " ", "from", " ", "direction", " ", "in",
                " ", "deg"}], " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{"\"\<Air Temperature\>\"", "\[Rule]", " ", "20"}], ",", 
             RowBox[{"(*", "Celsius", "*)"}], "\[IndentingNewLine]", 
             RowBox[{"\"\<Air Pressure\>\"", "\[Rule]", " ", "101325"}], ",", 
             
             RowBox[{"(*", "Pa", "*)"}], "\[IndentingNewLine]", 
             RowBox[{"\"\<Air Humidity\>\"", "\[Rule]", " ", "0.5"}], ",", 
             RowBox[{"(*", 
              RowBox[{"relative", " ", "humidity"}], "*)"}], 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"\"\<Water Cx\>\"", "\[Rule]", " ", "4"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"\"\<Water Velocity\>\"", "\[Rule]", "0"}], ",", 
             RowBox[{"(*", 
              RowBox[{"Current", " ", "speed"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"\"\<Water Direction\>\"", "\[Rule]", "0"}], ",", 
             RowBox[{"(*", 
              RowBox[{
              "Current", " ", "comming", " ", "from", " ", "direction", " ", 
               "in", " ", "deg"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"\"\<Water Temperature\>\"", "\[Rule]", " ", "20"}], ",", 
             RowBox[{"(*", "Celsius", "*)"}], "\[IndentingNewLine]", 
             RowBox[{"\"\<Water Salinity\>\"", "\[Rule]", "0"}], ",", 
             RowBox[{"(*", 
              RowBox[{"psu", ",", " ", 
               RowBox[{"nearly", " ", "equal", " ", "to", " ", 
                RowBox[{"g", "/", "kg"}]}]}], "*)"}], "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{
             "\"\<Empirical Friction Linear Coefficient\>\"", "\[Rule]", 
              "30"}], ",", "\[IndentingNewLine]", 
             RowBox[{
             "\"\<Empirical Friction Quadratic Coefficient\>\"", "\[Rule]", 
              "0.4"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"Join", "[", 
            RowBox[{"res", ",", "app"}], "]"}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"formatlabels", "[", "label_List", "]"}], ":=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"StringTrim", "[", 
           RowBox[{"ToString", "[", 
            RowBox[{"label", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], "\[Rule]", " ", 
          "i"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Length", "[", "label", "]"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"formatdata", "[", "data_List", "]"}], ":=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"Map", "[", 
         RowBox[{"formatcsvrow", ",", "data"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"process", "[", "filename_String", "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "parsedcsv", ",", "attributes", ",", "labels", ",", "data"}], "}"}],
          ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"printInfo", "[", 
           RowBox[{"\"\<Importing \>\"", "<>", "filename"}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"parsedcsv", "=", 
           RowBox[{"parsecsv", "[", "filename", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"TrueQ", "[", 
             RowBox[{"parsedcsv", "\[Equal]", "Null"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"printError", "[", "\"\<CSV Parsing problem\>\"", "]"}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"Return", "[", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                "\"\<Description\>\"", "\[Rule]", " ", "\"\<Error\>\""}], 
                "}"}], "}"}], "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"attributes", "=", 
              RowBox[{"formatattributes", "[", 
               RowBox[{"Flatten", "[", 
                RowBox[{"Take", "[", 
                 RowBox[{"parsedcsv", ",", 
                  RowBox[{"startLine", "-", "1"}]}], "]"}], "]"}], "]"}]}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"labels", "=", 
              RowBox[{"formatlabels", "[", 
               RowBox[{"Flatten", "[", 
                RowBox[{"Part", "[", 
                 RowBox[{"parsedcsv", ",", "startLine"}], "]"}], "]"}], 
               "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"data", "=", 
              RowBox[{"formatdata", "[", 
               RowBox[{"Take", "[", 
                RowBox[{"parsedcsv", ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"startLine", "+", "2"}], ",", 
                   RowBox[{"-", "2"}]}], "}"}]}], "]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"attributes", "=", 
              RowBox[{"Append", "[", 
               RowBox[{"attributes", ",", 
                RowBox[{"\"\<Length\>\"", "\[Rule]", " ", 
                 RowBox[{"Length", "[", 
                  RowBox[{"data", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"printReport", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"\"\<Description\>\"", "/.", "attributes"}], ")"}], 
               "<>", "\"\< done.\>\""}], "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"Return", "[", 
              RowBox[{"{", 
               RowBox[{"attributes", ",", "labels", ",", "data"}], "}"}], 
              "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"finderrors", "[", "data_List", "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "res", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"res", "=", 
           RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Do", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Not", "[", 
               RowBox[{"TrueQ", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"\"\<Description\>\"", "/.", 
                   RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "1"}], "]"}], "]"}]}], ")"}], 
                 "\[Equal]", "\"\<Error\>\""}], "]"}], "]"}], ",", 
              RowBox[{"res", "=", 
               RowBox[{"Append", "[", 
                RowBox[{"res", ",", 
                 RowBox[{"data", "[", 
                  RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"Length", "[", "data", "]"}]}], "}"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "res", "]"}], ";"}]}], "\[IndentingNewLine]",
         "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"importres", "=", 
       RowBox[{"finderrors", "[", 
        RowBox[{"Map", "[", 
         RowBox[{"process", ",", "file"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"resindex", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"\"\<Description\>\"", "/.", 
            RowBox[{"importres", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", "1"}], "]"}], "]"}]}], ")"}], "\[Rule]", " ", 
          "i"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Length", "[", "importres", "]"}]}], "}"}]}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{"resindex", ",", "importres"}], "}"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"importCSV", "[", "file_String", "]"}], ":=", 
   RowBox[{"importCSV", "[", 
    RowBox[{"{", "file", "}"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.514813111958016*^9, 3.5148131244233007`*^9}, {
   3.514813156339616*^9, 3.514813182414816*^9}, {3.514905512430078*^9, 
   3.514905513805058*^9}, {3.51490561082657*^9, 3.514905619313994*^9}, {
   3.51490585660911*^9, 3.514905867409369*^9}, {3.514905936492231*^9, 
   3.514906060257265*^9}, {3.5149061046682053`*^9, 3.5149061840677032`*^9}, {
   3.514906280219224*^9, 3.514906332248727*^9}, {3.5149063795772133`*^9, 
   3.514906392848271*^9}, {3.514906439572853*^9, 3.514906501566906*^9}, 
   3.5149078527718887`*^9, {3.514907893494294*^9, 3.514908102584359*^9}, {
   3.514908148767083*^9, 3.5149082041074457`*^9}, {3.514908234747137*^9, 
   3.5149082511539288`*^9}, {3.514972186397628*^9, 3.514972190676424*^9}, 
   3.514972279591372*^9, {3.5149723378569508`*^9, 3.514972353534009*^9}, {
   3.51497245932761*^9, 3.514972567055785*^9}, 3.514972635967947*^9, {
   3.5149726680904512`*^9, 3.514972676497395*^9}, {3.514972717954528*^9, 
   3.514972750140386*^9}, {3.514972835559362*^9, 3.514972970164781*^9}, {
   3.514973004178152*^9, 3.514973059261785*^9}, {3.514973097806963*^9, 
   3.514973248194088*^9}, {3.514973767603022*^9, 3.5149739407534246`*^9}, {
   3.514974022143903*^9, 3.514974093957939*^9}, 3.514975297311664*^9, 
   3.514976437801806*^9, {3.514976544539852*^9, 3.514976612368754*^9}, {
   3.514979248126403*^9, 3.514979285352499*^9}, 3.514979738964102*^9, {
   3.5149972357299213`*^9, 3.514997251157321*^9}, {3.514997300439659*^9, 
   3.514997441319973*^9}, 3.514998654881817*^9, {3.5150751968644533`*^9, 
   3.515075262172965*^9}, {3.515075321013322*^9, 3.515075342722126*^9}, {
   3.5150808128421*^9, 3.5150808586270723`*^9}, 3.5150814411374083`*^9, {
   3.515082367453548*^9, 3.515082368012897*^9}, {3.515083090401779*^9, 
   3.5150832086894693`*^9}, {3.515083709410009*^9, 3.5150837539747257`*^9}, {
   3.5150840007499437`*^9, 3.515084006860017*^9}, {3.515084046587223*^9, 
   3.515084085322287*^9}, {3.515084133432666*^9, 3.515084280712845*^9}, {
   3.5150843134777327`*^9, 3.5150843187575693`*^9}, 3.515124034469885*^9, {
   3.515124164049169*^9, 3.5151241869651537`*^9}, {3.515124225552874*^9, 
   3.515124251163581*^9}, {3.5151244615580273`*^9, 3.515124511472981*^9}, {
   3.51512467869462*^9, 3.5151246833165627`*^9}, {3.51512483775417*^9, 
   3.515124841215551*^9}, {3.515124964690248*^9, 3.515124974023796*^9}, 
   3.5151250953416443`*^9, {3.5151251693621492`*^9, 3.515125200158833*^9}, {
   3.515125343119849*^9, 3.515125344367497*^9}, {3.515125380110833*^9, 
   3.5151254028123703`*^9}, {3.515125581171978*^9, 3.51512561363986*^9}, {
   3.51512810885828*^9, 3.5151281458362513`*^9}, {3.515128630654217*^9, 
   3.515128637126047*^9}, {3.5151293003926764`*^9, 3.515129378458726*^9}, {
   3.5151294878672667`*^9, 3.515129506381887*^9}, {3.515129977915414*^9, 
   3.515129991698503*^9}, {3.5151307752949038`*^9, 3.515130791641458*^9}, {
   3.515131079728621*^9, 3.515131080614725*^9}, {3.515154249172814*^9, 
   3.5151542908462954`*^9}, {3.515154390182329*^9, 3.515154433462063*^9}, {
   3.5151544654697447`*^9, 3.515154479099908*^9}, {3.515154527795516*^9, 
   3.5151545314835777`*^9}, {3.5151545682467318`*^9, 3.51515503608279*^9}, {
   3.515163273471333*^9, 3.515163327650852*^9}, {3.5151633715815153`*^9, 
   3.5151634034357224`*^9}, {3.51516348780755*^9, 3.515163504863143*^9}, {
   3.515163606062998*^9, 3.515163620554824*^9}, {3.515163663890567*^9, 
   3.51516367212633*^9}, {3.579421311825942*^9, 3.579421315555241*^9}, {
   3.580312916750965*^9, 3.580312921875557*^9}, {3.580312954735182*^9, 
   3.580312974364249*^9}, {3.580313810767219*^9, 3.580313814235847*^9}, {
   3.5803138446333733`*^9, 3.580313865120818*^9}, {3.580313942556234*^9, 
   3.5803139444371357`*^9}, {3.5803139826948433`*^9, 3.580314002775292*^9}, {
   3.580314068632572*^9, 3.580314161144743*^9}, {3.5803142261446457`*^9, 
   3.580314252533341*^9}, {3.580315076315404*^9, 3.5803150950030737`*^9}, {
   3.580315180007535*^9, 3.58031521301234*^9}, {3.5803155059268084`*^9, 
   3.580315572670473*^9}, {3.580315814996579*^9, 3.580315818967278*^9}, {
   3.580316457510447*^9, 3.5803164831495237`*^9}, {3.580317317609294*^9, 
   3.580317326023633*^9}, {3.5803182825253553`*^9, 3.5803183092900133`*^9}, {
   3.5803184824925823`*^9, 3.580318511412403*^9}, {3.580319401206546*^9, 
   3.580319405924618*^9}, {3.580319502837038*^9, 3.580319504155587*^9}, {
   3.5803209687511787`*^9, 3.580321029619054*^9}, {3.580321174037725*^9, 
   3.580321205468913*^9}, {3.580322206815756*^9, 3.5803222097837467`*^9}, {
   3.58032275157018*^9, 3.580322789832417*^9}, {3.580322858011278*^9, 
   3.580322918557983*^9}, {3.580323988293084*^9, 3.580323995722295*^9}, {
   3.5803243314692383`*^9, 3.580324334699885*^9}, {3.594046330312573*^9, 
   3.594046334119891*^9}, 3.594046365767901*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data Extraction", "Subsection",
 CellChangeTimes->{{3.51497468305849*^9, 3.5149746963092537`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getData", "[", "data_List", "]"}], ":=", 
   RowBox[{"data", "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getData", "[", 
    RowBox[{"data_List", ",", "index_Integer"}], "]"}], ":=", 
   RowBox[{"data", "[", 
    RowBox[{"[", 
     RowBox[{"2", ",", "index", ",", "2"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getData", "[", 
    RowBox[{"data_List", ",", "index_Integer", ",", "name_Integer"}], "]"}], ":=", 
   RowBox[{"data", "[", 
    RowBox[{"[", 
     RowBox[{"2", ",", "index", ",", "3", ",", "name"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getData", "[", 
    RowBox[{"data_List", ",", "index_String"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"IntegerQ", "[", 
      RowBox[{"index", "/.", 
       RowBox[{"getData", "[", "data", "]"}]}], "]"}], ",", 
     RowBox[{"getData", "[", 
      RowBox[{"data", ",", 
       RowBox[{"index", "/.", 
        RowBox[{"getData", "[", "data", "]"}]}]}], "]"}], ",", 
     RowBox[{
      RowBox[{"printError", "[", 
       RowBox[{"\"\<Incorrect event name : \>\"", "<>", "index"}], "]"}], ";", 
      RowBox[{"Interrupt", "[", "]"}], ";", 
      RowBox[{"{", "}"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getData", "[", 
    RowBox[{"data_List", ",", "index_Integer", ",", "name_String"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"IntegerQ", "[", 
      RowBox[{"name", "/.", 
       RowBox[{"getData", "[", 
        RowBox[{"data", ",", "index"}], "]"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"getData", "[", 
      RowBox[{"data", ",", "index", ",", 
       RowBox[{"name", "/.", 
        RowBox[{"getData", "[", 
         RowBox[{"data", ",", "index"}], "]"}]}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"printError", "[", 
       RowBox[{"\"\<Incorrect serie name : \>\"", "<>", "name"}], "]"}], ";", 
      
      RowBox[{"Interrupt", "[", "]"}], ";", 
      RowBox[{"{", "}"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getData", "[", 
    RowBox[{"data_List", ",", "index_String", ",", "name_"}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"IntegerQ", "[", 
      RowBox[{"index", "/.", 
       RowBox[{"getData", "[", "data", "]"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"getData", "[", 
      RowBox[{"data", ",", 
       RowBox[{"index", "/.", 
        RowBox[{"getData", "[", "data", "]"}]}], ",", "name"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"printError", "[", 
       RowBox[{"\"\<Incorrect event name : \>\"", "<>", "index"}], "]"}], ";", 
      RowBox[{"Interrupt", "[", "]"}], ";", 
      RowBox[{"{", "}"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getData", "[", 
     RowBox[{"data_List", ",", "index_", ",", "name_List"}], "]"}], ":=", 
    RowBox[{"Transpose", "[", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"getData", "[", 
         RowBox[{"data", ",", "index", ",", "#"}], "]"}], "&"}], ",", 
       "name"}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getAttribute", "[", 
    RowBox[{"data_List", ",", "index_Integer", ",", "attname_String"}], "]"}],
    ":=", 
   RowBox[{"attname", "/.", 
    RowBox[{"data", "[", 
     RowBox[{"[", 
      RowBox[{"2", ",", "index", ",", "1"}], "]"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getAttribute", "[", 
    RowBox[{"data_List", ",", "index_String", ",", "attname_String"}], "]"}], 
   ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"IntegerQ", "[", 
      RowBox[{"index", "/.", 
       RowBox[{"getData", "[", "data", "]"}]}], "]"}], ",", 
     RowBox[{"getAttribute", "[", 
      RowBox[{"data", ",", 
       RowBox[{"index", "/.", 
        RowBox[{"getData", "[", "data", "]"}]}], ",", "attname"}], "]"}], ",", 
     RowBox[{
      RowBox[{"printError", "[", 
       RowBox[{"\"\<Incorrect event name : \>\"", "<>", "index"}], "]"}], ";", 
      RowBox[{"Interrupt", "[", "]"}], ";", 
      RowBox[{"{", "}"}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.514552954223937*^9, 3.5145529916241693`*^9}, {
   3.514553032669828*^9, 3.514553077855603*^9}, {3.514554074936166*^9, 
   3.514554075230535*^9}, {3.514554483947796*^9, 3.514554498490981*^9}, {
   3.5145603386620502`*^9, 3.51456037012304*^9}, {3.5145621682466173`*^9, 
   3.5145622042745237`*^9}, {3.514624210449608*^9, 3.5146242861436987`*^9}, {
   3.514624319400663*^9, 3.5146243724785213`*^9}, {3.514624421073512*^9, 
   3.514624425405032*^9}, {3.5149735187466288`*^9, 3.514973618165533*^9}, {
   3.514973673317506*^9, 3.514973739637875*^9}, {3.514973947372068*^9, 
   3.514973991097924*^9}, 3.514974113786935*^9, {3.514974811635556*^9, 
   3.514974814976263*^9}, {3.5149748527361803`*^9, 3.514974858891758*^9}, {
   3.514974970893866*^9, 3.5149749742040377`*^9}, 3.514975039045155*^9, {
   3.514975128156633*^9, 3.514975164265993*^9}, {3.514975218966342*^9, 
   3.514975270418415*^9}, {3.514975425498724*^9, 3.514975447237565*^9}, {
   3.5149755692738457`*^9, 3.514975569775578*^9}, {3.514975600189703*^9, 
   3.51497562124717*^9}, {3.514975654824905*^9, 3.514975678720374*^9}, {
   3.514975765705167*^9, 3.5149757676857843`*^9}, {3.514976028868196*^9, 
   3.514976033964827*^9}, {3.514976126901312*^9, 3.514976133180032*^9}, {
   3.514976930715786*^9, 3.514976932418363*^9}, {3.5149795969475403`*^9, 
   3.5149796775721197`*^9}, {3.5149798996796083`*^9, 
   3.5149799305642223`*^9}, {3.514979992105947*^9, 3.514980045871481*^9}, {
   3.5149800952114153`*^9, 3.5149801009400587`*^9}, {3.514980141811761*^9, 
   3.514980161279437*^9}, {3.514980310296583*^9, 3.5149803104802313`*^9}, {
   3.514980363494774*^9, 3.514980379471221*^9}, {3.51498074699967*^9, 
   3.514980762924066*^9}, {3.514981237178891*^9, 3.514981278976313*^9}, {
   3.514981577614236*^9, 3.514981585059576*^9}, {3.514981638946968*^9, 
   3.514981647920735*^9}, 3.514981680401835*^9, {3.514981711142818*^9, 
   3.514981717687089*^9}, {3.514981799117701*^9, 3.5149818758522577`*^9}, {
   3.514981942524975*^9, 3.514981948150589*^9}, {3.514982340691573*^9, 
   3.51498234089954*^9}, {3.514982403518013*^9, 3.5149824041748037`*^9}, {
   3.514982622510606*^9, 3.514982682133121*^9}, {3.5151300569680233`*^9, 
   3.5151301045039682`*^9}, {3.51513013821581*^9, 3.515130388200882*^9}, {
   3.515130418515142*^9, 3.515130512489396*^9}, {3.515130545762163*^9, 
   3.51513060007666*^9}, {3.515130642779572*^9, 3.5151306729422894`*^9}, {
   3.515131904150899*^9, 3.5151319117806377`*^9}, {3.515163105628233*^9, 
   3.51516325698398*^9}, {3.580321661642632*^9, 3.580321670645404*^9}, {
   3.580321710038217*^9, 3.5803217105834227`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"cropData", "[", 
     RowBox[{"data_List", ",", "index_Integer", ",", "delimiter_"}], "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", "res", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"res", "=", "data"}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"res", "[", 
         RowBox[{"[", 
          RowBox[{"2", ",", "index", ",", "3"}], "]"}], "]"}], "=", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Take", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Max", "[", 
                RowBox[{"1", ",", 
                 RowBox[{"Min", "[", 
                  RowBox[{
                   RowBox[{"delimiter", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                   RowBox[{"Length", "[", "#", "]"}]}], "]"}]}], "]"}], ",", 
               RowBox[{"Min", "[", 
                RowBox[{
                 RowBox[{"Length", "[", "#", "]"}], ",", 
                 RowBox[{"Max", "[", 
                  RowBox[{
                   RowBox[{"delimiter", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "1"}], "]"}]}], 
                "]"}]}], "}"}]}], "]"}], "&"}], ",", 
          RowBox[{"res", "[", 
           RowBox[{"[", 
            RowBox[{"2", ",", "index", ",", "3"}], "]"}], "]"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "res", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addData", "[", 
     RowBox[{"data_List", ",", 
      RowBox[{"{", 
       RowBox[{"newname_", ",", 
        RowBox[{"{", 
         RowBox[{"newattributes_", ",", "newseries_", ",", "newdata_"}], 
         "}"}]}], "}"}]}], "]"}], ":=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Append", "[", 
       RowBox[{
        RowBox[{"data", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", 
        RowBox[{"newname", "\[Rule]", 
         RowBox[{"(", " ", 
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"data", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], "+", "1"}], ")"}]}]}], 
       "]"}], ",", 
      RowBox[{"Append", "[", 
       RowBox[{
        RowBox[{"data", "[", 
         RowBox[{"[", "2", "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"newattributes", ",", "newseries", ",", "newdata"}], "}"}]}],
        "]"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addCrop", "[", 
    RowBox[{"data_List", ",", "index_Integer", ",", "delimiter_"}], "]"}], ":=", 
   RowBox[{"addData", "[", 
    RowBox[{"data", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"StringJoin", "[", 
        RowBox[{
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", "index", ",", "1"}], "]"}], "]"}], ",", 
         "\"\<[\>\"", ",", 
         RowBox[{"ToString", "[", 
          RowBox[{"delimiter", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", "\"\<,\>\"", ",", 
         RowBox[{"ToString", "[", 
          RowBox[{"delimiter", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", "\"\<]\>\""}], "]"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "index", ",", "1"}], "]"}], "]"}], ",", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "index", ",", "2"}], "]"}], "]"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"printInfo", "[", "\"\<Formatting series\>\"", "]"}], ";", 
            RowBox[{
             RowBox[{"Take", "[", 
              RowBox[{"#", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Max", "[", 
                  RowBox[{"1", ",", 
                   RowBox[{"Min", "[", 
                    RowBox[{
                    RowBox[{"delimiter", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"Length", "[", "#", "]"}]}], "]"}]}], "]"}], ",", 
                 
                 RowBox[{"Min", "[", 
                  RowBox[{
                   RowBox[{"Length", "[", "#", "]"}], ",", 
                   RowBox[{"Max", "[", 
                    RowBox[{
                    RowBox[{"delimiter", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "1"}], "]"}]}], 
                  "]"}]}], "}"}]}], "]"}], "&"}]}], ",", 
           RowBox[{"data", "[", 
            RowBox[{"[", 
             RowBox[{"2", ",", "index", ",", "3"}], "]"}], "]"}]}], "]"}]}], 
        "}"}]}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"remove", "[", 
    RowBox[{"data_List", ",", "index_Integer"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Drop", "[", 
          RowBox[{
           RowBox[{"data", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{"{", "index", "}"}]}], "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"i", ",", "1"}], "]"}], "]"}], "\[Rule]", " ", "i"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{"Length", "[", 
          RowBox[{"Drop", "[", 
           RowBox[{
            RowBox[{"data", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{"{", "index", "}"}]}], "]"}], "]"}]}], "}"}]}], "]"}], 
     ",", 
     RowBox[{"Drop", "[", 
      RowBox[{
       RowBox[{"data", "[", 
        RowBox[{"[", "2", "]"}], "]"}], ",", 
       RowBox[{"{", "index", "}"}]}], "]"}]}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.516859236444152*^9, 3.516859279053124*^9}, {
   3.516859871441657*^9, 3.5168598948171263`*^9}, {3.516897291724245*^9, 
   3.516897291914173*^9}, {3.516897948309719*^9, 3.516897979596438*^9}, {
   3.516898033808156*^9, 3.51689807519171*^9}, {3.516898111617776*^9, 
   3.516898148906178*^9}, {3.59473591959019*^9, 3.594736580777134*^9}, {
   3.594740614639489*^9, 3.594740623713126*^9}, {3.5947418213644876`*^9, 
   3.59474192564983*^9}, {3.594741959641264*^9, 3.594742017570724*^9}, {
   3.594749655410095*^9, 3.594749668254427*^9}, {3.5947498848651752`*^9, 
   3.594749891657761*^9}, {3.594749935835011*^9, 3.594749943930188*^9}, {
   3.594976685251549*^9, 3.5949768687821627`*^9}, {3.59497690685546*^9, 
   3.594976912848461*^9}, {3.5949770964912653`*^9, 3.594977096627884*^9}, {
   3.594977203336089*^9, 3.5949772065755796`*^9}, 3.594979180298995*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data processing definitions Import", "Subsection",
 CellChangeTimes->{{3.514993069687318*^9, 3.514993077773592*^9}, 
   3.515136017289578*^9, {3.515142691388006*^9, 3.5151426955908737`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"importProcessDefinition", "[", "defin_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "res", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "printInfo", "[", "\"\<Importing data processing definitions\>\"", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"res", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"defin", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", "1"}], "]"}], "]"}], "\[Rule]", " ", "i"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "[", "defin", "]"}]}], "}"}]}], "]"}], ",", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"defin", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "3"}], "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "[", "defin", "]"}]}], "}"}]}], "]"}], ",", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"defin", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "2"}], "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "[", "defin", "]"}]}], "}"}]}], "]"}]}], 
        "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
      "printReport", "[", 
       "\"\<Data processing definitions import successfull\>\"", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "res", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.515133286867442*^9, 3.515133381721551*^9}, {
  3.515133423458221*^9, 3.515133437716069*^9}, {3.515133712664283*^9, 
  3.5151337150808363`*^9}, {3.515141376551209*^9, 3.515141377980071*^9}, {
  3.5151414122664967`*^9, 3.515141444359478*^9}, {3.51514150627767*^9, 
  3.515141559488826*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data processing", "Subsection",
 CellChangeTimes->{{3.5151427048530703`*^9, 3.515142716599032*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"processData", "[", "definitions_List", "]"}], ":=", 
   RowBox[{"definitions", "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"processData", "[", 
    RowBox[{"definitions_List", ",", "serie_Integer"}], "]"}], ":=", 
   RowBox[{"definitions", "[", 
    RowBox[{"[", 
     RowBox[{"2", ",", "serie"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"processData", "[", 
    RowBox[{"definitions_List", ",", "serie_String"}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"IntegerQ", "[", 
      RowBox[{"serie", "/.", 
       RowBox[{"processData", "[", "definitions", "]"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"processData", "[", 
      RowBox[{"definitions", ",", 
       RowBox[{"serie", "/.", 
        RowBox[{"processData", "[", "definitions", "]"}]}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"printError", "[", 
      RowBox[{"\"\<Incorrect serie name : \>\"", "<>", "serie"}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"processData", "[", 
    RowBox[{
    "definitions_List", ",", "serie_", ",", "data_List", ",", "index_"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"res", ",", "newserieindex"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"res", "=", "data"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"calcul", " ", "du", " ", "numero", " ", 
        RowBox[{"d", "'"}], "index", " ", "de", " ", "la", " ", "nouvelle", 
        " ", "serie"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"newserieindex", "=", 
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"res", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "index", ",", "3"}], "]"}], "]"}], "]"}], "+", 
        "1"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"test", " ", "de", " ", 
        RowBox[{"l", "'"}], "existence", " ", "de", " ", "la", " ", "serie", 
        " ", "demandee", " ", "dans", " ", "le", " ", "tableau", " ", "de", 
        " ", "definition", " ", "des", " ", "series"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"IntegerQ", "[", 
         RowBox[{"serie", "/.", 
          RowBox[{"processData", "[", "definitions", "]"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"mise", " ", "a", " ", "jour", " ", "de", " ", 
          RowBox[{"l", "'"}], "index", " ", "des", " ", "series", " ", "de", 
          " ", "la", " ", "table"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"res", "[", 
           RowBox[{"[", 
            RowBox[{"2", ",", "index", ",", "2"}], "]"}], "]"}], "=", 
          RowBox[{"Append", "[", 
           RowBox[{
            RowBox[{"res", "[", 
             RowBox[{"[", 
              RowBox[{"2", ",", "index", ",", "2"}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"processData", "[", "definitions", "]"}], "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"serie", "/.", 
                  RowBox[{"processData", "[", "definitions", "]"}]}], ")"}], 
                ",", "1"}], "]"}], "]"}], "\[Rule]", " ", "newserieindex"}]}],
            "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "mise", " ", "a", " ", "jour", " ", "des", " ", "donnees", " ", 
            "de", " ", "la", " ", "table"}], ",", " ", 
           RowBox[{"ajout", " ", "de", " ", "la", " ", "serie"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"res", "[", 
           RowBox[{"[", 
            RowBox[{"2", ",", "index", ",", "3"}], "]"}], "]"}], "=", 
          RowBox[{"Append", "[", 
           RowBox[{
            RowBox[{"res", "[", 
             RowBox[{"[", 
              RowBox[{"2", ",", "index", ",", "3"}], "]"}], "]"}], ",", 
            RowBox[{"Apply", "[", 
             RowBox[{
              RowBox[{"processData", "[", 
               RowBox[{"definitions", ",", "serie"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"data", ",", "index"}], "}"}]}], "]"}]}], "]"}]}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"printError", "[", 
         RowBox[{"\"\<Incorrect serie name : \>\"", "<>", "serie"}], "]"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "res", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"processData", "[", 
    RowBox[{"definitions_List", ",", "serie_", ",", "data_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "res", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"res", "=", "data"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"res", "=", 
         RowBox[{"processData", "[", 
          RowBox[{"definitions", ",", "serie", ",", "res", ",", "i"}], 
          "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{"Length", "[", 
           RowBox[{"getData", "[", "data", "]"}], "]"}]}], "}"}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "res", "]"}]}]}], "\[IndentingNewLine]", "]"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"processData", "[", 
    RowBox[{"definitions_List", ",", "data_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "res", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"res", "=", "data"}], ";", "\[IndentingNewLine]", 
      RowBox[{"printInfo", "[", "\"\<Processing data\>\"", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"printInfo", "[", 
          RowBox[{"\"\<Processing \>\"", "<>", 
           RowBox[{
            RowBox[{"processData", "[", "definitions", "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "1"}], "]"}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"res", "=", 
          RowBox[{"processData", "[", 
           RowBox[{"definitions", ",", "i", ",", "res"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"printReport", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"processData", "[", "definitions", "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "1"}], "]"}], "]"}], "<>", 
           "\"\< processing successfull\>\""}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{"Length", "[", 
           RowBox[{"processData", "[", "definitions", "]"}], "]"}]}], "}"}]}],
        "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{
      "printReport", "[", "\"\<Data Processing successfull\>\"", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "res", "]"}]}]}], "\[IndentingNewLine]", "]"}]}],
   ";"}]}], "Input",
 CellChangeTimes->{{3.51513349097897*^9, 3.5151335395904627`*^9}, {
   3.5151335831562347`*^9, 3.51513369621391*^9}, {3.515133746865114*^9, 
   3.515133812608342*^9}, {3.515133911566985*^9, 3.515133952276403*^9}, {
   3.515134131061701*^9, 3.515134162424809*^9}, {3.515134210403419*^9, 
   3.5151342327262774`*^9}, {3.515134348937554*^9, 3.5151345507723017`*^9}, {
   3.515134703994877*^9, 3.51513471551826*^9}, {3.515135303939867*^9, 
   3.515135345864139*^9}, {3.515135591538311*^9, 3.515135656273555*^9}, {
   3.515135774997459*^9, 3.5151357957372513`*^9}, {3.515135978918247*^9, 
   3.515135983446649*^9}, {3.5151367072651987`*^9, 3.515136746774193*^9}, 
   3.515136785452469*^9, {3.5151368763925467`*^9, 3.515136902589156*^9}, {
   3.515136938885333*^9, 3.515137066764811*^9}, {3.515137110825602*^9, 
   3.515137119066185*^9}, {3.5151371775255013`*^9, 3.5151373895611477`*^9}, {
   3.5151374465410843`*^9, 3.515137477038661*^9}, {3.515137568836115*^9, 
   3.515137579419442*^9}, {3.515137616419663*^9, 3.51513761748636*^9}, {
   3.515137654279357*^9, 3.5151376784367037`*^9}, {3.515137730875472*^9, 
   3.5151377760866537`*^9}, {3.515137819146617*^9, 3.5151378999397793`*^9}, {
   3.515138619096966*^9, 3.5151386194233637`*^9}, {3.51514118009973*^9, 
   3.515141251838442*^9}, {3.515141331163142*^9, 3.515141331426639*^9}, {
   3.5151415742639112`*^9, 3.515141669242711*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Processing utilities", "Subsection",
 CellChangeTimes->{{3.5151436377708263`*^9, 3.515143657693527*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"lowpassfilter", "[", 
    RowBox[{"length_Integer", ",", "cutoffperiod_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "res", ",", "templen", ",", "temp", ",", "distrib", ",", "freq"}], 
      "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Quiet", "[", 
       RowBox[{"freq", "=", 
        RowBox[{"N", "[", 
         RowBox[{"length", "/", 
          RowBox[{"(", 
           RowBox[{"2", "*", "cutoffperiod"}], ")"}]}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
         RowBox[{"distrib", "[", 
          RowBox[{"n_", ",", "f_"}], "]"}], ":=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"n", "<", "f"}], ",", "1", ",", "0"}], "]"}]}], ";"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
         RowBox[{"distrib", "[", 
          RowBox[{"n_", ",", "f_"}], "]"}], ":=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"NumberQ", "[", "f", "]"}], ",", 
           RowBox[{"Chop", "[", 
            RowBox[{"Quiet", "[", 
             RowBox[{"N", "[", 
              RowBox[{"Exp", "[", 
               RowBox[{"-", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"n", "/", "f"}], ")"}], "^", "2"}]}], "]"}], "]"}], 
             "]"}], "]"}], ",", "1"}], "]"}]}], ";"}], "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"distrib", "[", 
        RowBox[{"n_", ",", "f_"}], "]"}], ":=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"NumberQ", "[", "f", "]"}], ",", 
         RowBox[{"Chop", "[", 
          RowBox[{"Quiet", "[", 
           RowBox[{"N", "[", 
            RowBox[{"Exp", "[", 
             RowBox[{"-", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"n", "/", "f"}], ")"}], "^", "2"}]}], "]"}], "]"}], 
           "]"}], "]"}], ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OddQ", "[", "length", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"templen", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"length", "-", "1"}], ")"}], "/", "2"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"temp", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"distrib", "[", 
             RowBox[{"i", ",", "freq"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", "templen"}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"res", "=", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"distrib", "[", 
              RowBox[{"0", ",", "freq"}], "]"}], "}"}], ",", "temp", ",", 
            RowBox[{"Reverse", "[", "temp", "]"}]}], "]"}]}], ";"}], 
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"templen", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"length", "-", "2"}], ")"}], "/", "2"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"temp", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"distrib", "[", 
             RowBox[{"i", ",", "freq"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", "templen"}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"res", "=", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"distrib", "[", 
              RowBox[{"0", ",", "freq"}], "]"}], "}"}], ",", "temp", ",", 
            RowBox[{"{", 
             RowBox[{"distrib", "[", 
              RowBox[{
               RowBox[{"templen", "+", "1"}], ",", "freq"}], "]"}], "}"}], 
            ",", 
            RowBox[{"Reverse", "[", "temp", "]"}]}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "res", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"highpassfilter", "[", 
    RowBox[{"length_Integer", ",", "cutoffperiod_"}], "]"}], ":=", 
   RowBox[{"1", "-", 
    RowBox[{"lowpassfilter", "[", 
     RowBox[{"length", ",", "cutoffperiod"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"bandpassfilter", "[", 
     RowBox[{"length_Integer", ",", 
      RowBox[{"{", 
       RowBox[{"flow_", ",", "fhigh_"}], "}"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"highpassfilter", "[", 
      RowBox[{"length", ",", "flow"}], "]"}], "*", 
     RowBox[{"lowpassfilter", "[", 
      RowBox[{"length", ",", "fhigh"}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"applylowpassfilter", "[", 
    RowBox[{"series_", ",", "cutoff_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "padding", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"padding", "=", "1000"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"unapplypadding", "[", 
        RowBox[{
         RowBox[{"InverseFourier", "[", 
          RowBox[{
           RowBox[{"Fourier", "[", 
            RowBox[{"applypadding", "[", 
             RowBox[{"series", ",", "padding"}], "]"}], "]"}], "*", 
           RowBox[{"lowpassfilter", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "series", "]"}], "+", 
              RowBox[{"2", "*", "padding"}]}], ",", "cutoff"}], "]"}]}], 
          "]"}], ",", "padding"}], "]"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"applyhighpassfilter", "[", 
    RowBox[{"series_", ",", "cutoff_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "padding", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"padding", "=", "1000"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"unapplypadding", "[", 
        RowBox[{
         RowBox[{"InverseFourier", "[", 
          RowBox[{
           RowBox[{"Fourier", "[", 
            RowBox[{"applypadding", "[", 
             RowBox[{"series", ",", "padding"}], "]"}], "]"}], "*", 
           RowBox[{"highpassfilter", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "series", "]"}], "+", 
              RowBox[{"2", "*", "padding"}]}], ",", "cutoff"}], "]"}]}], 
          "]"}], ",", "padding"}], "]"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"applybandpassfilter", "[", 
     RowBox[{"series_", ",", 
      RowBox[{"{", 
       RowBox[{"cutoffl_", ",", "cutoffh_"}], "}"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", "padding", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"padding", "=", "1000"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"unapplypadding", "[", 
         RowBox[{
          RowBox[{"InverseFourier", "[", 
           RowBox[{
            RowBox[{"Fourier", "[", 
             RowBox[{"applypadding", "[", 
              RowBox[{"series", ",", "padding"}], "]"}], "]"}], "*", 
            RowBox[{"bandpassfilter", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "series", "]"}], "+", 
               RowBox[{"2", "*", "padding"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"cutoffl", ",", "cutoffh"}], "}"}]}], "]"}]}], "]"}], 
          ",", "padding"}], "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"applypadding", "[", 
    RowBox[{"serie_", ",", "size_"}], "]"}], ":=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"serie", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", 
       RowBox[{"{", "size", "}"}]}], "]"}], ",", "serie", ",", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"serie", "[", 
        RowBox[{"[", 
         RowBox[{"-", "1"}], "]"}], "]"}], ",", 
       RowBox[{"{", "size", "}"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"unapplypadding", "[", 
     RowBox[{"serie_", ",", "size_"}], "]"}], ":=", 
    RowBox[{"Take", "[", 
     RowBox[{"serie", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"size", "+", "1"}], ",", 
        RowBox[{
         RowBox[{"-", "size"}], "-", "1"}]}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"derivate", "[", "series_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Append", "[", 
     RowBox[{
      RowBox[{"Differences", "[", "series", "]"}], ",", "0"}], "]"}], "*", 
    "100"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"integrate", "[", "series_", "]"}], ":=", 
    RowBox[{
     RowBox[{"Accumulate", "[", "series", "]"}], "/", "100"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"signratio", "[", "series_", "]"}], " ", ":=", " ", 
    RowBox[{"N", "[", 
     RowBox[{
      RowBox[{"Total", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"Sign", ",", " ", "series"}], "]"}], "]"}], "/", 
      RowBox[{"Length", "[", "series", "]"}]}], "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getpositive", "[", "series_", "]"}], " ", ":=", " ", 
   RowBox[{"N", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#", " ", "+", " ", 
          RowBox[{"Abs", "[", "#", "]"}]}], ")"}], "/", "2"}], " ", "&"}], 
      ",", " ", "series"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getnegative", "[", "series_", "]"}], " ", ":=", " ", 
    RowBox[{"N", "[", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"#", " ", "-", " ", 
           RowBox[{"Abs", "[", "#", "]"}]}], ")"}], "/", "2"}], " ", "&"}], 
       ",", " ", "series"}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"resize", "[", 
     RowBox[{"serie_List", ",", "size_"}], "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"interp", "=", 
         RowBox[{"{", "}"}]}], ",", "res"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "serie", "]"}], "\[Equal]", "size"}], ",", 
        RowBox[{"Return", "[", "serie", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"interp", "=", 
          RowBox[{"Interpolation", "[", 
           RowBox[{"Transpose", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"N", "[", "j", "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"j", ",", "0", ",", "1", ",", 
                  RowBox[{"1", "/", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "serie", "]"}], "-", "1"}], 
                    ")"}]}]}], "}"}]}], "]"}], ",", "serie"}], "}"}], "]"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"res", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"N", "[", 
             RowBox[{"interp", "[", "j", "]"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "0", ",", "1", ",", 
              RowBox[{"1", "/", 
               RowBox[{"(", 
                RowBox[{"size", "-", "1"}], ")"}]}]}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "res", "]"}]}]}], "]"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"normalizelength", "[", "datatoextract_", "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"tlast", "=", "1"}], ",", 
       RowBox[{"res", "=", 
        RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"res", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"res", "=", 
         RowBox[{"Append", "[", 
          RowBox[{"res", ",", 
           RowBox[{"resize", "[", 
            RowBox[{
             RowBox[{"datatoextract", "[", 
              RowBox[{"[", "i", "]"}], "]"}], ",", "100"}], "]"}]}], "]"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"Length", "[", "datatoextract", "]"}]}], "}"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "res", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"normalizevalues", "[", "datatoextract_", "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"tlast", "=", "1"}], ",", 
       RowBox[{"res", "=", 
        RowBox[{"{", "}"}]}], ",", "min", ",", "max"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"res", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"min", "=", 
          RowBox[{"Min", "[", 
           RowBox[{"datatoextract", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"max", "=", 
          RowBox[{"Max", "[", 
           RowBox[{"datatoextract", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"res", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"res", ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"datatoextract", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "-", "min"}], ")"}], "/", 
             RowBox[{"(", 
              RowBox[{"max", "-", "min"}], ")"}]}]}], "]"}]}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"Length", "[", "datatoextract", "]"}]}], "}"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "res", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"normalizeall", "[", "datatoextract_", "]"}], ":=", 
   RowBox[{"normalizevalues", "[", 
    RowBox[{"normalizelength", "[", "datatoextract", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"normalizeoffset", "[", "datatoextract_", "]"}], ":=", 
   RowBox[{"datatoextract", "-", 
    RowBox[{"datatoextract", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"normalizemean", "[", "datatoextract_", "]"}], ":=", 
    RowBox[{"datatoextract", "-", 
     RowBox[{"Mean", "[", "datatoextract", "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"strokepositions", "[", "stkMark_List", "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", "res", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"res", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"stkMark", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "\[Equal]", "1"}], ",", 
           RowBox[{"res", "=", 
            RowBox[{"Append", "[", 
             RowBox[{"res", ",", "i"}], "]"}]}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Length", "[", "stkMark", "]"}]}], "}"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "res", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"strokepositionsoffset", "[", 
     RowBox[{
     "strokepositions_List", ",", "offset_", ",", "samplenumber_Integer"}], 
     "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"stkpos", ",", "res"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"stkpos", "=", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"{", "1", "}"}], ",", "strokepositions", ",", 
          RowBox[{"{", "samplenumber", "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"res", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Round", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "-", "offset"}], ")"}], "*", 
             RowBox[{"stkpos", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], "+", 
            RowBox[{"offset", "*", 
             RowBox[{"stkpos", "[", 
              RowBox[{"[", 
               RowBox[{"i", "+", "1"}], "]"}], "]"}]}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{
             RowBox[{"Length", "[", "stkpos", "]"}], "-", "1"}]}], "}"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "res", "]"}]}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"timedatatostrokedata", "[", 
     RowBox[{"serie_List", ",", "strokepositions_List"}], "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", "res", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"res", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{"res", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"res", ",", 
            RowBox[{"Take", "[", 
             RowBox[{"serie", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"strokepositions", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", 
                RowBox[{"strokepositions", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", "+", "1"}], "]"}], "]"}]}], "}"}]}], "]"}]}], 
           "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{
            RowBox[{"Length", "[", "strokepositions", "]"}], "-", "1"}]}], 
          "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "res", "]"}]}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"strokeaggregationtotimedata", "[", 
     RowBox[{
     "serie_List", ",", "strokepositions_List", ",", "samplenumber_Integer"}],
      "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", "\n", "     ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"strokenumber", ",", "funcinterp"}], "}"}], ",", "\n", "     ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "serie", "]"}], " ", "!=", " ", 
         RowBox[{
          RowBox[{"Length", "[", "strokepositions", "]"}], " ", "-", "1"}]}], 
        ",", "\n", "      ", 
        RowBox[{
         RowBox[{"printError", "[", 
          RowBox[{"\"\<Stroke based series length incorrect : \>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"Length", "[", "serie", "]"}], "]"}], "<>", " ", 
           "\"\< \[NotEqual] \>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{
             RowBox[{"Length", "[", "strokepositions", "]"}], "-", "1"}], 
            "]"}]}], "]"}], ";", "\n", "      ", 
         RowBox[{"Return", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"-", "1"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"i", ",", " ", "1", ",", " ", "samplenumber"}], "}"}]}], 
           "]"}], "]"}]}], ",", "\n", "      ", "\n", "       ", 
        RowBox[{
         RowBox[{"funcinterp", " ", "=", " ", 
          RowBox[{"Interpolation", "[", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"0", ",", " ", 
                RowBox[{"serie", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "}"}], ",", 
             RowBox[{"Transpose", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Drop", "[", 
                 RowBox[{"strokepositions", ",", 
                  RowBox[{"-", "1"}]}], "]"}], ",", " ", "serie"}], "}"}], 
              "]"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"samplenumber", "+", "1"}], ",", " ", 
                RowBox[{"serie", "[", 
                 RowBox[{"[", 
                  RowBox[{"-", "1"}], "]"}], "]"}]}], "}"}], "}"}]}], "]"}], 
           "]"}]}], ";", "\n", "       ", 
         RowBox[{"Return", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"N", "[", 
             RowBox[{"funcinterp", "[", "i", "]"}], "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"i", ",", " ", "1", ",", " ", "samplenumber"}], "}"}]}], 
           "]"}], "]"}]}]}], "\n", "      ", "\n", "      ", "]"}]}], "\n", 
     "     ", "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 

 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"strokedatatotimedata", "[", 
     RowBox[{
     "serie_List", ",", "strokepositions_List", ",", "samplenumber_Integer"}],
      "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"res", ",", "interp", ",", "prev", ",", "next"}], "}"}], ",", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "serie", "]"}], " ", "!=", " ", 
         RowBox[{"Length", "[", "strokepositions", "]"}]}], " ", ",", "\n", 
        "      ", 
        RowBox[{
         RowBox[{"printError", "[", 
          RowBox[{"\"\<Stroke based series length incorrect : \>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"Length", "[", "serie", "]"}], "]"}], "<>", " ", 
           "\"\< \[NotEqual] \>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"Length", "[", "strokepositions", "]"}], "]"}]}], "]"}], 
         ";", "\n", "      ", 
         RowBox[{"Return", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"-", "1"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"i", ",", " ", "1", ",", " ", "samplenumber"}], "}"}]}], 
           "]"}], "]"}]}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        
        RowBox[{
         RowBox[{"res", "=", 
          RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "lets", " ", "resize", " ", "elements", " ", "of", " ", "serie", 
           " ", "in", " ", "order", " ", "to", " ", "be", " ", "able", " ", 
           "to", " ", "flatten", " ", "serie", " ", "later"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"next", "=", "0"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Do", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"prev", "=", "next"}], ";", "\[IndentingNewLine]", 
            RowBox[{"next", "=", 
             RowBox[{"strokepositions", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"res", "=", 
             RowBox[{"Append", "[", 
              RowBox[{"res", ",", 
               RowBox[{"resize", "[", 
                RowBox[{
                 RowBox[{"serie", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ",", 
                 RowBox[{"next", "-", "prev"}]}], "]"}]}], "]"}]}], ";"}], 
           "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "[", "serie", "]"}]}], "}"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"prev", "=", "next"}], ";", "\[IndentingNewLine]", 
         RowBox[{"next", "=", "samplenumber"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"res", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"res", ",", 
            RowBox[{"resize", "[", 
             RowBox[{
              RowBox[{"serie", "[", 
               RowBox[{"[", 
                RowBox[{"-", "1"}], "]"}], "]"}], ",", 
              RowBox[{"next", "-", "prev"}]}], "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"Return", "[", 
          RowBox[{"Flatten", "[", "res", "]"}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"markevents", "[", 
   RowBox[{"serie_List", ",", "samplenumber_Integer"}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "res", "}"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"res", "=", 
      RowBox[{"Table", "[", 
       RowBox[{"0", ",", 
        RowBox[{"{", "samplenumber", "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"res", "[", 
         RowBox[{"[", 
          RowBox[{"serie", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], "=", "1"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", "serie", "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "res", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.5149928235262947`*^9, 3.514992840378047*^9}, {
   3.515136305351717*^9, 3.515136311965749*^9}, {3.5151363540912857`*^9, 
   3.515136356489979*^9}, {3.5151363874362593`*^9, 3.5151363913685417`*^9}, {
   3.5151365373449183`*^9, 3.515136540504408*^9}, {3.515139575335042*^9, 
   3.515139591645549*^9}, {3.5151396262937326`*^9, 3.515139656126214*^9}, {
   3.515139718142771*^9, 3.515139724359191*^9}, {3.515139850692813*^9, 
   3.515139856710187*^9}, {3.515140005475967*^9, 3.5151400078365593`*^9}, {
   3.5151402374610863`*^9, 3.515140268663761*^9}, {3.515140428251667*^9, 
   3.5151404632262774`*^9}, 3.515140535742103*^9, {3.515140772844673*^9, 
   3.51514077467522*^9}, {3.515143622706325*^9, 3.515143623080727*^9}, {
   3.515144469324288*^9, 3.5151444990710793`*^9}, {3.515145068660701*^9, 
   3.515145079315358*^9}, 3.515145236598174*^9, {3.515146184941412*^9, 
   3.515146211273576*^9}, {3.5151641233105917`*^9, 3.515164142958548*^9}, {
   3.5151642313051167`*^9, 3.515164320300562*^9}, {3.51516437633957*^9, 
   3.5151643999182577`*^9}, {3.515164449039812*^9, 3.5151645488465767`*^9}, {
   3.515164597274893*^9, 3.515164610919297*^9}, {3.515164664229722*^9, 
   3.515164665993307*^9}, {3.515164710348064*^9, 3.5151647620032167`*^9}, {
   3.5151647950207863`*^9, 3.515164796700066*^9}, {3.515164839817874*^9, 
   3.515164969838868*^9}, {3.515165011524499*^9, 3.515165032308989*^9}, {
   3.51516510274256*^9, 3.515165118478448*^9}, {3.5151651883793507`*^9, 
   3.515165296304963*^9}, {3.515165340824489*^9, 3.515165410252325*^9}, {
   3.515165481796948*^9, 3.5151654862888412`*^9}, {3.515165690150062*^9, 
   3.515165693146926*^9}, {3.5151658626079407`*^9, 3.515166005637385*^9}, {
   3.515166049863776*^9, 3.51516620992239*^9}, {3.515166269289563*^9, 
   3.515166288421644*^9}, {3.515166404306131*^9, 3.5151664418136387`*^9}, {
   3.515166730330784*^9, 3.5151667570245457`*^9}, {3.515166834118936*^9, 
   3.515166834412156*^9}, {3.5151668670758038`*^9, 3.515166867444309*^9}, {
   3.5151669868872013`*^9, 3.515166994604558*^9}, {3.5151670263871613`*^9, 
   3.515167061049268*^9}, {3.515167922514*^9, 3.515167929138393*^9}, {
   3.5151693574798527`*^9, 3.5151693628305187`*^9}, {3.51516943360426*^9, 
   3.515169438426063*^9}, {3.515169805354739*^9, 3.5151698156252747`*^9}, {
   3.5151699740629597`*^9, 3.5151699814880867`*^9}, {3.5151704393190203`*^9, 
   3.515170445871707*^9}, {3.515922355105962*^9, 3.5159223592839203`*^9}, {
   3.580441816370816*^9, 3.5804418185845537`*^9}, {3.580442273337201*^9, 
   3.5804422753869553`*^9}, {3.58044237470424*^9, 3.5804424084836607`*^9}, {
   3.580442609830462*^9, 3.580442625277438*^9}, {3.5804427579458714`*^9, 
   3.580442775347987*^9}, {3.580442823930213*^9, 3.580442824621931*^9}, {
   3.5804428694352703`*^9, 3.580442920942318*^9}, {3.580442998398241*^9, 
   3.580442999197431*^9}, {3.580443074710668*^9, 3.580443452790618*^9}, {
   3.580443667813383*^9, 3.580443702170123*^9}, {3.5804626369577017`*^9, 
   3.5804626675750837`*^9}, {3.5804627068064137`*^9, 3.580462743690173*^9}, {
   3.5804627750236063`*^9, 3.580462831709263*^9}, {3.58046287537682*^9, 
   3.580462963440534*^9}, {3.580463171752454*^9, 3.5804631964786253`*^9}, {
   3.580463272490786*^9, 3.580463306889645*^9}, {3.580463343804749*^9, 
   3.580463353554709*^9}, {3.5804634012616034`*^9, 3.580463424572708*^9}, {
   3.580463498104397*^9, 3.580463633568535*^9}, {3.580463688166271*^9, 
   3.5804636887385597`*^9}, {3.5804641358649073`*^9, 
   3.5804642352787247`*^9}, {3.580478632396185*^9, 3.5804786332701674`*^9}, {
   3.580481326383135*^9, 3.580481326661508*^9}, {3.5804817157896223`*^9, 
   3.580481719948983*^9}, {3.580481787252379*^9, 3.5804817874440393`*^9}, {
   3.5804818635937223`*^9, 3.580481863777749*^9}, {3.5804821501836233`*^9, 
   3.580482253154793*^9}, {3.5804828825203257`*^9, 3.580482884807231*^9}, {
   3.5947534715070457`*^9, 3.594753499079558*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Model", "Section",
 CellChangeTimes->{{3.515136061729279*^9, 3.515136068425791*^9}, {
  3.515158204104355*^9, 3.5151582048482733`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "The", " ", "order", " ", "of", " ", "appeaance", " ", "is", " ", 
    "related", " ", "to", " ", "dependencies", " ", "between", " ", 
    "functions"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"processdefinitions", " ", "=", " ", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<Time Corrected\>\"", ",", "Second", ",", 
         "sampleseriestimecorrected"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Forward Velocity\>\"", ",", 
         RowBox[{"Meter", "/", "Second"}], ",", "sampleseriesforwardvel"}], 
        "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Forward Acceleration\>\"", " ", ",", "  ", 
         RowBox[{"Meter", "/", 
          RowBox[{"(", 
           RowBox[{"Second", "^", "2"}], ")"}]}], ",", "  ", 
         "sampleseriesforwardacc"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Up Acceleration\>\"", ",", "  ", 
         RowBox[{"Meter", "/", 
          RowBox[{"(", 
           RowBox[{"Second", "^", "2"}], ")"}]}], ",", " ", 
         "sampleseriesupacc"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Right Acceleration\>\"", ",", "  ", 
         RowBox[{"Meter", "/", 
          RowBox[{"(", 
           RowBox[{"Second", "^", "2"}], ")"}]}], ",", 
         "sampleseriesrightacc"}], "}"}], ",", "\[IndentingNewLine]", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Up Velocity\>\"", ",", "  ", 
         RowBox[{"Meter", "/", "Second"}], ",", "sampleseriesupvel"}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Right Velocity\>\"", " ", ",", 
         RowBox[{"Meter", "/", "Second"}], ",", " ", "sampleseriesrightvel"}],
         "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Forward Distance\>\"", " ", ",", "Meter", ",", "  ", 
         "sampleseriesforwardpos"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Up Distance\>\"", ",", "  ", "Meter", ",", "sampleseriesuppos"}],
         "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Right Distance\>\"", " ", ",", " ", "Meter", ",", 
         "sampleseriesrightpos"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Distance Corrected\>\"", ",", "Second", ",", 
         "sampleseriesdistancecorrected"}], "}"}], ",", "\[IndentingNewLine]",
        "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Pitch Angular Velocity\>\"", ",", 
         RowBox[{"1", "/", "Second"}], ",", "sampleseriespitchrot"}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Yaw Angular Velocity\>\"", ",", 
         RowBox[{"1", "/", "Second"}], ",", "sampleseriesyawrot"}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Roll Angular Velocity\>\"", ",", 
         RowBox[{"1", "/", "Second"}], ",", "sampleseriesrollrot"}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Pitch Angle\>\"", ",", "1", ",", "sampleseriespitchangle"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Yaw Angle\>\"", ",", "1", ",", "sampleseriesyawangle"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Roll Angle\>\"", ",", "1", ",", "sampleseriesrollangle"}], "}"}],
        ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Heading Angle\>\"", ",", "1", ",", "sampleseriesheadingangle"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Drift Angle\>\"", ",", "1", ",", "sampleseriesdriftangle"}], 
        "}"}], ",", "\n", "     ", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Pitch Angular Acceleration\>\"", ",", 
         RowBox[{"1", "/", 
          RowBox[{"(", 
           RowBox[{"Second", "^", "2"}], ")"}]}], ",", 
         "sampleseriespitchacc"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Yaw Angular Acceleration\>\"", ",", 
         RowBox[{"1", "/", 
          RowBox[{"(", 
           RowBox[{"Second", "^", "2"}], ")"}]}], ",", "sampleseriesyawacc"}],
         "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Roll Angular Acceleration\>\"", ",", 
         RowBox[{"1", "/", 
          RowBox[{"(", 
           RowBox[{"Second", "^", "2"}], ")"}]}], ",", 
         "sampleseriesrollacc"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Water Relative Velocity\>\"", ",", 
         RowBox[{"Meter", "/", "Second"}], ",", "sampleserieswatervel"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Air Relative Velocity\>\"", ",", 
         RowBox[{"Meter", "/", "Second"}], ",", "sampleseriesairvel"}], "}"}],
        ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Water Friction Force\>\"", ",", "Newton", ",", 
         "sampleserieswaterfrictionforce"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Air Friction Force\>\"", ",", "Newton", ",", 
         "sampleseriesairfrictionforce"}], "}"}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"{", 
        RowBox[{
        "\"\<Total Friction Force\>\"", ",", "Newton", ",", 
         "sampleseriestotalfrictionforce"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Acceleration Force\>\"", ",", "Newton", ",", 
         "sampleseriesaccelerationforce"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Total Force\>\"", ",", "Newton", ",", "sampleseriestotalforce"}],
         "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Water Friction Power\>\"", ",", "Watt", ",", 
         "sampleserieswaterfrictionpower"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Air Friction Power\>\"", ",", "Watt", ",", 
         "sampleseriesairfrictionpower"}], "}"}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"{", 
        RowBox[{
        "\"\<Total Friction Power\>\"", ",", "Watt", ",", 
         "sampleseriestotalfrictionpower"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Acceleration Power\>\"", ",", "Watt", ",", 
         "sampleseriesaccelerationpower"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Total Power\>\"", ",", "Watt", ",", "sampleseriestotalpower"}], 
        "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Kinetic Energy\>\"", ",", "Joule", ",", 
         "sampleseriescineticenergy"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Air Friction Energy\>\"", ",", "Joule", ",", 
         "sampleseriesairfrictionenergy"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Water Friction Energy\>\"", ",", "Joule", ",", 
         "sampleserieswaterfrictionenergy"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Total Friction Energy\>\"", ",", "Joule", ",", 
         "sampleseriestotalfrictionenergy"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Total Energy\>\"", ",", "Joule", ",", 
         "sampleseriestotalenergy"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Stroke Position\>\"", " ", ",", "1", ",", "  ", 
         "strokeseriesstrokesposition"}], " ", "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Stroke Mark\>\"", " ", ",", "  ", "1", ",", 
         "sampleseriesstrokemark"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Stroke Total\>\"", " ", ",", "1", ",", "   ", 
         "sampleseriestotalstrokes"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Stroke Phase\>\"", " ", ",", "1", ",", "   ", 
         "sampleseriesstrokephase"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Stroke Rate\>\"", " ", ",", 
         RowBox[{"1", "/", "Minute"}], ",", "  ", "sampleseriesstrokerate"}], 
        "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Distance Per Stroke\>\"", ",", "Meter", ",", 
         "sampleseriesdistanceperstroke"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Forward Velocity (Stroke)\>\"", " ", ",", 
         RowBox[{"Meter", "/", "Second"}], ",", "  ", 
         "strokeseriesvelocity"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Forward Acceleration (Stroke)\>\"", " ", ",", 
         RowBox[{"Meter", "/", 
          RowBox[{"(", 
           RowBox[{"Second", "^", "2"}], ")"}]}], ",", "  ", 
         "strokeseriesforward"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Roll Angle (Stroke)\>\"", " ", ",", 
         RowBox[{"Meter", "/", "Second"}], ",", "  ", 
         "strokeseriesrollangle"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Roll Angular Velocity (Stroke)\>\"", " ", ",", 
         RowBox[{"Meter", "/", 
          RowBox[{"(", 
           RowBox[{"Second", "^", "2"}], ")"}]}], ",", "  ", 
         "strokeseriesrollrot"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Forward Acceleration Garbage Rate (Stroke)\>\"", ",", "1", ",", 
         "strokeseriesforwardaccgarbage"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Forward Acceleration Garbage Rate\>\"", ",", "1", ",", 
         "sampleseriesforwardaccgarbage"}], "}"}]}], "\[IndentingNewLine]", 
      "\n", "     ", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriestimecorrected", "[", "locspec__", "]"}], ":=", 
     RowBox[{"normalizeoffset", "[", 
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Time\>\""}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesforwardacc", "[", "locspec__", "]"}], ":=", 
     RowBox[{"derivate", "[", 
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Forward Velocity\>\""}], "]"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesupacc", "[", "locspec__", "]"}], ":=", 
     RowBox[{"applyhighpassfilter", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"getData", "[", 
         RowBox[{"locspec", ",", "\"\<Up\>\""}], "]"}], "*", "9.81"}], ",", 
       "600"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesrightacc", "[", "locspec__", "]"}], ":=", 
     RowBox[{"applyhighpassfilter", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"getData", "[", 
         RowBox[{"locspec", ",", "\"\<Sideways\>\""}], "]"}], "*", "9.81"}], 
       ",", "600"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesforwardvel", "[", "locspec__", "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"applyhighpassfilter", "[", 
        RowBox[{
         RowBox[{"integrate", "[", 
          RowBox[{"applyhighpassfilter", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"getData", "[", 
              RowBox[{"locspec", ",", "\"\<Forward\>\""}], "]"}], "*", 
             "9.81"}], ",", "60"}], "]"}], "]"}], ",", "60"}], "]"}], "+", 
       RowBox[{"applylowpassfilter", "[", 
        RowBox[{
         RowBox[{"applylowpassfilter", "[", 
          RowBox[{
           RowBox[{"getData", "[", 
            RowBox[{"locspec", ",", "\"\<Vel(Dpr)\>\""}], "]"}], ",", "60"}], 
          "]"}], ",", "60"}], "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesupvel", "[", "locspec__", "]"}], ":=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"applyhighpassfilter", "[", 
        RowBox[{
         RowBox[{"integrate", "[", 
          RowBox[{"getData", "[", 
           RowBox[{"locspec", ",", "\"\<Up Acceleration\>\""}], "]"}], "]"}], 
         ",", "60"}], "]"}], ")"}], "+", 
      RowBox[{"applylowpassfilter", "[", 
       RowBox[{
        RowBox[{"derivate", "[", 
         RowBox[{"getData", "[", 
          RowBox[{"locspec", ",", "\"\<Up(m)\>\""}], "]"}], "]"}], ",", 
        "60"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesrightvel", "[", "locspec__", "]"}], ":=", 
     RowBox[{"applyhighpassfilter", "[", 
      RowBox[{
       RowBox[{"integrate", "[", 
        RowBox[{"getData", "[", 
         RowBox[{"locspec", ",", "\"\<Right Acceleration\>\""}], "]"}], "]"}],
        ",", "60"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesforwardpos", "[", "locspec__", "]"}], ":=", 
     RowBox[{"integrate", "[", 
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Forward Velocity\>\""}], "]"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesuppos", "[", "locspec__", "]"}], ":=", 
     RowBox[{"integrate", "[", 
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Up Velocity\>\""}], "]"}], "]"}]}], ";"}],
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesrightpos", "[", "locspec__", "]"}], ":=", 
     RowBox[{"integrate", "[", 
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Right Velocity\>\""}], "]"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesdistancecorrected", "[", "locspec__", "]"}], ":=", 
     RowBox[{"normalizeoffset", "[", 
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Forward Distance\>\""}], "]"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriespitchacc", "[", "locspec__", "]"}], ":=", " ", 
     RowBox[{"derivate", "[", 
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Pitch Angular Velocity\>\""}], "]"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesyawacc", "[", "locspec__", "]"}], ":=", 
     RowBox[{"derivate", "[", 
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Yaw Angular Velocity\>\""}], "]"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesrollacc", "[", "locspec__", "]"}], ":=", 
     RowBox[{"derivate", "[", 
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Roll Angular Velocity\>\""}], "]"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriespitchrot", "[", "locspec__", "]"}], ":=", 
     RowBox[{
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Gyr2(d/s)\>\""}], "]"}], "*", 
      RowBox[{"\[Pi]", "/", "180"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesyawrot", "[", "locspec__", "]"}], ":=", 
     RowBox[{
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Gyr3(d/s)\>\""}], "]"}], "*", 
      RowBox[{"\[Pi]", "/", "180"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesrollrot", "[", "locspec__", "]"}], ":=", 
     RowBox[{
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Gyr1(d/s)\>\""}], "]"}], "*", 
      RowBox[{"\[Pi]", "/", "180"}]}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriespitchangle", "[", "locspec__", "]"}], ":=", 
     RowBox[{
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Pitch(deg)\>\""}], "]"}], "*", 
      RowBox[{"\[Pi]", "/", "180"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesyawangle", "[", "locspec__", "]"}], ":=", 
     RowBox[{
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Yaw(deg)\>\""}], "]"}], "*", 
      RowBox[{"\[Pi]", "/", "180"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesrollangle", "[", "locspec__", "]"}], ":=", 
     RowBox[{
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Roll(deg)\>\""}], "]"}], "*", 
      RowBox[{"\[Pi]", "/", "180"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesheadingangle", "[", "locspec__", "]"}], ":=", 
     RowBox[{
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Heading\>\""}], "]"}], "*", 
      RowBox[{"\[Pi]", "/", "180"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesdriftangle", "[", "locspec__", "]"}], ":=", 
     RowBox[{
      RowBox[{"applylowpassfilter", "[", 
       RowBox[{
        RowBox[{"applyhighpassfilter", "[", 
         RowBox[{
          RowBox[{"getData", "[", 
           RowBox[{"locspec", ",", "\"\<Heading Angle\>\""}], "]"}], ",", 
          "300"}], "]"}], ",", "20"}], "]"}], "-", 
      RowBox[{"applyhighpassfilter", "[", 
       RowBox[{
        RowBox[{"getData", "[", 
         RowBox[{"locspec", ",", "\"\<Yaw Angle\>\""}], "]"}], ",", "300"}], 
       "]"}]}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleserieswatervel", "[", "locspec__", "]"}], ":=", 
     RowBox[{
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Forward Velocity\>\""}], "]"}], "-", 
      RowBox[{
       RowBox[{"getAttribute", "[", 
        RowBox[{"locspec", ",", "\"\<Water Velocity\>\""}], "]"}], "*", 
       RowBox[{"Cos", "[", 
        RowBox[{
         RowBox[{"getData", "[", 
          RowBox[{"locspec", ",", "\"\<Heading Angle\>\""}], "]"}], "-", 
         RowBox[{
          RowBox[{"getAttribute", "[", 
           RowBox[{"locspec", ",", "\"\<Water Direction\>\""}], "]"}], "*", 
          RowBox[{"\[Pi]", "/", "180"}]}]}], "]"}]}]}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesairvel", "[", "locspec__", "]"}], ":=", 
     RowBox[{
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Forward Velocity\>\""}], "]"}], "-", 
      RowBox[{
       RowBox[{"getAttribute", "[", 
        RowBox[{"locspec", ",", "\"\<Air Velocity\>\""}], "]"}], "*", 
       RowBox[{"Cos", "[", 
        RowBox[{
         RowBox[{"getData", "[", 
          RowBox[{"locspec", ",", "\"\<Heading Angle\>\""}], "]"}], "-", 
         RowBox[{
          RowBox[{"getAttribute", "[", 
           RowBox[{"locspec", ",", "\"\<Air Direction\>\""}], "]"}], "*", 
          RowBox[{"\[Pi]", "/", "180"}]}]}], "]"}]}]}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"airDensity", "[", 
      RowBox[{"pressure_", ",", "temperature_", ",", "humidity_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "-", "humidity"}], ")"}], "*", "0.028964", "*", 
         "pressure"}], " ", "+", " ", 
        RowBox[{"humidity", "*", "0.018016", "*", "pressure"}]}], ")"}], "/", 
      
      RowBox[{"(", 
       RowBox[{"8.314", "*", 
        RowBox[{"(", 
         RowBox[{"273", "+", "temperature"}], ")"}]}], ")"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"waterDensity", "[", 
      RowBox[{"temperature_", ",", "salinity_"}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"999.842594", "+", 
        RowBox[{"0.06793952", "*", "temperature"}], "-", 
        RowBox[{"0.009095290", "*", 
         RowBox[{"temperature", "^", "2"}]}], "+", 
        RowBox[{"0.0001001685", "*", 
         RowBox[{"temperature", "^", "3"}]}], "-", 
        RowBox[{"0.000001120083", "*", 
         RowBox[{"temperature", "^", "4"}]}], "+", 
        RowBox[{"0.000000006536332", "*", 
         RowBox[{"temperature", "^", "5"}]}]}], ")"}], "+", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"0.824493", "-", 
         RowBox[{"0.0040899", "*", "temperature"}], "+", 
         RowBox[{"0.000076438", "*", 
          RowBox[{"temperature", "^", "2"}]}], "-", 
         RowBox[{"0.00000082467", "*", 
          RowBox[{"temperature", "^", "3"}]}], "+", 
         RowBox[{"0.0000000053875", "*", 
          RowBox[{"temperature", "^", "4"}]}]}], ")"}], "*", "salinity"}], 
      "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "0.00572466"}], "+", 
         RowBox[{"0.00010227", "*", "temperature"}], "-", 
         RowBox[{"0.0000016546", "*", 
          RowBox[{"temperature", "^", "2"}]}]}], ")"}], "*", 
       RowBox[{"salinity", "^", 
        RowBox[{"(", 
         RowBox[{"3", "/", "2"}], ")"}]}]}], "+", 
      RowBox[{"0.00048314", "*", 
       RowBox[{"salinity", "^", "2"}]}]}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleserieswaterfrictionforce", "[", "locspec__", "]"}], ":=", 
     
     RowBox[{"0.5", "*", 
      RowBox[{"waterDensity", "[", 
       RowBox[{
        RowBox[{"getAttribute", "[", 
         RowBox[{"locspec", ",", "\"\<Water Temperature\>\""}], "]"}], ",", 
        RowBox[{"getAttribute", "[", 
         RowBox[{"locspec", ",", "\"\<Water Salinity\>\""}], "]"}]}], "]"}], 
      "*", 
      RowBox[{"getAttribute", "[", 
       RowBox[{"locspec", ",", "\"\<Water Cx\>\""}], "]"}], "*", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "^", "2"}], "&"}], ",", 
        RowBox[{"getData", "[", 
         RowBox[{"locspec", ",", "\"\<Water Relative Velocity\>\""}], "]"}]}],
        "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesairfrictionforce", "[", "locspec__", "]"}], ":=", 
     RowBox[{"0.5", "*", 
      RowBox[{"airDensity", "[", 
       RowBox[{
        RowBox[{"getAttribute", "[", 
         RowBox[{"locspec", ",", "\"\<Air Pressure\>\""}], "]"}], ",", 
        RowBox[{"getAttribute", "[", 
         RowBox[{"locspec", ",", "\"\<Air Temperature\>\""}], "]"}], ",", 
        RowBox[{"getAttribute", "[", 
         RowBox[{"locspec", ",", "\"\<Air Humidity\>\""}], "]"}]}], "]"}], 
      "*", 
      RowBox[{"getAttribute", "[", 
       RowBox[{"locspec", ",", "\"\<Air Cx\>\""}], "]"}], "*", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "^", "2"}], "&"}], ",", 
        RowBox[{"getData", "[", 
         RowBox[{"locspec", ",", "\"\<Air Relative Velocity\>\""}], "]"}]}], 
       "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriestotalfrictionforce", "[", "locspec__", "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"getAttribute", "[", 
        RowBox[{
        "locspec", ",", "\"\<Empirical Friction Linear Coefficient\>\""}], 
        "]"}], "*", 
       RowBox[{"getData", "[", 
        RowBox[{"locspec", ",", "\"\<Water Relative Velocity\>\""}], "]"}]}], 
      " ", "+", " ", 
      RowBox[{
       RowBox[{"getAttribute", "[", 
        RowBox[{
        "locspec", ",", "\"\<Empirical Friction Quadratic Coefficient\>\""}], 
        "]"}], "*", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "^", "2"}], "&"}], ",", 
         RowBox[{"getData", "[", 
          RowBox[{"locspec", ",", "\"\<Water Relative Velocity\>\""}], 
          "]"}]}], "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesaccelerationforce", "[", "locspec__", "]"}], ":=", 
     RowBox[{
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Forward Acceleration\>\""}], "]"}], "*", 
      RowBox[{"getAttribute", "[", 
       RowBox[{"locspec", ",", "\"\<Mass\>\""}], "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriestotalforce", "[", "locspec__", "]"}], ":=", 
     RowBox[{
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Total Friction Force\>\""}], "]"}], "+", 
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Acceleration Force\>\""}], "]"}]}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleserieswaterfrictionpower", "[", "locspec__", "]"}], ":=", 
     
     RowBox[{
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Forward Velocity\>\""}], "]"}], "*", 
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Water Friction Force\>\""}], "]"}]}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesairfrictionpower", "[", "locspec__", "]"}], ":=", 
     RowBox[{
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Forward Velocity\>\""}], "]"}], "*", 
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Air Friction Force\>\""}], "]"}]}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriestotalfrictionpower", "[", "locspec__", "]"}], ":=", 
     
     RowBox[{
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Forward Velocity\>\""}], "]"}], "*", 
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Total Friction Force\>\""}], "]"}]}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesaccelerationpower", "[", "locspec__", "]"}], ":=", 
     RowBox[{
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Forward Velocity\>\""}], "]"}], "*", 
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Acceleration Force\>\""}], "]"}]}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriescineticenergy", "[", "locspec__", "]"}], ":=", 
     RowBox[{"0.5", "*", 
      RowBox[{"getAttribute", "[", 
       RowBox[{"locspec", ",", "\"\<Mass\>\""}], "]"}], "*", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "^", "2"}], "&"}], ",", 
        RowBox[{"getData", "[", 
         RowBox[{"locspec", ",", "\"\<Forward Velocity\>\""}], "]"}]}], 
       "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesairfrictionenergy", "[", "locspec__", "]"}], ":=", 
     RowBox[{
      RowBox[{"Accumulate", "[", 
       RowBox[{"getData", "[", 
        RowBox[{"locspec", ",", "\"\<Air Friction Power\>\""}], "]"}], "]"}], 
      "*", 
      RowBox[{"getAttribute", "[", 
       RowBox[{"locspec", ",", "\"\<Sample Interval\>\""}], "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleserieswaterfrictionenergy", "[", "locspec__", "]"}], ":=", 
     RowBox[{
      RowBox[{"Accumulate", "[", 
       RowBox[{"getData", "[", 
        RowBox[{"locspec", ",", "\"\<Water Friction Power\>\""}], "]"}], 
       "]"}], "*", 
      RowBox[{"getAttribute", "[", 
       RowBox[{"locspec", ",", "\"\<Sample Interval\>\""}], "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriestotalfrictionenergy", "[", "locspec__", "]"}], ":=", 
     RowBox[{
      RowBox[{"Accumulate", "[", 
       RowBox[{"getData", "[", 
        RowBox[{"locspec", ",", "\"\<Total Friction Power\>\""}], "]"}], 
       "]"}], "*", 
      RowBox[{"getAttribute", "[", 
       RowBox[{"locspec", ",", "\"\<Sample Interval\>\""}], "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriestotalpower", "[", "locspec__", "]"}], ":=", 
     RowBox[{
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Total Friction Power\>\""}], "]"}], "+", 
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Acceleration Power\>\""}], "]"}]}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriestotalenergy", "[", "locspec__", "]"}], ":=", 
     RowBox[{
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Total Friction Energy\>\""}], "]"}], "+", 
      
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Kinetic Energy\>\""}], "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"strokeseriesstrokesposition", "[", "locspec__", "]"}], ":=", 
     RowBox[{"strokepositionsoffset", "[", 
      RowBox[{
       RowBox[{"strokepositions", "[", 
        RowBox[{"getData", "[", 
         RowBox[{"locspec", ",", "\"\<StkMark\>\""}], "]"}], "]"}], ",", 
       "0.55", ",", 
       RowBox[{"getAttribute", "[", 
        RowBox[{"locspec", ",", "\"\<Length\>\""}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesstrokemark", "[", "locspec__", "]"}], ":=", 
     RowBox[{"markevents", "[", 
      RowBox[{
       RowBox[{"getData", "[", 
        RowBox[{"locspec", ",", "\"\<Stroke Position\>\""}], "]"}], ",", 
       RowBox[{"getAttribute", "[", 
        RowBox[{"locspec", ",", "\"\<Length\>\""}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriestotalstrokes", "[", "locspec__", "]"}], ":=", 
     RowBox[{"Accumulate", "[", 
      RowBox[{"getData", "[", 
       RowBox[{"locspec", ",", "\"\<Stroke Mark\>\""}], "]"}], "]"}]}], ";"}],
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesstrokephase", "[", "locspec__", "]"}], ":=", 
     RowBox[{"strokedatatotimedata", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{"j", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", 
           RowBox[{
            RowBox[{"getData", "[", 
             RowBox[{"locspec", ",", "\"\<Stroke Total\>\""}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"-", "1"}], "]"}], "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "0", ",", "1", ",", 
           RowBox[{"1", "/", "599"}]}], "}"}]}], "]"}], ",", 
       RowBox[{"getData", "[", 
        RowBox[{"locspec", ",", "\"\<Stroke Position\>\""}], "]"}], ",", 
       RowBox[{"getAttribute", "[", 
        RowBox[{"locspec", ",", "\"\<Length\>\""}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesstrokerate", "[", "locspec__", "]"}], ":=", 
     RowBox[{"getData", "[", 
      RowBox[{"locspec", ",", "\"\<Stroke\>\""}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesdistanceperstroke", "[", "locspec__", "]"}], ":=", 
     RowBox[{"60", "*", 
      RowBox[{
       RowBox[{"getData", "[", 
        RowBox[{"locspec", ",", "\"\<Forward Velocity\>\""}], "]"}], "/", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Max", "[", 
           RowBox[{"#", ",", "10"}], "]"}], "&"}], ",", 
         RowBox[{"getData", "[", 
          RowBox[{"locspec", ",", "\"\<Stroke\>\""}], "]"}]}], "]"}]}]}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"strokeseriesvelocity", "[", "locspec__", "]"}], ":=", 
     RowBox[{"timedatatostrokedata", "[", 
      RowBox[{
       RowBox[{"getData", "[", 
        RowBox[{"locspec", ",", "\"\<Forward Velocity\>\""}], "]"}], ",", 
       RowBox[{"getData", "[", 
        RowBox[{"locspec", ",", "\"\<Stroke Position\>\""}], "]"}]}], "]"}]}],
     ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"strokeseriesforward", "[", "locspec__", "]"}], ":=", 
     RowBox[{"timedatatostrokedata", "[", 
      RowBox[{
       RowBox[{"getData", "[", 
        RowBox[{"locspec", ",", "\"\<Forward Acceleration\>\""}], "]"}], ",", 
       
       RowBox[{"getData", "[", 
        RowBox[{"locspec", ",", "\"\<Stroke Position\>\""}], "]"}]}], "]"}]}],
     ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"strokeseriesrollangle", "[", "locspec__", "]"}], ":=", 
     RowBox[{"timedatatostrokedata", "[", 
      RowBox[{
       RowBox[{"getData", "[", 
        RowBox[{"locspec", ",", "\"\<Roll Angle\>\""}], "]"}], ",", 
       RowBox[{"getData", "[", 
        RowBox[{"locspec", ",", "\"\<Stroke Position\>\""}], "]"}]}], "]"}]}],
     ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"strokeseriesrollrot", "[", "locspec__", "]"}], ":=", 
     RowBox[{"timedatatostrokedata", "[", 
      RowBox[{
       RowBox[{"getData", "[", 
        RowBox[{"locspec", ",", "\"\<Roll Angular Velocity\>\""}], "]"}], ",", 
       RowBox[{"getData", "[", 
        RowBox[{"locspec", ",", "\"\<Stroke Position\>\""}], "]"}]}], "]"}]}],
     ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"strokeseriesforwardaccgarbage", "[", "locspec__", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"strokes", ",", "meanstroke", ",", "res"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"strokes", "=", 
         RowBox[{"normalizeall", "[", 
          RowBox[{"getData", "[", 
           RowBox[{"locspec", ",", "\"\<Forward Acceleration (Stroke)\>\""}], 
           "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"meanstroke", "=", 
         RowBox[{"Mean", "[", "strokes", "]"}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"res", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"N", "[", 
            RowBox[{"Correlation", "[", 
             RowBox[{
              RowBox[{"strokes", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ",", "meanstroke"}], "]"}], 
            "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "[", "strokes", "]"}]}], "}"}]}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"res", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "=", "0"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"res", "[", 
          RowBox[{"[", 
           RowBox[{"-", "1"}], "]"}], "]"}], "=", "0"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "res", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sampleseriesforwardaccgarbage", "[", "locspec__", "]"}], ":=", 
     RowBox[{"applylowpassfilter", "[", 
      RowBox[{"strokeaggregationtotimedata", "[", 
       RowBox[{
        RowBox[{"getData", "[", 
         RowBox[{
         "locspec", ",", 
          "\"\<Forward Acceleration Garbage Rate (Stroke)\>\""}], "]"}], ",", 
        
        RowBox[{"getData", "[", 
         RowBox[{"locspec", ",", "\"\<Stroke Position\>\""}], "]"}], ",", 
        RowBox[{"getAttribute", "[", 
         RowBox[{"locspec", ",", "\"\<Length\>\""}], "]"}], ",", "1"}], "]"}],
       "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.515136090549317*^9, 3.515136182992366*^9}, {
   3.515136584843458*^9, 3.515136651792584*^9}, {3.51513796128189*^9, 
   3.5151380281824017`*^9}, {3.515138410938882*^9, 3.5151384872076807`*^9}, {
   3.515138668640394*^9, 3.5151387127757874`*^9}, {3.515138747738759*^9, 
   3.515138876546256*^9}, {3.515138924240308*^9, 3.515138959941758*^9}, {
   3.515140573098222*^9, 3.515140574374235*^9}, {3.5151406205889273`*^9, 
   3.5151406500226927`*^9}, {3.515140836441656*^9, 3.515141126768798*^9}, {
   3.515143496679922*^9, 3.515143498688863*^9}, {3.5151435349694147`*^9, 
   3.515143535879599*^9}, {3.515143568701489*^9, 3.515143593834732*^9}, {
   3.515143679749303*^9, 3.5151437071214523`*^9}, {3.515143823355255*^9, 
   3.515143824753748*^9}, {3.515143914941752*^9, 3.5151439220523787`*^9}, {
   3.515143995587256*^9, 3.515144020450306*^9}, {3.515144100421887*^9, 
   3.5151441546663857`*^9}, {3.5151442060281982`*^9, 3.515144236257333*^9}, {
   3.5151443710900106`*^9, 3.515144389041872*^9}, {3.515144759661165*^9, 
   3.515144763989292*^9}, {3.5151448020177593`*^9, 3.515144859825232*^9}, {
   3.5151451940592537`*^9, 3.5151452024696198`*^9}, {3.515145297358075*^9, 
   3.515145304562985*^9}, {3.515145370376872*^9, 3.515145485994441*^9}, {
   3.515145523531398*^9, 3.515145529400681*^9}, {3.5151456662587852`*^9, 
   3.5151456723039217`*^9}, {3.515145826860569*^9, 3.515145827591473*^9}, {
   3.515145958960113*^9, 3.515145980955883*^9}, {3.5151460556001263`*^9, 
   3.5151461036441097`*^9}, {3.5151461572022047`*^9, 3.515146171849019*^9}, {
   3.5151462349625053`*^9, 3.515146237437477*^9}, {3.5151463251574183`*^9, 
   3.515146429129692*^9}, {3.5151464637253933`*^9, 3.5151464993299427`*^9}, {
   3.515146529475079*^9, 3.515146548536275*^9}, {3.5151469590558863`*^9, 
   3.515146967376746*^9}, {3.5151472680685177`*^9, 3.5151472746389437`*^9}, {
   3.515147441679927*^9, 3.515147457316832*^9}, {3.515147504899177*^9, 
   3.515147505897316*^9}, 3.51514754466848*^9, {3.5151479582271748`*^9, 
   3.515147985383974*^9}, {3.5151480497116632`*^9, 3.515148055029212*^9}, {
   3.515148249059355*^9, 3.515148263203453*^9}, {3.515148538971284*^9, 
   3.515148543557639*^9}, {3.5151486973539133`*^9, 3.51514872909055*^9}, {
   3.515148785956465*^9, 3.515148810590042*^9}, {3.515148893214279*^9, 
   3.5151488966749077`*^9}, {3.515149111939863*^9, 3.515149118095977*^9}, 
   3.5151493122217417`*^9, {3.515149506980274*^9, 3.515149507466268*^9}, {
   3.515156549903998*^9, 3.515156551491371*^9}, {3.515157093456217*^9, 
   3.515157094088491*^9}, {3.515158263376567*^9, 3.5151582702435207`*^9}, {
   3.51515838866358*^9, 3.5151584712766848`*^9}, {3.515159512643029*^9, 
   3.515159551324788*^9}, {3.515159584036709*^9, 3.515159653032242*^9}, 
   3.5151604425139*^9, 3.515161319674855*^9, {3.515161728764018*^9, 
   3.515161761446165*^9}, {3.5151625540087223`*^9, 3.515162640860242*^9}, {
   3.515163551552655*^9, 3.515163597160314*^9}, {3.515163963521984*^9, 
   3.515163998639337*^9}, {3.51516403957082*^9, 3.515164055887542*^9}, {
   3.515167243956644*^9, 3.51516737245124*^9}, 3.515167407121853*^9, {
   3.515167444789743*^9, 3.515167466630498*^9}, {3.515167622963112*^9, 
   3.5151676445920486`*^9}, {3.515167674606453*^9, 3.515167685239085*^9}, {
   3.515167728240653*^9, 3.515167746086396*^9}, {3.515168141368381*^9, 
   3.515168142027521*^9}, {3.515168178914898*^9, 3.515168179944085*^9}, {
   3.5151682349653873`*^9, 3.5151682921025887`*^9}, {3.5151683448586283`*^9, 
   3.51516834786621*^9}, {3.5151683863619003`*^9, 3.5151685341487293`*^9}, 
   3.515168574654948*^9, {3.515168615156994*^9, 3.515168647429741*^9}, {
   3.515168692427019*^9, 3.515168844763886*^9}, 3.5151689489900513`*^9, {
   3.5151689970437613`*^9, 3.515169063760178*^9}, {3.515169174690772*^9, 
   3.515169234414865*^9}, {3.515169282395462*^9, 3.5151693005346117`*^9}, {
   3.515169659909608*^9, 3.515169663569409*^9}, {3.515169871951104*^9, 
   3.515169873192852*^9}, {3.515169997603643*^9, 3.515169997936591*^9}, {
   3.515170086236642*^9, 3.515170102195731*^9}, {3.515170251087635*^9, 
   3.5151703346418657`*^9}, {3.515170495140037*^9, 3.5151705580302353`*^9}, {
   3.515170917579199*^9, 3.515170926492723*^9}, {3.515170979467527*^9, 
   3.515170983796397*^9}, {3.5151710837315903`*^9, 3.5151711113971043`*^9}, {
   3.515171390688189*^9, 3.515171394563899*^9}, {3.515171476652329*^9, 
   3.515171491763801*^9}, {3.516363378160306*^9, 3.516363386116226*^9}, {
   3.516363419271303*^9, 3.516363420554759*^9}, {3.516363689189004*^9, 
   3.516363690782*^9}, {3.516363784824943*^9, 3.516363789703597*^9}, {
   3.516856152741645*^9, 3.51685628259591*^9}, {3.516856313791129*^9, 
   3.516856335104054*^9}, {3.5168588647490997`*^9, 3.516858926484687*^9}, {
   3.580312699695805*^9, 3.580312700232195*^9}, {3.580312998916315*^9, 
   3.580313044796751*^9}, {3.580313084172188*^9, 3.5803130926165543`*^9}, 
   3.580313133837174*^9, {3.5803135536908216`*^9, 3.580313591466776*^9}, {
   3.58031363324137*^9, 3.5803136588615837`*^9}, {3.580313714712207*^9, 
   3.5803137353212957`*^9}, {3.580314542535754*^9, 3.580314545278399*^9}, {
   3.5803147760438623`*^9, 3.580314851917572*^9}, {3.580314931977038*^9, 
   3.580314932604596*^9}, {3.5803149831132383`*^9, 3.58031499327278*^9}, {
   3.5803151369817457`*^9, 3.5803151733037558`*^9}, {3.580315273605876*^9, 
   3.580315283029385*^9}, 3.580315356370983*^9, {3.5803154053245573`*^9, 
   3.580315407672372*^9}, 3.580315474318516*^9, {3.5803157063800087`*^9, 
   3.58031572384261*^9}, 3.5803157711856403`*^9, {3.580315864608824*^9, 
   3.580315905343957*^9}, {3.580316273952653*^9, 3.5803163067000847`*^9}, {
   3.5803165548890867`*^9, 3.5803165834514017`*^9}, {3.580316619917171*^9, 
   3.580316737343141*^9}, {3.5803169851112127`*^9, 3.5803170117553167`*^9}, {
   3.580317055067865*^9, 3.5803171075096684`*^9}, {3.580317613236094*^9, 
   3.580318171028701*^9}, {3.580318244276388*^9, 3.5803182641855297`*^9}, 
   3.580318945679542*^9, {3.580319083511883*^9, 3.580319100852734*^9}, {
   3.580319142716666*^9, 3.580319207084238*^9}, {3.580319274413611*^9, 
   3.580319355414669*^9}, {3.5803194166949244`*^9, 3.5803194841789618`*^9}, {
   3.580319562545557*^9, 3.5803195892720337`*^9}, {3.580319629347396*^9, 
   3.5803196343070993`*^9}, {3.580319679781384*^9, 3.580319719575542*^9}, {
   3.5803200151338787`*^9, 3.580320018544133*^9}, {3.5803207164096737`*^9, 
   3.5803207207653503`*^9}, {3.580321301330099*^9, 3.580321562098003*^9}, {
   3.580323925781393*^9, 3.5803239505582952`*^9}, {3.580324149206574*^9, 
   3.580324159527981*^9}, 3.580442385126006*^9, {3.580442631218014*^9, 
   3.58044263192868*^9}, {3.580463847267907*^9, 3.5804638671673737`*^9}, {
   3.580464570199539*^9, 3.580464702173958*^9}, {3.580464806261115*^9, 
   3.580464856965386*^9}, {3.580464892829414*^9, 3.580465024822555*^9}, 
   3.58046524161473*^9, {3.580469530184973*^9, 3.5804695304689417`*^9}, {
   3.580469562899632*^9, 3.580469569702277*^9}, {3.580470144984622*^9, 
   3.580470165910933*^9}, {3.580470197014608*^9, 3.580470215874192*^9}, {
   3.5804705205672073`*^9, 3.5804706466095467`*^9}, 3.580479824949594*^9, {
   3.58047990076014*^9, 3.580479923245256*^9}, {3.580480034269781*^9, 
   3.580480035114811*^9}, {3.580480212034072*^9, 3.580480234627149*^9}, {
   3.5804807033780727`*^9, 3.580480704897977*^9}, {3.5804823172314453`*^9, 
   3.580482332541059*^9}, {3.580482383858829*^9, 3.580482386151238*^9}, {
   3.580482428203515*^9, 3.580482450256712*^9}, {3.580482481813929*^9, 
   3.5804825917993603`*^9}, {3.580482627784615*^9, 3.580482669003009*^9}, {
   3.58048274408601*^9, 3.580482751188451*^9}, {3.580483241187006*^9, 
   3.5804832495392647`*^9}, {3.58048333712434*^9, 3.5804833395784473`*^9}, 
   3.5804846295346203`*^9, {3.580487716079678*^9, 3.580487720752235*^9}, {
   3.580487760201137*^9, 3.580487768208659*^9}, {3.5804877990129538`*^9, 
   3.580487836453136*^9}, {3.580488021705545*^9, 3.580488022510578*^9}, {
   3.587117200361084*^9, 3.5871173508765717`*^9}, {3.5871177406163273`*^9, 
   3.587117745270553*^9}, 3.60906848652805*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["Import", "Section",
 CellChangeTimes->{{3.515138166373639*^9, 3.515138178446677*^9}, {
  3.578309263907118*^9, 3.578309264756939*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DumpSave", "[", 
  RowBox[{
  "\"\</Volumes/MacBookHD/Users/Vincent/Documents/Minimax/BorisNeveu/\
Framework.mx\>\"", ",", "\"\<Global`\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.59510045814578*^9, 3.5951005091862288`*^9}}],

Cell[BoxData[
 RowBox[{"{", "\<\"Global`\"\>", "}"}]], "Output",
 CellChangeTimes->{3.595100545097468*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Import", "Subsection",
 CellChangeTimes->{{3.515138297567054*^9, 3.51513830648291*^9}, 
   3.5151581559424*^9, {3.5794188000045*^9, 3.5794188058052187`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"FileNameSetter", "[", 
  RowBox[{"Dynamic", "[", "filesnames", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Dynamic", "[", 
  RowBox[{"TableForm", "[", "filesnames", "]"}], "]"}]}], "Input",
 CellChangeTimes->{
  3.5803234182563677`*^9, {3.580323495426017*^9, 3.5803234994079638`*^9}, 
   3.580324057282578*^9, {3.594995182861446*^9, 3.59499518316286*^9}}],

Cell[BoxData[
 InterpretationBox[
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource["FEStrings", "BrowseLabel"],
    ImageSizeCache->{58., {0., 10.}}],
   Appearance->"DialogBox",
   ButtonFunction:>BoxForm`FileNameSetterFunction[
     Dynamic[$CellContext`filesnames], "Open", Automatic, Automatic],
   Enabled->Automatic,
   Evaluator->Automatic,
   ImageMargins->0,
   ImageSize->Automatic,
   Method->"Queued"],
  FileNameSetter[
   Dynamic[$CellContext`filesnames], "Open", Automatic]]], "Output",
 CellChangeTimes->{3.59404503315834*^9, 3.594734691273592*^9, 
  3.594995138035384*^9, 3.5962163489849157`*^9}],

Cell[BoxData[
 DynamicBox[ToBoxes[
   TableForm[$CellContext`filesnames], StandardForm],
  ImageSizeCache->{78., {1., 9.}}]], "Output",
 CellChangeTimes->{3.59404503315834*^9, 3.594734691273592*^9, 
  3.594995138035384*^9, 3.5962163489927263`*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dataimport", "=", 
   RowBox[{"importCSV", "[", "filesnames", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"procdef", "=", 
   RowBox[{"importProcessDefinition", "[", "processdefinitions", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dataproc", "=", 
   RowBox[{"processData", "[", 
    RowBox[{"procdef", ",", "dataimport"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.5151419440971603`*^9, 3.515141948209036*^9}, {
   3.515142017519773*^9, 3.5151420604628687`*^9}, {3.5151437358356867`*^9, 
   3.5151437370739517`*^9}, {3.515144589871132*^9, 3.515144616333012*^9}, 
   3.515153451912366*^9, 3.515167324862508*^9, {3.515171314129236*^9, 
   3.515171324312428*^9}, 3.5151716689899187`*^9, {3.515922190915545*^9, 
   3.5159221931526327`*^9}, {3.516854344149393*^9, 3.516854397804206*^9}, {
   3.516854446846583*^9, 3.5168544488256083`*^9}, {3.516855485287508*^9, 
   3.516855568663002*^9}, {3.516855910787464*^9, 3.5168559264658012`*^9}, {
   3.516897311350226*^9, 3.516897377563292*^9}, {3.516961394590294*^9, 
   3.516961489911037*^9}, 3.516961589821862*^9, {3.5169796271913853`*^9, 
   3.51697966616926*^9}, {3.578308171842626*^9, 3.5783082016438427`*^9}, 
   3.579332235682324*^9, 3.57933226892282*^9, {3.5793570756633177`*^9, 
   3.5793570972001667`*^9}, 3.579415142119191*^9, {3.579417204059247*^9, 
   3.579417205632794*^9}, {3.5794172728959303`*^9, 3.5794173488588877`*^9}, {
   3.5794187708582077`*^9, 3.579418788961308*^9}, {3.579420931662551*^9, 
   3.579420962379881*^9}, {3.580320150942724*^9, 3.580320200213406*^9}, {
   3.580323150424901*^9, 3.5803231571697683`*^9}, {3.5803231914267063`*^9, 
   3.58032325232474*^9}, {3.580323315807334*^9, 3.580323348767377*^9}, {
   3.5803234321088676`*^9, 3.5803234373681183`*^9}, {3.58044364145936*^9, 
   3.5804436422764482`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"getData", "[", "dataimport", "]"}]], "Input",
 CellChangeTimes->{{3.515156770846539*^9, 3.515156771028754*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Boris Neveu test slalom ligne droite 3 premier convergent 3  \
divergent 3 paralelle 2013/11/08 10:44:19\"\>", "\[Rule]", "1"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.515156771445463*^9, 3.515158689350752*^9, 
  3.5151723643552837`*^9, 3.578308272185566*^9, 3.5783086874704933`*^9, 
  3.578322082217144*^9, 3.579240652633309*^9, 3.579275610799865*^9, 
  3.579331024899726*^9, 3.57941692141415*^9, 3.579419020411165*^9, 
  3.580321603716053*^9, 3.5803218244376917`*^9, 3.580324228791321*^9, 
  3.580324420740898*^9, 3.5803282311857977`*^9, 3.580330820519989*^9, 
  3.580361958598531*^9, 3.580462358422434*^9, 3.580462465373755*^9, 
  3.580470711702286*^9, 3.580483390282886*^9, 3.586948509786721*^9, 
  3.59405384031666*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"getData", "[", 
  RowBox[{"dataimport", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.594055120355466*^9, 3.594055138608728*^9}, {
  3.594055447155806*^9, 3.5940554473311462`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"Time\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"Lap Counter\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"Forward\"\>", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"Sideways\"\>", "\[Rule]", "4"}], ",", 
   RowBox[{"\<\"Sideways(m/s)\"\>", "\[Rule]", "5"}], ",", 
   RowBox[{"\<\"Up\"\>", "\[Rule]", "6"}], ",", 
   RowBox[{"\<\"Up(m)\"\>", "\[Rule]", "7"}], ",", 
   RowBox[{"\<\"Stroke\"\>", "\[Rule]", "8"}], ",", 
   RowBox[{"\<\"Vel(Dpr)\"\>", "\[Rule]", "9"}], ",", 
   RowBox[{"\<\"Vel(100hz)\"\>", "\[Rule]", "10"}], ",", 
   RowBox[{"\<\"Vel/Stk\"\>", "\[Rule]", "11"}], ",", 
   RowBox[{"\<\"VLo/Stk\"\>", "\[Rule]", "12"}], ",", 
   RowBox[{"\<\"VHi/Stk\"\>", "\[Rule]", "13"}], ",", 
   RowBox[{"\<\"Gyr1(raw)\"\>", "\[Rule]", "14"}], ",", 
   RowBox[{"\<\"Gyr2(raw)\"\>", "\[Rule]", "15"}], ",", 
   RowBox[{"\<\"Gyr3(raw)\"\>", "\[Rule]", "16"}], ",", 
   RowBox[{"\<\"Gyr1(d/s)\"\>", "\[Rule]", "17"}], ",", 
   RowBox[{"\<\"Gyr2(d/s)\"\>", "\[Rule]", "18"}], ",", 
   RowBox[{"\<\"Gyr3(d/s)\"\>", "\[Rule]", "19"}], ",", 
   RowBox[{"\<\"Roll(deg)\"\>", "\[Rule]", "20"}], ",", 
   RowBox[{"\<\"Pitch(deg)\"\>", "\[Rule]", "21"}], ",", 
   RowBox[{"\<\"Yaw(deg)\"\>", "\[Rule]", "22"}], ",", 
   RowBox[{"\<\"Heading\"\>", "\[Rule]", "23"}], ",", 
   RowBox[{"\<\"#sats\"\>", "\[Rule]", "24"}], ",", 
   RowBox[{"\<\"Altitude\"\>", "\[Rule]", "25"}], ",", 
   RowBox[{"\<\"Vel(av)\"\>", "\[Rule]", "26"}], ",", 
   RowBox[{"\<\"HDOP\"\>", "\[Rule]", "27"}], ",", 
   RowBox[{"\<\"VDOP\"\>", "\[Rule]", "28"}], ",", 
   RowBox[{"\<\"Dist(dgps)\"\>", "\[Rule]", "29"}], ",", 
   RowBox[{"\<\"Plyr.Load(Raw)\"\>", "\[Rule]", "30"}], ",", 
   RowBox[{"\<\"Ac3HR\"\>", "\[Rule]", "31"}], ",", 
   RowBox[{"\<\"AcFlt1(g)\"\>", "\[Rule]", "32"}], ",", 
   RowBox[{"\<\"AcFlt2(g)\"\>", "\[Rule]", "33"}], ",", 
   RowBox[{"\<\"AcFlt3(g)\"\>", "\[Rule]", "34"}], ",", 
   RowBox[{"\<\"Mag1\"\>", "\[Rule]", "35"}], ",", 
   RowBox[{"\<\"Mag2\"\>", "\[Rule]", "36"}], ",", 
   RowBox[{"\<\"Mag3\"\>", "\[Rule]", "37"}], ",", 
   RowBox[{"\<\"Mag1(Raw)\"\>", "\[Rule]", "38"}], ",", 
   RowBox[{"\<\"Mag2(Raw)\"\>", "\[Rule]", "39"}], ",", 
   RowBox[{"\<\"Mag3(Raw)\"\>", "\[Rule]", "40"}], ",", 
   RowBox[{"\<\"StkMark\"\>", "\[Rule]", "41"}], ",", 
   RowBox[{"\<\"Odometer\"\>", "\[Rule]", "42"}], ",", 
   RowBox[{"\<\"Longitude\"\>", "\[Rule]", "43"}], ",", 
   RowBox[{"\<\"Latitude\"\>", "\[Rule]", "44"}], ",", 
   RowBox[{"\<\"Heart Rate\"\>", "\[Rule]", "45"}], ",", 
   RowBox[{"\<\"Acc(dpr)\"\>", "\[Rule]", "46"}], ",", 
   RowBox[{"\<\"Estimate XY\"\>", "\[Rule]", "47"}], ",", 
   RowBox[{"\<\"Fig. of Merit\"\>", "\[Rule]", "48"}], ",", 
   RowBox[{"\<\"Facing\"\>", "\[Rule]", "49"}], ",", 
   RowBox[{"\<\"AoA\"\>", "\[Rule]", "50"}], ",", 
   RowBox[{"\<\"Raw Vel.\"\>", "\[Rule]", "51"}], ",", 
   RowBox[{"\<\"Smooth Vel.\"\>", "\[Rule]", "52"}], ",", 
   RowBox[{"\<\"Plyr.Ld(2D Accum)\"\>", "\[Rule]", "53"}], ",", 
   RowBox[{"\<\"Plyr.Ld(2D)\"\>", "\[Rule]", "54"}], ",", 
   RowBox[{"\<\"Plyr.Ld(slow)\"\>", "\[Rule]", "55"}], ",", 
   RowBox[{"\<\"Exertion Index\"\>", "\[Rule]", "56"}], ",", 
   RowBox[{"\<\"E.I.Accum\"\>", "\[Rule]", "57"}], ",", 
   RowBox[{"\<\"Debug1\"\>", "\[Rule]", "58"}], ",", 
   RowBox[{"\<\"Debug2\"\>", "\[Rule]", "59"}], ",", 
   RowBox[{"\<\"Debug3\"\>", "\[Rule]", "60"}], ",", 
   RowBox[{"\<\"Debug4\"\>", "\[Rule]", "61"}], ",", 
   RowBox[{"\<\"Debug5\"\>", "\[Rule]", "62"}], ",", 
   RowBox[{"\<\"Debug6\"\>", "\[Rule]", "63"}], ",", 
   RowBox[{"\<\"Debug7\"\>", "\[Rule]", "64"}], ",", 
   RowBox[{"\<\"Debug8\"\>", "\[Rule]", "65"}], ",", 
   RowBox[{"\<\"Tackle Load\"\>", "\[Rule]", "66"}], ",", 
   RowBox[{"\<\"Vel ()\"\>", "\[Rule]", "67"}], ",", 
   RowBox[{"\<\"H.R. ()\"\>", "\[Rule]", "68"}], ",", 
   RowBox[{"\<\"Possession\"\>", "\[Rule]", "69"}], ",", 
   RowBox[{"\<\"PlyrLd(smooth)\"\>", "\[Rule]", "70"}], ",", 
   RowBox[{"\<\"Plyr. Load\"\>", "\[Rule]", "71"}], ",", 
   RowBox[{"\<\"HR Exertion\"\>", "\[Rule]", "72"}], ",", 
   RowBox[{"\<\"Plyr Ld 1D(Fwd)\"\>", "\[Rule]", "73"}], ",", 
   RowBox[{"\<\"Plyr Ld 1D(Side)\"\>", "\[Rule]", "74"}], ",", 
   RowBox[{"\<\"Plyr Ld 1D(Up)\"\>", "\[Rule]", "75"}], ",", 
   RowBox[{"\<\"CVE\"\>", "\[Rule]", "76"}], ",", 
   RowBox[{"\<\"(\"\>", "\[Rule]", "77"}], ",", 
   RowBox[{"\<\"G\"\>", "\[Rule]", "78"}], ",", 
   RowBox[{"\<\"\"\>", "\[Rule]", "79"}], ",", 
   RowBox[{"\<\"\"\>", "\[Rule]", "80"}], ",", 
   RowBox[{"\<\"\.01\.01\"\>", "\[Rule]", "81"}], ",", 
   RowBox[{"\<\"\"\>", "\[Rule]", "82"}], ",", 
   RowBox[{"\<\"\"\>", "\[Rule]", "83"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.594055120923821*^9, {3.59405537001803*^9, 3.594055372089055*^9}, 
   3.59405545033282*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"ListPlot", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Transpose", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"getData", "[", 
         RowBox[{"dataproc", ",", "1", ",", "\"\<Time\>\""}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"getData", "[", 
         RowBox[{"dataproc", ",", "1", ",", "\"\<Forward Velocity\>\""}], 
         "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"getData", "[", 
         RowBox[{"dataproc", ",", "1", ",", "\"\<Time\>\""}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"getData", "[", 
         RowBox[{"dataproc", ",", "1", ",", "\"\<Right Velocity\>\""}], 
         "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"getData", "[", 
         RowBox[{"dataproc", ",", "1", ",", "\"\<Time\>\""}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"getData", "[", 
         RowBox[{"dataproc", ",", "1", ",", "\"\<Up Velocity\>\""}], "]"}]}], 
       "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Red", ",", 
      RowBox[{"Darker", "[", "Green", "]"}], ",", "Blue"}], "}"}]}], ",", 
   "\n", 
   RowBox[{"Joined", "\[Rule]", "True"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"All", ",", "All"}], "}"}]}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Time(s)\>\"", ",", "\"\<Velocity (m/s)\>\""}], "}"}]}], " ",
    ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{
      RowBox[{"LineLegend", "[", 
       RowBox[{"Automatic", ",", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{"Function", "[", 
            RowBox[{"x", ",", 
             RowBox[{"Apply", "[", 
              RowBox[{"List", ",", "x"}], "]"}]}], "]"}], ",", 
           RowBox[{"getData", "[", "dataproc", "]"}]}], "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
        RowBox[{"LegendLayout", "\[Rule]", "\"\<Column\>\""}]}], "]"}], ",", 
      "Bottom"}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.594054050174756*^9, 3.594054081874589*^9}, {
  3.5940547718539133`*^9, 3.59405478842629*^9}, {3.594054831443593*^9, 
  3.594054836724866*^9}, {3.5940550322428827`*^9, 3.594055034653512*^9}, {
  3.594055096386273*^9, 3.594055114465516*^9}, {3.5940554632975597`*^9, 
  3.594055465732315*^9}, {3.594055594876112*^9, 3.594055608460185*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"getData", "[", 
    RowBox[{"dataproc", ",", "1", ",", "\"\<Forward Velocity\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"length", "=", 
   RowBox[{"Length", "[", "data", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"min", "=", 
   RowBox[{"Min", "[", "data", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"max", "=", 
   RowBox[{"Max", "[", "data", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Grid", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{"data", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Min", "[", 
              RowBox[{
               RowBox[{"start", "+", "startfine", "+", "startveryfine"}], ",", 
               RowBox[{"end", "+", "endfine", "+", "endveryfine"}]}], "]"}], 
             ",", 
             RowBox[{"Max", "[", 
              RowBox[{
               RowBox[{"start", "+", "startfine", "+", "startveryfine"}], ",", 
               RowBox[{"end", "+", "endfine", "+", "endveryfine"}]}], "]"}], 
             ",", "resolution"}], "}"}]}], "]"}], ",", 
         RowBox[{"Joined", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"All", ",", 
            RowBox[{"{", 
             RowBox[{"min", ",", "max"}], "}"}]}], "}"}]}], ",", " ", 
         RowBox[{"AxesLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Sample number\>\"", ",", "\"\<Velocity (m/s)\>\""}], 
           "}"}]}], " ", ",", 
         RowBox[{"ImageSize", "\[Rule]", "800"}], ",", 
         RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], "]"}], 
       "}"}], ",", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Min", "[", 
          RowBox[{
           RowBox[{"start", "+", "startfine", "+", "startveryfine"}], ",", 
           RowBox[{"end", "+", "endfine", "+", "endveryfine"}]}], "]"}], ",", 
         
         RowBox[{"Max", "[", 
          RowBox[{
           RowBox[{"start", "+", "startfine", "+", "startveryfine"}], ",", 
           RowBox[{"end", "+", "endfine", "+", "endveryfine"}]}], "]"}]}], 
        "}"}], "}"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"start", ",", "1"}], "}"}], ",", "1", ",", "length", ",", "1"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"startfine", ",", "0"}], "}"}], ",", 
     RowBox[{"-", "10000"}], ",", "10000", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"startveryfine", ",", "0"}], "}"}], ",", 
     RowBox[{"-", "100"}], ",", "100", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"end", ",", "length"}], "}"}], ",", "1", ",", "length", ",", 
     "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"endfine", ",", "0"}], "}"}], ",", 
     RowBox[{"-", "10000"}], ",", "10000", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"endveryfine", ",", "0"}], "}"}], ",", 
     RowBox[{"-", "100"}], ",", "100", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"resolution", ",", "100"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10", ",", "100", ",", "1000", ",", "10000"}], 
      "}"}]}], "}"}]}], "\[IndentingNewLine]", "]"}]}], "Input",
 CellChangeTimes->{{3.5940558505548162`*^9, 3.5940559926438093`*^9}, {
   3.5940560434677057`*^9, 3.594056102818536*^9}, {3.5940561331674147`*^9, 
   3.594056251492444*^9}, {3.594056302612712*^9, 3.594056389932476*^9}, {
   3.594056650929185*^9, 3.594056668968865*^9}, {3.5940569215613003`*^9, 
   3.594056976726213*^9}, {3.594057022565165*^9, 3.5940571255343037`*^9}, {
   3.594057306881613*^9, 3.594057326407811*^9}, {3.5940574047486563`*^9, 
   3.59405744098153*^9}, 3.594060670955533*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"data", "=", 
    RowBox[{"getData", "[", 
     RowBox[{"dataproc", ",", "1", ",", "\"\<Forward Velocity\>\""}], "]"}]}],
    ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"data", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Sin", "[", 
        RowBox[{"x", "/", "100"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "0", ",", "10000"}], "}"}]}], "]"}]}], ";"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"length", "=", 
   RowBox[{"Length", "[", "data", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"min", "=", 
   RowBox[{"Min", "[", "data", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"max", "=", 
   RowBox[{"Max", "[", "data", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Grid", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{"data", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Min", "[", 
              RowBox[{
               RowBox[{"start", "+", "startfine", "+", "startveryfine"}], ",", 
               RowBox[{"end", "+", "endfine", "+", "endveryfine"}]}], "]"}], 
             ",", 
             RowBox[{"Max", "[", 
              RowBox[{
               RowBox[{"start", "+", "startfine", "+", "startveryfine"}], ",", 
               RowBox[{"end", "+", "endfine", "+", "endveryfine"}]}], "]"}], 
             ",", "resolution"}], "}"}]}], "]"}], ",", 
         RowBox[{"Joined", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"All", ",", 
            RowBox[{"{", 
             RowBox[{"min", ",", "max"}], "}"}]}], "}"}]}], ",", " ", 
         RowBox[{"AxesLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Sample number\>\"", ",", "\"\<Velocity (m/s)\>\""}], 
           "}"}]}], " ", ",", 
         RowBox[{"ImageSize", "\[Rule]", "800"}], ",", 
         RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], "]"}], 
       "}"}], ",", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Min", "[", 
          RowBox[{
           RowBox[{"start", "+", "startfine", "+", "startveryfine"}], ",", 
           RowBox[{"end", "+", "endfine", "+", "endveryfine"}]}], "]"}], ",", 
         
         RowBox[{"Max", "[", 
          RowBox[{
           RowBox[{"start", "+", "startfine", "+", "startveryfine"}], ",", 
           RowBox[{"end", "+", "endfine", "+", "endveryfine"}]}], "]"}]}], 
        "}"}], "}"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"start", ",", "1"}], "}"}], ",", "1", ",", "length", ",", "1"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"startfine", ",", "0"}], "}"}], ",", 
     RowBox[{"-", "10000"}], ",", "10000", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"startveryfine", ",", "0"}], "}"}], ",", 
     RowBox[{"-", "100"}], ",", "100", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"end", ",", "length"}], "}"}], ",", "1", ",", "length", ",", 
     "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"endfine", ",", "0"}], "}"}], ",", 
     RowBox[{"-", "10000"}], ",", "10000", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"endveryfine", ",", "0"}], "}"}], ",", 
     RowBox[{"-", "100"}], ",", "100", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"resolution", ",", "100"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10", ",", "100", ",", "1000", ",", "10000"}], 
      "}"}]}], "}"}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Grid", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{"data", ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", 
             RowBox[{"-", "1"}], ",", "resolutioncoarse"}], "}"}]}], "]"}], 
         ",", 
         RowBox[{"Joined", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"All", ",", 
            RowBox[{"{", 
             RowBox[{"min", ",", "max"}], "}"}]}], "}"}]}], ",", " ", 
         RowBox[{"AxesLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Sample number\>\"", ",", "\"\<Velocity (m/s)\>\""}], 
           "}"}]}], " ", ",", 
         RowBox[{"ImageSize", "\[Rule]", "800"}], ",", 
         RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], "]"}], 
       "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{"data", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Max", "[", 
              RowBox[{"1", ",", 
               RowBox[{"Round", "[", 
                RowBox[{"resolutioncoarse", "*", 
                 RowBox[{"Min", "[", 
                  RowBox[{
                   RowBox[{"pt", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
                   RowBox[{"pt", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "]"}]}], "]"}]}],
               "]"}], ",", 
             RowBox[{"Min", "[", 
              RowBox[{"length", ",", 
               RowBox[{"Round", "[", 
                RowBox[{"resolutioncoarse", "*", 
                 RowBox[{"Max", "[", 
                  RowBox[{
                   RowBox[{"pt", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
                   RowBox[{"pt", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "]"}]}], "]"}]}],
               "]"}], ",", "resolution"}], "}"}]}], "]"}], ",", 
         RowBox[{"Joined", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"All", ",", 
            RowBox[{"{", 
             RowBox[{"min", ",", "max"}], "}"}]}], "}"}]}], ",", " ", 
         RowBox[{"AxesLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Sample number\>\"", ",", "\"\<Velocity (m/s)\>\""}], 
           "}"}]}], " ", ",", 
         RowBox[{"ImageSize", "\[Rule]", "800"}], ",", 
         RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], "]"}], 
       "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Max", "[", 
          RowBox[{"1", ",", 
           RowBox[{"Round", "[", 
            RowBox[{"Min", "[", 
             RowBox[{
              RowBox[{"pt", "[", 
               RowBox[{"[", 
                RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
              RowBox[{"pt", "[", 
               RowBox[{"[", 
                RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "]"}], "]"}]}], 
          "]"}], ",", 
         RowBox[{"Min", "[", 
          RowBox[{"length", ",", 
           RowBox[{"Round", "[", 
            RowBox[{"Max", "[", 
             RowBox[{
              RowBox[{"pt", "[", 
               RowBox[{"[", 
                RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
              RowBox[{"pt", "[", 
               RowBox[{"[", 
                RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "]"}], "]"}]}], 
          "]"}], ",", "resolution"}], "}"}], "}"}]}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "}"}], "]"}], ",", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"pt", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"100", ",", "0"}], "}"}]}], "}"}]}], "}"}], ",", 
     "Locator"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"resolutioncoarse", ",", "100"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10", ",", "100", ",", "1000", ",", "10000"}], 
      "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"resolution", ",", "100"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10", ",", "100", ",", "1000", ",", "10000"}], 
      "}"}]}], "}"}]}], "\[IndentingNewLine]", "]"}]}], "Input",
 CellChangeTimes->{{3.594059790638536*^9, 3.594059791255226*^9}, {
   3.5940598254915323`*^9, 3.59405996727011*^9}, {3.594060308038157*^9, 
   3.594060339756398*^9}, 3.5940606201953707`*^9, {3.5940606645523987`*^9, 
   3.594060666220689*^9}, {3.594060724276807*^9, 3.594060772203867*^9}, {
   3.5940608376986856`*^9, 3.594060857063122*^9}, 3.594060887827866*^9, {
   3.594060955959895*^9, 3.594060960575962*^9}, {3.594061014421088*^9, 
   3.594061056105599*^9}, {3.594061097635894*^9, 3.594061101796267*^9}, {
   3.594734514544581*^9, 3.5947345290822277`*^9}, {3.59473660532086*^9, 
   3.594736611568274*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"i", "=", "3"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"DynamicModule", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "data", ",", "length", ",", "width", ",", "min", ",", "max", ",", 
       "location", ",", "selection", ",", "left", ",", "right", ",", 
       RowBox[{"pts", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"data", "=", 
       RowBox[{"getData", "[", 
        RowBox[{"dataproc", ",", "i", ",", "\"\<Forward Velocity\>\""}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"data", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Sin", "[", 
            RowBox[{"x", "/", "100"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", "0", ",", "100"}], "}"}]}], "]"}]}], ";"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"length", "=", 
       RowBox[{"Length", "[", "data", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"width", "=", "1000"}], ";", "\[IndentingNewLine]", 
      RowBox[{"min", "=", 
       RowBox[{"Min", "[", "data", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"max", "=", 
       RowBox[{"Max", "[", "data", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"left", "=", "1"}], ";", "\[IndentingNewLine]", 
      RowBox[{"right", "=", "length"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"location", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Max", "[", 
            RowBox[{"1", ",", 
             RowBox[{"Round", "[", 
              RowBox[{"Min", "[", 
               RowBox[{"left", ",", "right"}], "]"}], "]"}]}], "]"}], ",", 
           RowBox[{"Min", "[", 
            RowBox[{"length", ",", 
             RowBox[{"Round", "[", 
              RowBox[{
               RowBox[{"Max", "[", 
                RowBox[{"left", ",", "right"}], "]"}], "+", "1"}], "]"}]}], 
            "]"}], ",", 
           RowBox[{"Max", "[", 
            RowBox[{"1", ",", 
             RowBox[{"Round", "[", 
              RowBox[{"Abs", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"right", "-", "left"}], ")"}], "/", "width"}], "]"}],
               "]"}]}], "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"selection", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Max", "[", 
            RowBox[{"1", ",", 
             RowBox[{"Round", "[", 
              RowBox[{"Min", "[", 
               RowBox[{
                RowBox[{"pts", "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
                RowBox[{"pts", "[", 
                 RowBox[{"[", 
                  RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "]"}], "]"}]}], 
            "]"}], ",", 
           RowBox[{"Min", "[", 
            RowBox[{"length", ",", 
             RowBox[{"Round", "[", 
              RowBox[{
               RowBox[{"Max", "[", 
                RowBox[{
                 RowBox[{"pts", "[", 
                  RowBox[{"[", 
                   RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
                 RowBox[{"pts", "[", 
                  RowBox[{"[", 
                   RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "]"}], "+", "1"}],
               "]"}]}], "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"pts", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", "2"}], "]"}], "]"}], "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"Round", "[", 
            RowBox[{"pts", "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"pts", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "2"}], "]"}], "]"}], "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"Round", "[", 
            RowBox[{"pts", "[", 
             RowBox[{"[", 
              RowBox[{"2", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"Grid", "[", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Slider", "[", 
             RowBox[{
              RowBox[{"Dynamic", "[", "left", "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "length"}], "}"}], ",", 
              RowBox[{"ImageSize", "\[Rule]", "width"}]}], "]"}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"Slider", "[", 
             RowBox[{
              RowBox[{"Dynamic", "[", "right", "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "length"}], "}"}], ",", 
              RowBox[{"ImageSize", "\[Rule]", "width"}]}], "]"}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"Dynamic", "[", 
             RowBox[{"Text", "[", 
              RowBox[{"\"\<Location : \>\"", " ", "<>", " ", 
               RowBox[{"ToString", "[", "location", "]"}]}], "]"}], "]"}], 
            "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"Dynamic", "[", 
             RowBox[{"Text", "[", 
              RowBox[{"\"\<Selection : \>\"", " ", "<>", " ", 
               RowBox[{"ToString", "[", "selection", "]"}]}], "]"}], "]"}], 
            "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"Button", "[", 
             RowBox[{"\"\<Add Selection Crop\>\"", ",", 
              RowBox[{"dataproc", "=", 
               RowBox[{"addCrop", "[", 
                RowBox[{"dataproc", ",", "i", ",", "selection"}], "]"}]}]}], 
             "]"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"LocatorPane", "[", 
             RowBox[{
              RowBox[{"Dynamic", "[", "pts", "]"}], ",", 
              RowBox[{"Dynamic", "[", 
               RowBox[{"ListPlot", "[", 
                RowBox[{
                 RowBox[{"Take", "[", 
                  RowBox[{"data", ",", "location"}], "]"}], ",", 
                 RowBox[{"Joined", "\[Rule]", "True"}], ",", 
                 RowBox[{"PlotRange", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{"min", ",", "max"}], "}"}]}], "}"}]}], ",", " ", 
                 RowBox[{"AxesLabel", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{
                   "\"\<Sample number\>\"", ",", "\"\<Velocity (m/s)\>\""}], 
                   "}"}]}], " ", ",", 
                 RowBox[{"ImageSize", "\[Rule]", "width"}], ",", 
                 RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}], ",", 
                 RowBox[{"DataRange", "\[Rule]", " ", 
                  RowBox[{"Drop", "[", 
                   RowBox[{"location", ",", 
                    RowBox[{"-", "1"}]}], "]"}]}]}], "]"}], "]"}]}], "]"}], 
            "}"}]}], "\[IndentingNewLine]", "}"}], "]"}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.594736854991376*^9, 3.594736924270732*^9}, {
   3.594736955865163*^9, 3.594737176432816*^9}, {3.594737291262464*^9, 
   3.594737400658025*^9}, {3.594737431577867*^9, 3.594737477384494*^9}, {
   3.594737510877832*^9, 3.594737518764682*^9}, {3.594737584941155*^9, 
   3.594737629100902*^9}, {3.5947376652054*^9, 3.5947378542193537`*^9}, {
   3.594737884990528*^9, 3.59473798720753*^9}, {3.594738250876347*^9, 
   3.594738255966852*^9}, 3.594738515524095*^9, {3.5947385535382757`*^9, 
   3.594738560880828*^9}, {3.594738638263585*^9, 3.594738653352681*^9}, {
   3.594738703082008*^9, 3.594738808702463*^9}, {3.5947391374581547`*^9, 
   3.594739312193919*^9}, {3.594739352196039*^9, 3.5947394827058487`*^9}, {
   3.5947395423961773`*^9, 3.594739552308132*^9}, {3.59473969912608*^9, 
   3.5947398000259123`*^9}, {3.5947398420499287`*^9, 3.594739909509746*^9}, {
   3.594740019283296*^9, 3.594740078205728*^9}, {3.594740110885147*^9, 
   3.594740135264278*^9}, {3.594740188859606*^9, 3.594740347086961*^9}, {
   3.594740377367201*^9, 3.594740471332659*^9}, {3.594741076862236*^9, 
   3.594741140463977*^9}, {3.594741234996841*^9, 3.594741238871045*^9}, {
   3.5947413404979486`*^9, 3.594741372340384*^9}, {3.596217302643196*^9, 
   3.596217335253367*^9}, 3.596217384814246*^9, 3.596217421929804*^9}],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`data$$ = CompressedData["
1:eJwUV3c81d8bt3fDKEKLhKKEpFLvWyFtlCLylYYURSJpSWU1ZFRGRKUI2Vvc
a9977Tu5l8qOlrJC/D6/v96v55znnPM8z3nmSudL1mcEBQQE5hoEBLquuQmm
rqzBg22eCwRUa/BX2fejyOIa0Bbe0B6WqwGvnvzq2oIaTB7UO9E7vwbLntEy
tWRrwC2T5GcT/HLs7jiuZg2E1EszdHRq0Kj0N26JHkHXH9gUb1ADG7OemN0E
LS6+u+6Adg36XgrOZSyrga+oRHS8fA3e7stRtJaugfSpWw6RQjXIb/Q74/S3
Gupioq5FP6uRGFBY1TpYjSWc7/N7BqpR82uvuvqvatDcGnfaz1YjY1PXuizR
GrTRN+YOE+cLLjAjc+eqwYy7ots2WY36Z81zt0eq4fZCbzaovxqFw6nn8pnV
EHh9+GZmTTXe/E0XvlZcjb0GCaxiAjfqRzWuzSX4tnXs/5BTDZmbT3w52dU4
wmiPScuqxtzmfabrM6uR0OZwxCWjGouKdy8aflONc9W1dbovqnHQtWXxxshq
bEj0r7nypBpRb/ao339UjT//XoW7hVYjPVi4pcq/GpN3He3cbxLv5+j5RHlV
4/KpgikVj2rICj2yjXerxv0LdtPLXatRlk2/kHamGt1B1y6321eDoVIet9y6
GtveFKXet6hG0i2D6/yt1dD9c/n3qBZhj8eL6ufJV2NqlWXGmX9VoJ45b751
uAqrD9Y6abGrYCZ+wvlVdRV6mQt7dmZVQT9ts6rFiyoUfH6rXxxcBcvfHkvj
vauQQicnTjlXIeJWoQXXsgo1gjdOm6AKu3/EfD+1oQpf6Oy2/hVVOPAm94ag
bBWaI/KVigWrID38/o7cn0qsMH111Z1XiccXX8uKllciINx0fG9SJQblSv2v
BVfC7ptbm4NHJeb8rFLJNpVQXMZTW4RKNEa1mf3QqIT6UINz6cJKOFzrSjCf
oWDf25tP6oYpiDJMv779EwXFPw6s7W6nIMdXbqcpi4JPZ9TaT7VSQDu/+T2a
KOixviHHplOwfOzjIg0aBZ2RfSFllRQoBg2+Fi+jYP3OpXFPMykof75UPTaR
AoHWh+kWERSMrr9+K/4eBe6/FVpWe1JwW8D7gqI9BQMCwT+TzCiwMXAbouhR
8Kz57x+RxRTsTIvSlp4j48CDsoHoQTK+F2e7p7aR0altPLnpIxl/b3jVI4WM
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
4Ur3m2tdGFItjjHU281Q2OWSKjPs69SGrCzucYZMjCYGyV1kKMDbuF4yi6GJ
ytsOcx4wZEOBS9dj7h+LNu142AtefJNb0zgZc1ryafJDFZZmWA416+hhzjdH
v2mxZmnyqxiF67uw75MyOUYRLA27xBxUTWPJ/ZHLZbM7LP267HJ/URVLScUb
hOpbWDos9S1o8ieWArwMuvf3s6Qko/zKD/v7auTmbmF+LolbqN/sE+PSdqX9
9e3SXNog7f50QJlL3CxdHnY2l2zXcdZELeLS+2ezV4vrcSluQV/CGn0uPbNL
5ktayqXCXXUfObpceue3dPivNpdOLE5qb9PiUnx136qaWVzSi96R9h7Xk7L0
KHNjuZS66bl14AQudUx1P8gPXH8u2bOwu4mlQKY2V7iMpZprH4/uz2bpuE63
gQLw9Hmv/d/G4yzdVWm1EwlgqWJ1Qe5vPP/F7CsuJx1Z2iyR5rByFUt8Rofu
LcY+8ZZOehisyVIx3+If04GzcquzaQrDkld4yqYTwiz5b37otJqfpaFDqkmr
eMBz7ykuSX+A22XHYYlfDLnrJmU1jzI0q3rSh4N4ffnLgNRFE1ja7pOUHYjP
Z4523nCTZilu+8y62JnQh5SJvZn43oolfFO2AZ9szp0hQ9zfoELj6kzct3WI
WKoMnscmWHbDT8zt6WaV0gffWeo+N29LOPY9V+/b2DoNLu1Mbr98fzmXzm4/
7+lgz6Uzp5X+xLhzKdLZWjfej0sjD67PTg7nUhlna8DVOC4FK/MYP0vg0pOc
D9l30ri0ecqiNXSVS24T/rouT+eSj03CYZVkLlkJ3v3vTAyX8q9E+lYFculu
lZYwu5NLnJeB4WnWXCqpPZJ6GngmzJ277Ajuw85PceMHzAH3SMjnSEHgOXX8
weUhlj6Vi9bmdrIkmvB3hTeeg34Zas7GvGlvEhA9mgpdFkutlogEz+If5N/f
w9ITxbN8DXbQ7cPNuarQi1r5J1+2zobeOt4QOi7H0pWmxzUhYiyNu/7Jn8jH
UrNd4/V12P9RSzmXNwMM7UtPnPERPvl2vlfRJqyntxdZOvQzFKdSpZI5Aj/e
F+fYDVw0Rbutq4Cv+I5PtelzWEr9SmecoNvGBx7w+gexZK9kl9WbC76nfBie
8pqlvNawPd7QlSorwZ8HxbEv5cYuBZjP68FFjc/ncynTtuPNCPZjzoyRDQJm
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
aTxD0X7D8/zT/v3doVvIBfBj2MW+cQB8kYvr/TsZfmdd80UwBv7XeLb2YvE7
6OB66ytxyEVd8f5JGoMMdT5Qe8MP/DfMTBEUgZ63dj190gyeDxRuir4Hvmp4
eozWYJ2te1HRBKtyh2pJMd7ffNyr/RPOr/tVN6b+lyEhzxdh3ei1lcEX+z2Q
F3I+2y6ph/+uXKxTtP0VeqrI0F4N3E/B2JFAS8zhzfe5Xy9m4j5z9of8Bt45
0TKcL3iuWZpV/Vb+mMf3Pm8iwd+1xh58RzcztD5i2p4a5K5i9mmzPHjr1f8t
IhVzP+dKcMxG5Jwdi827c8DbC93p2y3/QpdN+x/wQq8/L9l88+x7Du25fdj7
QROHem5ckDes5lCsw7v7NuBvQsxXa8Pb/3pTsNg//vZJO7y/ls4hV//7DcLg
p0zbohWxF4Dz3tOBe88C3yuxn6LjOHRhfQYpAeeNy+9KtmDNCb77Y9cZ5DX+
gtDh8xyKdNyTHoPP64/cvqgPXucuq5o2F3PQXiew6RN43dXX0F2H+/gbvm7m
bviJVOp/t1Vxvy+Hhl+2wm+SPj0Uk0OOHMrfEu2LvvA3eXuJL3qhZUiO0Qv0
syuOBXtNQ/G8sx8vegZ+2634763KLeAtlx7liX2uS52u0dmMvGbCrqnqhp+H
pkVuQS/bpWm9sB44ljZaqJWKoB9fL36zD77NpDq3ycuydME/QLQUOfreviOX
msHf1Ac6E2s4LKkssfK4O4mlrI9nj+zEvFgruzw/Dj8WqMk/fqkeets2ry/6
39/RJmfVE/JDvpWWqQvypZdicuCZQIZ8yj/1fgKek3s1g4e3IE8uXW99fB16
ke4Ox7vII7a3Uk99RJ6+Wp96Mwo+7PSkbCBDA/dbXtpYh334odK26Ct66+/2
59O90I9uWJ7S3YXek7Zh3PMW9o8z4lV+HvtZ2fnn63zw+HTN0HYp+LGd2qW1
DPD7tvXg2OBxDpls2W68+wjw0Zoj0+WNXJbVlV6yj0Mh6Z7LqvZy6Llgl7re
QbxuPedKhj/y+pw7tsbg+Zo6x8RO4NvuIBlSlQEdPvU8KaiEQ2dntDW5NUMf
5nckKCDX/1gQxacInx7LtbsUivsebev7GgZdCs31iBbRwz7sO1f+wYihxW/X
+XGBZ8YZrt9e9Ar7t1PyTIErr+Y7scWY/x2qShF70CdXXx6tWI5+KZFuemYb
+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
4Pelp1pOx4KXOQpH6iehT0uD7jefwHf9XVy8DcjZSSE3njc48l3it72A24ly
TykD94uaOOp6BjpONF32/RT8pWjP2++h8Gs/68DoPHf4zWzhThlbBhlOWXXr
qiHmrBpV+lMNe1UjzTcC/TYUd/taMd9P5XMtg9mPlcznKvgxV3ctp6+meL6j
oqEy16Fj/1UKu/qg4+b7rrUJ8O2ay2ubJTtpomyv3meL+Y79fSv/BjkssYYv
ZjAbvXdgZscCcFiuwJvPvtE08ZN0NFZAfiqUmD6xRb8qyuVvaEQOl+bUjP2D
f59bNCa8z4YmJsX8qa3Q8ads50s+hpj/VMyW3bo0ebJ2zadVWjS4UDspHbpO
uKSv7gQ/PyQ9emML/HzbCfU3TSo0mcjcGrEZtw+sX9/vrIFcV7v8ZQH8na13
yTIO5EPsMs6Nc9Bv54hZuha4QLxf6q0G5m+2tPVNJvp3FQs1LQD95g8emYh8
B+5rHDZn9sjsufRKRfRKBZPd5W/BpYbnV+/1XI0+ahftaAA97NL6KD+OXA/Y
7Fc+rcwgNqMXxiv0wWk/V/qmIC+5b+8veIVebsPr9vo39sC4xDTWAn4r3uGm
uhH+u+SFr6AD8vbLlrCSceTCbru5W7bQ6dDP6+te4muzV22LosFZw0oeXCPX
sWdtfofN/ZC3bbmJTc74/vOcR5nQbazvQmdXzJdH74LFeuhVzVtY6OtGcIfQ
sFgW+kVlJmtjCvJLqifI9v4kTXYt3X/6IHw5nlrl1tpFk/0iIz7XMU8ZJ8my
u+AaFfnSuF2pNGnfwr+EBT58M1wlaSOu21UJxYIe9OMucZ/yddCTjobFPznM
S2pW7PBndZoIB0e+u3QA/h22VGh0N01CQ5Snv0GXQmx6Ay+hWy05H+cxBvgs
yzzw2Eo8nreWmM8SmhyVXfRJZSHyuuvoGQ4W5t9HLi0UxLHaetJPhxVc/yVS
JX857seIOLd3NTjhpt3unm3wizgTu2T4/If9Apsi4B/86qybNp/Dft3mGUxG
D2gfa0+WzKHJ3XGWBTL1NOE4cl7hLvK829Pbz2wM/b9KsVcK3D4xGXvlNoW8
ff670BzXLebShnYf5ut7ylMPzuxjkMtvVw9Og19HDUePMHQZROij7Udj5nWP
kJRbD51Zah3yr4ePZ2dFp63yhJ4uX7DQ92GQxeJxo44X0G+c3jcagfPM7l4L
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
v+9B64kLMsjA5lNL3oIfwvwfyNmBw4Mee/EN4evM4ec7tfB9FbWSr3vAGz0R
4oufYC+6H5oMzWNf5DeXmrIgXx5mnahjWcUguR8v7mRZxiAB232NZpE/+af/
nuBATvi/bfr/5yjPLE9WYR3FdagNeJL5iSZFn+V91ZivjwZ93CcLXymionIb
85EDbAGF9+FfHHp/0tiQF3S2eEGvH/bF3cDrJDPny9cqLTtBE13jOY4JXEdX
wcmIEuzHZjXhC5bwzUGzzq2zIvDFBa84DdC/HmYeKI8Dh+WLU/3LoK9RobP7
RcHtfjwi1Ulj4LSDHbvakRuOOqISIX3QZVnnPw/w3B3tnTdft1Pk2UyYhiF4
7xfXzjtPmijycSjWbRrH0ys0nUXAf799/L/ydMAv0huE9Hso4iVxPfctuDFN
OG9NCx7/5Jlpm9tzFFFhnJDkYcd57W2PToa++ZNn7qmiF/IxBDLOwfdmfx8s
NDKDTsXtkk+60eTOn03JpsjJlSR11SX0mggVVm3m/1M2qWalvOklTb6Y+K/k
g+4C/nJZBqIfe6cpeP7CdeZt3bv6OiuDuL+yNfqCvG6O6X1iCy67ufbe3Met
mPvrishv4Lb9Q/UP28Bx0slX/J/JM0hv0n4hC2UGUay1iN6N4wevrw/VcPuH
5PS/BuhrJY9MY96DB5ruGUb9xB7c8rZfl4V5dwYtvGTzC+d746Kp2Gf4zpaG
jo4W8JX4OwUKc1V86vZvRRH0+2/1FIWe1rnfrmkD5lv/rJ9cjALficSy1oXQ
hNtXJjkV/cfEl6dZwBW5Eqd/2hY8Z5xceekAeOBz+qeSg9o06V7WJCmBvmZw
IvfWSfhj9YWybGfoq1Vj5ukufvSEbJ1j1avgDx6e7QLo7X5zDPH18IEVtedi
B+EDsoH/de9+Q5GXiwUtxCopYlWe03gsnyI7DntNGUPni9PW3mhLhG+bcZ8d
joOPOGdm5OE4UbnUag63W6dZSvtl4OdZg2NOF1Ik2IJbVAkcKPvV5+BSzL82
utSDdRL3MxU9MQI+uXfTVPc39tCLiO25upf5viz+6nJwTXuo33nNY5j/neLM
I8jDm7L+OYMXoJN9jXZ1yHM9v49zQvE0WXJXbEAAPhoQs6e5DHndHLxMThnX
NzNxS6TuR9x/YfEubcyfZdrfa3wMv0e3b6ode2B4yFj86wxNSuWVs5PgB5sk
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
4/ZOb+s+jrqV1T296AUeiGpy78d229cv5gUnKZK/f+TOdehDvOeFnDzMfVXu
waxe6LwNX/cfTfChQUh/oHw/RdYFaOjGo641NmYTjPe9bZncjljMueMDzQMc
+JwxA3OvZ+Dr8t5ZfSzQw6pdWqxXMNehf32FE6GXq7ZsP5MCP6cNL9G+gPUs
2ChfNoTcf/Zwx4n/4K9HXVN+/Wb8bu5SN60JPV+SZqW2/DMeF7fb7i/m8/Yr
ky95v5EDwueU01Dvsk+3/C6xI89Xm4df5uIjUubNSyW5UfesazV5qG+8V7Up
J/hfUaQ9JQzzfsnHmsMFvqDOlHBJD7qh2ZxqOIt++rJG4xM76t01IGqf2sb4
XY39vt4TOuHyknuzvRz6rrQssB7v+9VuiTrG/lxjL0YMacjnwYnOB8ZQf8WP
j2XLoWPsGwRdNgXQCT38ZdIEeH68aCYtwwnrFFwrdN4GXGAR33wTfnenTnPE
E3P+vGRoaxr0stM8420TfNErKu+/CFY6MazOiJn8SRENa9GwpZinbRM/DnOC
309Ln1ocb6fIvcq/87bog4KNZlPrKxjH4ZjdsYU+s535YGAKH2CaLIqVxZz/
/NvqYIK5NdG5WV6LOZ9zfJSujrxXZMoeVI/t29vf7S9C3+9unJzKvcX4vm/O
WfgeRV6dtMvmg34s259voIect7TcS7UXfKld1fDsBPpyYG1Ba88Sxnm37Kbb
4Vf+YU0ydhvpxOxbaTDjeDVF8X3sA+C9nRbvGx65govfxQuNgXvXnmp443IV
n+/b7sRdmCPhw/e1ZsF1B1Y//tvTBP/81fShFn7b7HtkTnkY/NW01vYW+C08
cfK8MvIXd8yHns2oe4ySb5MvJx+pD8vq3kDxkQLP0m2+y5HXYmXW2oLbV9bo
vk7g4yPR59Or9Xn4SM2xxJgJ/N/KjBPHVMDxERmXpWPhHx4/p3/0vaSTjeNJ
N/jQhybF7Y9m74Ljbjnv+ZDO2L9aROMHeHSIU+yZLXL6YsClxdv4HPHll3oL
fejE8uWVwy1u4JPvZIJnL963oEhBIXS8V2Pz1kDo3Nk/d65VbYBPsJdVViOf
hd/yFViySJH1ZbaRcuC0HI7xR4JDFFF/Zf7MB/PNEXpXRgW8vd1lf9gh6Ouf
SQ77euhtcczuwBOoU2QWTeLYVYp83Gq4zTKKIi0bw+I8wlHnMab9rKEUCZ7V
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
n7oLb9RnBglW9CpyRN0XVKgv3sxLkddvhL8fRH235+cs2YfPH6vWvHQNdF5m
j/LdkSD6vjcPCviQT48WhB/cDx18ZZOdqoNc825OpyUQulnuefzS8SaKqOdm
vYmFz+/w4roojXnie+rLYzBGX8/9fCc//H7vtao3fmxMosTmwk2fr+sQc+fb
Ouj/qafx0rIrMNf6syzzyFdPm0l1vBCT3PUeTJPCY9ftlH4RdKPxmkvnNiZ9
/ypL3S74+MsCBm8bfORTbLaTOfxcV+h9PP1/uGpZvrzcYYpoW7EP52Gem3xf
pqXRedXAuZWtEfq8znV77FvM+0GxxRYV8KVcndtSTymSsyP54t4s8EBW+bIp
6Dt/e00X4ypF5uP0az9CD9fu7lijiX5fdODpoIgNeDxv9FUCeG6MY1BsMXJ4
ifM3i1/IV9yFpatjFTBHzy3NWNagXz6s0tdfDk5qe6oTBv2NruEWOf2LQcSc
/ntX0McgXmUJ+51bGMS9QTNjBervHHZX1raCQdZteB/KUcggww0qnEO50PG1
6pFB98B3t290lqUxyKoJOe7A2wxiXHZTiz8Ffs51JGkztjNq37aapjJIs0SI
SEsGfq5w9eQD9NGltZFLr6GvLt+NK91J+8QlDWP6uNKI8q1VouhD7S38dkk0
NxTv/Gq1jCL1TgFyLeDClshJiRXgkupbz34UGYH73B+VU+j3TG6ZBhFvPJ6f
OrMB8+9QW7PS+zbWZ2eUfTXm5rJK5w4J6GbQiaPuai0U+dQ+ubG3H/w3Jcmx
4hfWNypm62X0g5Yxs2wW9Tz8NmiXF/KURMdbpgp4IGfDiib3ldDvoTBbgvm9
7brn4QIxzLHLIsUW8JzfA4/9J9E/D8nuYyv+Y5I/Jbu16fsm7NkT0fulF/qc
p3bGCP7UZfgv5i3m+dXnau6P4JSVBrIhySnQ203f70xFQa9WKu1xCUOdHdg3
JJ+DbmVdV9qLuV563PmOIn09ANfv8fegdx6D8V8NDChSdvuUwzzW4/enAfsw
5K910lPyJaivnuSV6B7Ud29v9Ob70GW5ZT6RXwYYxK9jbN4Kc8eit7tSCfU1
CNAbkEIdjvYYftB/yCDMT59nRO4wyEOJ+NxRzHP6ecNt0hEMorxrX7T5BQbx
PLJmO68f+L4rkv/tGQbJSrbUjcN2GVdd+4mzDPLHLlvhcyCDzOU27sm/zCDf
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
601NJKSmgS/bHzUYPJhB/2ip5lv8g58qJZWawUeUHLvKmPc5sWu0cE7G868F
L6/mhl6vD3it92iE+f7vYTrQm6Syjvvv0W8cq47wh5aj/xZ0n1GGb5Gln+9t
g4/NJjJuPkE997NO7hIKQR8udxo6Bh7W2cu3TNmReVyItdMp+LcZ496dt/Dv
ZlEz97+bwV/V4wkt0OMAn7niedTxs0xIkyQHtn+cZ1/OJPLVEXFGEOb44Vtb
Ogl8Ph9t1G6P/Xu/drP23gcUyakUc6vPpohwp1HHYtTjyFFtX5MEipw8aX6w
KRLvDx+/TgdTpKb+22CGL0Ui+T9ZJXpSJCwzaLWYC0X8HIe/cx2hyGmajYXP
niK6nVv+rcfyWdET8d2OFLlw6UX7/mMUSbqVfyvsNL53OZv0y3iKRGidlGqF
blxkteahH4MHP5x8exb1dl1nKcG83khAQue5rfCT76zZbgS589+3sqiX4IM9
7BozJsz73Vx/fzETdfY6zG3UDf3v3Juz65MLfN//2Ylj4Npw6csF3+EDd15d
HrFJQQ46Z6rOvN6+XtI9m9WYp1CFFz0+mK+tB2XffMa8nTO5mSkGf0jt6oyv
aKWJTcNm+3rowuIzvkWZ4DD9IzlJrX00+ZnpMVqOPOZYFX+0Dnpxgyfl71s8
nq8ly6yY9/+T1jcKxesYMz5vRVD3nLqDK8Lh0y5/CnjtoefrFJc+0weXNjtY
S67E96iJmVG3kWvaktddz8T8X+xadLmphibvRsMmvODnixf+dA95SJNTNcXf
SpCHjin8/mR/BfwjeShOBf2yY7Vi5Z8A6MKJ3IkkcHwp9zZOJ+yPrKGb4ZMG
NPm1SGgNK/ZX34hoah50dKVSnI0Dct6151s2zGN+DrdL/zsH/Rd1+8bKj/w9
Iji45ypy2vns+NoA9M/GsQu2v5HbMxwH2y98QJ77s+rxR/RRtBX/gfsN0IOm
Hr5XTyjypo9maSunSPP1tMWRmP//egYWRRRSJMqaTdQZPnHQ9E3vgwLkR362
13N4fMVfUOQZ5r38dYCoTime56g8qVtLkVpjyy0v4Qfj/21nMwNf3rJ3Ed3B
PD6A/0pWFvKD4dwir7NYz1TPMe8i5BC9y/dmSrBdcqwc9fbwB5/K6C8roX8j
XB1eGr7g3WurKFXsp7Asi7L14KFPgX8MTJnHUW3KOhtQCz441XicD/OucKt3
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
ub4MhA5eebviiChyflfqL6t38EVDd6sMcxzX//r0csf4mMRy4nV0KHhr+8Zn
3ZmYqz+u/dmm9HqlVw2id8B3vXl6Z26gLzJXXdpRixx3I/P5ydXgQ1bWc76m
8O09Mw6s9P1KxZ5cMWbFVuN1CCMKP19mphkWjNyY6XeOYkM/qV9+UycDzphS
9wni3MQk3603rtBE3jDfeovvDPy8K2vpIgf4+dil8fwy1L89+4u0Pi/4wyzW
6Qvm++ZmeSF6XWWTcxr3/JFnNP71lRmM43Nm6tbpoL/bl0aXpMPvN/67yBsN
Dhq4cte3uQk6nscp+PgVRaSZah92VFJkl+q4OMHxEevrjSmHLyQ0Jl7xTYKO
XuIroe/3bzw85deP+dfYxFblAb7mMKo0eQzebvt8yiQOvn/lT63PT/jzMqVD
wibQbZfqWKY45rnweG6sJfJcy5vsDdvp61zWHnunOEjXdy9rGupr8TSiSwv1
v7W6xDGuhUHWVVh/rGlmEJ6xlTfq3jHI04ERziRs5ZK0OOvxc6pFZGAB+LHy
5tTwYAcDemOxhhec6dnvc9P4N/09Z25i3wL0546GS0PQm3tODmsugzdOaXM+
10OONA06JGWpjvyvHftadzdFvJNaigTt0Qf1U8kjpyjyiH2mIwF++O5WzC4t
6KHK0y6TNORsuen+Z0c/UySmeeT7s1HkqpOBUyfQLzVS3119mUxyaOdvSzvo
xsPXet3t0I1mr7VuK8ENbKdMJ1eg3hkT9wrloOvC7Sn+Dw8wya4wu6+98JX0
iu7lz6ADcsN2THE3Jtn3436aAB6/96/eXgVfGPs6qBwEXziyuC6IFzww3KC6
qpZeH+nFuUMW6BPNCxnCcfCz1WU9q6+BX1JSFZNLwQMNBVLdf8co8jDqusCf
7/R9LtzOt0MfvgaJtQd+oNdtzW7UhT4UXCRLP1VQ5HS+totqAfT9/rybLHLB
w4T2Cnnowb1j2dvy3SnSoHVuxAR6b9k8ucnUCD/XSMnu0AQ/rDy36JEi8ndj
fsAe6P1eA6V7yuA3tfAXhgLIBcv4X3yowvz/KY5vq0W+r9qx+d/mHgYR/Hau
qhnz/jzcb7Ux6vp1q2LRZCODXCuUCbuGrXCTZbsQ6i67Nr7SD33hxdjwewh9
MnVRZIEGvX52qlP8jR8McOjjsxXIHQ+2mx/UQL8tsaUKx8Cb6g0L9BUMKNKR
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
3GqHGNjswecPOE122KtAHyXq7srQU/iu1Xk5YjR5YFXfMM5JkyH1S8FfMP9x
KbGTWehzodEa+unYb44s30ymn+u618SdQm97rXpkUPo+uP3S4fXfsOd+LiIf
7MHLbsb9StHIyZzOx59zLzPfL/Dh7vdzFNnQwHLg4AmKTK61zJUG39mVyWrI
w+enXTMtIwn8+f5afnX0sFD+wuif0tjzqCdzN8BzzsrdpmXw9YLBI6dWYf9V
+id+pmL/n3arlwoOMEjpjPlSFex/VtXjgmOYf/7Moz/J1QzyYlX8UArm/d9Y
7nq5XAa59WjFeYN0Bhlsy1H9+ohBDu0fAyAwiJ5cU0pJCoO4zM8Yyj9hkL9+
G2KLCxjE702WdXw5g0jaLDVY3swgyn9Nn72CDozfjDV/nGEQz4Gkpljkz3V/
xwOZ4NGnB0dPv9mOvdi1Zl0tfK3373EtDjzf02eslR9dQI+UWa/fGUkRzz7P
3T3gYcfz/00egV9k5HPrl2FP1hU1l999Bd2kLyqTwfE+bvRP4O5b6Enxo2A1
+oY6iTe/gD30s/nM6gpdfNzo29I4hX5bcvtGLPqHpvOnkirwBrVvs7gM+LyG
X6RnIXTzrV84eCN8/Lh0R94c+tt6q+y2I2MUoSh6pHiAIvlRyq6p2GvBReY2
8+jtmQu2Kp6sowjP3mOp5+Fj65NqnnuB61LY6j+UPKbIGzMnHed7zNcJL/zM
fN/YrsK2fS3Y57whhdoVeH6P/+fovOOp+v84HkUq49xbSlmFisY3szR9hJDI
LKOsyEiRvbJ3yCwqCtmytSgjISKUEi1aiEoIRf1e5/fXeVzccc77/X69nq/r
nPM5kfLXBv4uvuds+yi4T1M92msF+n+48gxz6gz47Zl3fh34L25qlWb+EfDz
Y45P7w6inxL35zYjf+/a91nwF/y20tlM9spaBuFk3R/JD17fTvUuevObIrzu
T1+8/QIdZyqNXX9BEYWJX2OLmylS254s8h5z7bJr/32TEoqMn32g+Rt1TRMq
dtmVRZHVnApXbK5TxCngdv+CaxRp0FwfGZqOvxNU+L4fj/v3Z2nrZ1JESFN3
UUQefOCgbP+mMrzPrObrSPSR1K97ij/RV2pWJ9j90Gdr3hZeT0bfnRPdtnod
/OKe8gnxddMUSY2YefwBfbpyq4zAM/Rtzc7L7C6rGSR8/OCjrRLwi4ZbB06B
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
vy5dCh9L8hRMtV3AIHrl0/vV0Q8rtum0fBXAHPQ0PFoE/8uivgkfhN7VqUoX
i8EfI8ofD/FagHvNI3xGXTFvveERBeCBWN4/PvLIDWv8V2pcgg+UbPK7kgz9
D1r47eDQG+htcJs1vf7CioZP4vXgvuvrnNT8UF+OHV1aJcgLQ7ot7D3IC+xu
azmdJJnkzcGBVYd30Oe31E5tQD64yLrPRGU/k1yVfuR+/ADmP33Tih41JjmW
9rKeoc4kNv82KBTh5zEsex4dUWSSvUlqjnl4vqNLX/9dCSa5Unqfo5ePSTqk
xnQ60WdnYovviqD/9j7r8lrzEdzuMNBwBTxbei9sRKwRfcErcbfyFvJi84yN
JfhibU054w24WFT976e14Mlb3OKex+En3RdEZSXOQT+C1pfxg6cD0/UqV+P4
qC9IX3Jdl0HifR2dDyCXD8x/DXwAveAbf82ltwlzNHvnSCDqLNi75Nty+AZv
n1f8OvDFupL47W7gSIMGqil3DHrsWMPvgDraXDVsPIa8p/zJy6a5kyIiH74z
EjsoYvHG8JsR+F+uTZmvEr/3jB5fegrcZxFX8/ov8sADGw6rCbwO9x7/Pus/
0Jcv3jIc6KeLXrnSXNArqeMmmtP09TZpvWd9MP+WE5bvv6DO42lJixXggwrm
vR5P6e+N1IoXyyEn7BbnvXEUOTH2jqZ/RCr6M7zhnkwufOCqS2JsFYMU5hau
C3wILnig8rUPeZGy0pjbgfobO0gN2Q5DH3awudLrPHuJ8HaHIge8SfrHPYl5
N5PgeHqUl0mW1arZLkA/pHYyHGrWMon0hzUTG8WYJFHuZ4LyBiZpf57FTMRW
M63f0Wc9fT6kT4UGfGG4hLcjHX+f3VYpLiHEJAe3NnF0rmESnq/330+vQN19
jxy7jvcJbYmMKFvIJCMbv/Ew/6COHDvCYsClpUtf3T6Dz7e3L7BMBjqlpdGT
MYl+oHj9F8yDN8NNXC6sqobvOevNuRdDx9QWsHyBDhiUixb/BWecfnXww2Ic
F/tOCemT4KWL2jVXSjEfy1bw1/w9Cf1U+JZ/BTwRvsL0lQPyhOBH2cIjmKuS
hmZfQ3CEhG9ahpMo9GKvQF8wcuV/k03ctD7f3HWqwZINHGunk2M2TxGOFaNb
9X5RxFhdTG3JD4qcFlhwswPzr5dxcdED5I41nv13l2I7nzw5XzmEfJiYZHgE
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
D+P333w3vcKc11cX7u+AvrtLn7fdAX1XWfzr9UPkxa2eD8tjMaemp06O5N3B
/X5t71MtgZ5/MGgIRE7M3G8uu/8Zg3wuzxVMp9e39uPZceo9dCC4QFSxF/Pb
9l6FXv/pd2bC1fTP8HeL/+KmRxnkyxmLxuAx+PuJ3//u4Xb7vtbH6/H7hzLT
LKID4EOWyU28PdD19HczW94yiKTY8Z3hzQwS98VsUPkl/MYpzfkXnvcJX7HK
RB04Zz3H71Pox199DcNeT6AzPeLXziDPLuqpW0mhX4MffzrRDl/af1fwzjTy
a8zfwJCaZOTo3vn0l9AzjtbSl1fRVztI5Xtdd/hiVZVMnCODrM8+KjFmxCB6
0efWTUE3PzLtiQxQgg6JhX5rB4ecPf/6XQ505F5O14tMcLm2wt+Pjn/hz/7L
1D5CR8y2STIFoY9cBALV1oNTvZW+sYk1UeRK/1qmRui3ifm1AN/HyCNskm9H
4UvqXvaRgsgtEVFDWfnItyPrRPvpz2M4st06W4f5PlxYme/9iCJZtdr6iyqg
E9NPNgxWU6T18Vx3GPwtUlsszBrPc+JV2EVW9EWCTVJXNfxQen+Bog36W/zk
y+5QzP+S1QEaj4QY5NmjiIcs4ET7HQwXSeT0S2K1n/9AB149Gq+ppvdXW/LK
8Sn0N3LrLXFj6MA1yw17jqIPbjbNhr0vx3Xt4Pls85zeh+rU63DM/9kn10+Z
DoMLNu1lWj/NINLfZtrk2flJ5W2x09nL+Entz4anAZL8hPEjetsTOX5SXjBZ
+kkBR82cnEDcnv+5rK5sNT8xLY8SqVrJT9xW20tL8fKTtowTtyvmkU8clLPG
oCM7pdp5k+h9j6YNNtej7/gsDLLNaul9tQw9o0rBL08jK6bAHb17P3I+gh/N
sWw7tzINHPM9QrglhkFusPzmc4OfcbfWKVl5MYjldUF7ep+ju5+Mx9iRT7sK
oksO0uuLbUj/bwH8MX1+7D8bGXqdxrP5lcvAw89f37JgRf9q93hcpr8Htrgp
2o5+ny9Wrc2hFfMa9yfPAfX1uOXqHQm9OMy75lZzIUVubvlzVvImeMFY+7Fo
GnJMTbGODHhTKo/zP80YiqwRV9tkBF2X/PPP6BHmvaFiuaMh/MSJvGhKS4E+
CF6MTwanVuxcz96Dx/s1NvjmGvrg0wF/4X/g28OnIRefKJJzY63YdfRhXzqf
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
6rei4Isgp+tPh0/BjxzTyabvY5144LfeEzgZf77hVyl07oKNwBsV/P58+b+Q
COBXa/ujk1HAy+evc83bPgF3rAnNa5BPzh1ZWHQJvlp5epP0fhyn+me5HA05
5NYXi9JtwauFyz7Ee0On/4rnfeCFv7jsvEzqtTP8K6eer78P/Fph3Rl++Ps0
y0vCu5BX8uOn45eA353V7x1yQv69v1PznQ/wsf7+89JNqF/wpzT2CODCaEC8
3g5+0eRNYIwwcMGvzR6+DVt/HZav65+D9xM8ZH6h7i8NHhftA56GbXy/7Ieu
bPukaCuYSa9X9K6GDz6Gn9Xl9RB9Xf/A+XNpIfR1mk4x5uAxtiGO4Xbg+oHc
Rg7rzfCdAS2O9P1J77pOX9JWga/gX26dgjypGFDSdUAUenFJUysYvPDh5Qr/
R+ijFP9ryb7wk1G7iGwTfd4qND2cDXxQs3B9Mz2/6ZzWEZWWe9CJZltvlZuo
a7LZcADquZpDZesYdGCficTrIPhGJ6FiwU+uFGG9OVXoZg9+l5apoc93T97W
jlxgQZEhgX0szfAVg/2yG1ZtoIik/GN1/XXwIfZlx5ThLwalCq4N6FBkWt9n
SYYeRZb3/9uagPdVvu3meWpOkb6qKzXL6Xn9JZm6R+FbruY3OZpCV/y4Xg3d
Aa44Fi/ueQp/4RZ4d++3IopwlQ01RSOv/Lo9vcYXehcgvLb/3ThFCj4xRBbg
uP11Ol9ug6/epi3qMwf/1fbpYIkL8ODHssIiDLqRwXnt4j1djP/Qz4vi0N+o
J2c3rAKPvLJ6L38LPq/0RJovE/zBydNrH0+vW9ZQKjQC/pjV8przjgN+mssm
I4CP+r6Hn8JQP+XGu0GLkGvar9u/YUEumG//byN/IvhrIM1nAXIkr4bHh3n0
bY3eytIC5KLSpLEXH4G3bZtybknCxzyQP6KSj1zZuG59wTs/9OvGe1IG9P2o
i5/27wI+j2r39d7yZpCdP27l0fPeDJ/leiaI/FnWPadKz2sxv7hiqTNwfW2b
6OuXwPm+0ZyPstrwNWkP/3KvRL8L7jU8Bz7l3Xr8VM8cRYQTLx+48pkifxP4
DbjRT1fvjlx8jv6ytk2LUoF/K2ua6K5BLnyldO/u2iyK3Fqr3cmOvHi/em9V
dAJFiIf6FSf0938pRaN+0IXd7UtXLkRe0N3ZnnVqH3xhXcoYqy1yR2tdhOVW
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
X4aRM1U1L7OH8bhMX6T6/kU+eJdy8X1wAm+0XMtZ+48gBTkDnJzBM+8emUxP
Iic6xs315uF3z2S1w8rhf0pf9pu2IR/4l5XfV2AvDE9vk/46TSEPSNSKvkHf
a9f9L3sZueB9KjD3AvrUOlbL/e0v4MuNUVEhyPvdv+k326VQSIWQW0IVkehf
ddZMN7Annk/96aWRv+9GiZgx5H3/m+AkU/TzgTv/pVVjXzZbJu1mwb68Uiie
Pa5J/b0/z/cpghOTlYP/HoI+K551msH3nfvFvZywN7JHzodtPwquzNk6Kgud
b+j6c0IQnKDPymvJgz30zjsbvgXcP9BRU3sRffPfea5vJ8GDqvTTjnLgfnXf
/R0BZRTy5Zh0rVML9H6CvHZ8BFziTR5OoEUfOnghegE6Mc5sLz0KDnp67cQc
M3T17cgTP1X0/cCKvS2d2IdjprvFTaDDGIfUqstBBPmr79++EnDf0l/Tl10Z
BPkovL8/oxj62y6SpvcK10npPE/oOqgjUeQG+vvIv7+N32rBBxvDhsYrMaen
C70u4D3l6O2Vs/j9+lBdpUnkPmfTHsU31PnnvF9Hg14fTgz3q8PfeQvOFwmD
SzMuHDx55iT1vBPN4tTXCclO1iS9xlxdNPJs3opS/2/zoM8BfG8fezcwErr/
yPWxwB/Pc2NuZ9pt6CPXQoP7wwD0E8K669UHChlibbyfGTraduIva3QWfLiW
cyP1POmJJ1yi55H7Uy5LDjJXqecjiis5g+M91WboYwpfn5VeZDiF3M+8zC+r
j3xeIt8Vu2Fel0yPyLIj50vi/vZ3UF8veUXM9D0/hXTy9y2gfi6y+/Ud8TG4
zGvb87FNgEJe+/4tJgMckN3MRr8MH3j886VsAObM9+boi9cX0Rc2iaslYL57
fLkO7oqhkHPbiM2f4ONtfNufaDVR/ZtHj0DOK7x/IUKZgR9sGpgopKF+/ocR
EY9eczzyVfs39J/SDLHxTei3Dc8OF/jBB66P2Kq3QhfbW6q49E/Az0V+H1mD
r5p4//2PxwK+WdRZV+qIvYj9edfKHf05t0CqG/P4nLKN5wJ0WTbPtS83nCB9
jPPDTNH7zPJotxgjxwtcBjTTwAElkoz3X1D/j8twVKYFvhBYmGnPi8sLxl72
/6D7wvLZKVXq6682ifsPwkeSWEqeJ4IXtS0L/P/AX4InNf+zCyVIAedciz7w
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
CuciK1GhrNcqFHIUIlmh7FVUdrJKRolERsqIiEJGQ0QaRsmWGcpMyIqWSEbv
9/z1fO517znnPr/fd93rPM9/yKsNpwKn24sI0lvjnk/hfYKUL+dd/JeKek3x
ZlD/375H5YxZA7Uvy/taHX+MS7Wt7iWJBGk/m8QufY8g/yZZdb/D+z+650S9
hs5unAw8HtFPkLOl0aOW6JPdz191bKW+P7bJtyAlaSS3g4B5K/qMz2BrOD3q
Rop+fVMBXxT09Hb9e+S1nGZ+2mP458WDm+7Rp+Nz9UjYtyMn0D//lRD6GMeJ
6QnreEoj25yqRs1e4Hhce1lOVdJItjMN/wrBbw5ODEoe6PvXnX/OuoP3Jnii
VJqAB532DN9O1OHSO4trkcD/Orn8bgH47gX9NerXUf/tAf9JS8HnLiUXfItH
rnr1t/RoLfT5gZZesQ/wWP3zrIYyHm+mnctJAu8/LiYZeuC7st7buAUBpz1f
H+u/B07prn990zVLI02l+nSeU3h84VI4BD8Q8/nTYAr46PdzNUPdWmp9YqGI
HODyv2DZvHPg4YWjMTpm+Lyb48Rb4+JpJHE31VEIONU4Hi5jir6+zdTQH3uO
Rh4kL34ohF4d6PIeUsb8Kf22SrVF/ujUs0peDf81O0kLfLmP+n1k/2oPWRp5
2kxwaY0IfNr6lU3nwNe3xja6OEBvNw/EKh4HnunyZw5FQl+n8lNexgBvLZ1W
QeHA4Y2ZUBFv1JHw6yj5Bl/2w+Gz6sNm6LEp24wm8lHEl0xLZdSbR01Iug9+
jY67Z3qukSB71+9N84J/3pciftENPtvUiVNxZBnHY3UyCt9EI+O41x/dies6
ZCKXHQt/sDHmpeMvF+TsdddvT4Qj155inpgFT+1mPvJfPXJT6cybDlnUcXzM
hpNnEj4yYslpeQl+051UtGNhR75fVFiAHvIf7E2Mg+7+eXQz4gbyTY5WzKp6
6K709UKzJuhu3FKyZYop9Lf21uJF6O/Kf2+HZE3wvk2HxYZ02Ml9X+qChFXY
SaEs2+dfRNnJ/vcFKz+Rf7rYXpQPo66PuXIH28Ef9Ey7mdXgn+1MU8PqilBf
rnnr1aibQdBR3nT4xVGenkrnQOr3ac27Acj1++szpZXs4YdahejuHYV/sL3P
GYQ67a2qNDqsCvx3TlybkaaRCqv721cEaaR5/DOTQPgVlRVWqxfAb9WD0tjA
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
v7atwu9exzpJz7X43fQe0q3aiN99/qRnFXo0qPdk/H2N37+Th3ojPa1oEJA3
LNlrTwPbhBulPvgd/i2iljHnQwOle8FKusdo4HGx0Scev9/FphUhv6Jo8KVp
xM7mPA2k77bSW3F/oRF0NCY7iwatKe9/meTQ4JXD3IVreTRw+HsdaT3AfYJ6
xIenj/D7qOxZVIL7ieCzny68wf3F6S/mH37j7wOSGTXleP+lPNDacV+hc0xc
LvAu7s+kbAgvcL8S89DojjTuK1pOaglkJdOA5P9in3o8DWr3qyV0R9DAP+Vv
DO9J3I8dk+BPwP1F91CIf/QR/O42bx1Tx34wlJdPUN1pUHjbxIHkTIPIIvJ9
T9xfaEl3SplaY/rkkyKtuE943cy5Fm6K+4K5M33bDGiQMjG3Tloby4npeCOG
4+eb+3FCSY0GG191Se5dg+2LFT/ot5oGQYkt6/1wvAeFzimOSdCgXHbXLUfc
B1R5y/46K06DAbeAfTX4+9FYgtmsFO4PZYwMV+M+Yq5tTsILy2M8fOreqEWD
qUNrav5h/TYUkXu6tjQg3HyjeBfbnap1x2n9URrIP/PT0gujgeajdS+z8TnE
LodskU3EfhnWRV++RIMJ5UNfLuFzeHakGB7focFwStkmJxzP0wWnXtvjvm3f
SNMhPtzHafixXotgTN6ucGsZx13P0kbSEu/LVF0hncXf2lYeeuRnNEhoQRGD
lTQQkohqFcN96vOL/G+Tcd9aJbF367MmGqx8mxZxAfez72O9j3dhzGl6mLGt
hQZ3im+kR7XSwJyranarnQaGQa8KPuH+t0WUP7HuC46HDOvgAqbLENTpJdTj
fip86w9yFQ3MpPpfHiulwVZ73WNtOI9WfhL+tgn7ZbrSrvUC7iMvmKroiZzA
/n53Drzoi9fzZxU5LjhOC/1r3PfT4HizSo/kHhp4PcoKT8Z9Yv4QNzYen6uJ
eo2IH+7/2q2G6n0wZvjESw7idX6dQwm7duH+et1zsY24z+Rc+eBW7YDzW8hz
0NCDBtszk6u9A3HfvvZ9shHOM/nB3u/quM/2mxzo98b5uZlxazDqBQ2eduzv
Of0ZxzdgwmX8Nw3qToSE5uM5wlqwLLGLjw7pK9X/2cvQYS+UxA3hOeX8g6Dq
9wZ02JJVKTKygw75AZU8NDs6rJH/yi5zocOrzjdnr/rQ4Vkgq9IlkA6Ol8+m
igfT4Sldra88hA5DjnWywyfp8O/5yMXOU3iO+rP2gfJpPF/18Md/CadD2/fx
xZ2RdBB3lQt9E4Xnup4wnvoYOjil+vWQ4+igQX8kJIHx50f7w06xdDj99EmR
Ed4PJ5bHro+mQ+96j8tJmM901tv7HcYC23M3v+D1g3uuD7lgeut77QtpmP9Y
hqby13g69JRSxt3xHMeTyi1pwN9n+zap7MborhheX4Lpl/vLjzpjfrtg4VV/
8ZwX9/Xs6bowOgSHTCy/wf6wXuw51BJEhw0HDwZtDKBDWfNcGvjSYVgiwTnf
gw51z+87TDnR4U2U68tkHKf1H7bHw246ZJLPtkZtp0P/xfnp70Z0ePucIbAX
z4Op6LrEni3Yrl87zPxxvCfCzV4aKuN5NK3+dK0cHXg/bdTuWEmH4/fvsxfF
6VBvZJnxVAj7yW2xT+Cng/2Wl/oi+Nw0Fr59sCXTwfVq1vVSEh2W1nzxTsdz
ZP9iISGdQAftQQe7Hcu4Po1w+1Yu0UCS+eGGHp4vby3M/Q6Zp0HH+rf82XjO
lFj68dEI442hychGjIN5Nr7CmE48hcsgYTk96wXWSGI9ytvy1uQL0EHfYfjJ
WRGMEx6RR8TosF86QXGrKB229lclluB5duRS19hhHhyfw1kH/bCezWId6Sfx
nPrg2r2VdXgeDS6J9knrwXnbE77zM76Hjv7Fc9L43l6w/6cW9p4G/8w8MsPx
vKlc0hglh/N3XxTVuBHX4SDeLKVBPAeC6N1HBFw3XDwThFLu0WDcO3vVE1xP
/JeniMF4bnQ29NHj4PvZOakuEo9xyFnw+c1b+N2ov0J8dBPXi46DD+Iwlgx2
0QbwvPq6rHvgMJ4Pm9NEyD+zcX07kjokgFEr5ni/Kq7vCo8iM69heuGrzoN/
8b3Kj/T77Iz1W4oLBxXjesRvZRzfU0YDRfWvd21e4bnKWiSJhOvRsRs3n37C
9SPsWcK1DOyn1qaFSu3O/8+rHuyCnzSI6NrlEjeA5+pJc3HmMA1mTaNZ/nh+
z7I/KNs1QYPbtUpniv7RYEeWkqLpNA12+hX3c6doMDnYYBCD5/3KGH/ae0xf
tF78ZjWe979qcLriB2nwtj/wxBKe899+y7lu9IsGo067Trb24fjlTXHl8TrN
5deB9D+4rm5RIL0bpYHFWyc/ESx/UeYiaXgO12mZyxRxfH4Sj4zjLuP8SxHN
b9aQp8NguqvWGM5X08DLmu56dCDWTtim4vw+tuuMxA9bOnCTi44P4voQeCdc
5LQ/Hdip28jX8P2nk7yP5uH7Z7JBpMr0Kh38Nqzc255Lh/mjB0ipT+nwjRT+
XOADHTJMVq140UaHcvctVZf68D1MrHGoH6eDgkz6q61zuB4c2G95gsyAnySx
3VErGGC+SnMHQ4EBcltq/B9oMGDS6+/pFn0GyPPf+NVszoAT7rIrxe0wfUIm
udmVAUOPt+sG+jNAIFV8SukUA046bBpixjNgXr29ZSydAWprTxZuyWWAXduL
HYefMGD/91r3K+8YwD5ilVPawoDCE3zFtb0MmN44bhk0wcD33X1CgoP5pf7r
vyDAhJ2kyQmuNBOmO48+pKxnwl6XhfN1ekw8NzP94syZMGcvVNVnw4RBUC+0
PMCEAMUBbRV3Jtgp+Z07443XVWsVBvyZcGDKl+wZxIRdMn1qs6FMKHm3PhGd
YcKDaLLIjygm0FY133WNY0KRl72AVwITwP6khON5Jszzb005msyEsxLf13Wn
MCHQpkswMI0JvOomRW+uMGHlh3Tj1qtMeOilZ9KZgfkUp914M5lwv+JygXcW
E3o+TOYpXmfCX0fVb6G3mcCJs9VgFTBhw2bzlrBSJqg/iEQHK5hwrFve52s1
ExTr95YPNTPh3vKeOrVuJsiuukXRGcRy6Hp9AlNM+Kyx8d3pWSZolAebSxFY
oO7dGzwsyIKNyvNbRiVZ4JxoFPVcgQWlfbpnpdaxQEpFi/e0Jgse71M3MDRk
wdLhcNoGYMGOLvOlFRYs6InbMK2K8Vf36LMtiAX2zelruEYseOPmuoaxlQXT
qvIeAxtZYFtd3e2mzIJtkTdK/GWx3tgzy7ckWFA5tHLqmjgLiBcmdsZhVMrv
pKmvYEGVTx1/Ot7nvr256TfG8z5J6XEY8xwdLHkxXcgXS+UCbPe+fWlSajws
cGFx1agLTLgcEp/2FfsX6agV9JnBBOVFv08mGFueqd68wmJCvT75TRWbCVFi
dm8uY3qfxbgDR7hM+HTA7e/veSZIz/Rsd8V0dLU9Gcb/mHA60dTg3G8mnKBc
Kud2MGHJgd3WW8uEN4rt11+XM2G3XtjbrPtMuLTaNJIfn9PeweHHlEtMOLRm
a7P1OSbIuTfHj8cwYULwzPvXsVhvZq38VCLOG8+0qnhMV+562V40mwmZnnPo
6l0mRL+Qd9hWiPPtmkhhXjETEtt7/i0+ZMJqS9V18iVMKHx88wUXr4frW3P5
HjAh78x+b0FMbylknXYM5wXtVAzj2j0mnC8s3DxyC5//mpFH2TivGg/kb9l+
Afu/LvGlwlkmtFb6uHkHM2H7ouSZXl8mVLqnONa6McHz06u30k5M0NpI+yK+
nwlpwzG2FrY4753mEiqsmBBxMUh7225sx396x1sxxgXnv0DWTNBBSo85GHmN
HbMzMdYEXPE7g+mvl2tOhGE6y8JF7Su7mPDhnoDJp51MsFe+yJHDmCSiH7TZ
kglTX+qMfXYw4dbc5zlljJfoH1yEMJZ+f7XvJd5XjZyMdMZyxDJ1Pn3A99VY
eUbRyYEJ/Cdzn9tiu+WVG2TFDjPBSMh6j+8JJuxjVHwejWRCX8PV0//hc5gz
v77nJL5/3W/nCvrx/ftWcUmmF2MVd8Nn3VQmsFtMvC7g+PgSBeeP4Pv7+8TE
6iJ8r5X1NCVEw/H5bNqmSPofBdcdj2UbhSMrsjOTyoqUFMnKIUJWSFYpyixF
NomWskKIBqmMQpQVoqxKZqIUaRCFxDue53l9JX2nv67f/dz73Nc55zrf5w39
nlbpVllzFOOKq2pxMsaFQWE9xiqMEzcv2D7qciHA3u/Azl+2BEzESegV43lV
DZcNHzckgEOkRsZcm4BlVg+HN6sTYCL342cLxqM1Gzb27luNfGBxHm4XQz5N
CGhf5yXAv0aEN2eBCQ802TI9f2LcbFzxw/EjE9wqDeb1e5hQkv4n9wvGQd0U
7WtBD5lwJmfZXfkiJvRJnCx5gvFyx6X6B/m5TNi+VFmTA9s0sz/RH/KZqJtl
FJxLmTCzg0wLq2ECQ0PZUKOVCfKeJ2of9zLBcdFsWm+YCdEPbhw4M8GELRam
XnvmmLBfQ8Z6lMJ43L59hzKe67O2Wu3TRSZ8fPRpkecvzj8XG9j/hwnjVwvL
Yn8zofX+qJ4xxmGBdfEO1TivYTIveYBkgujhbts8bD8U8NARx/4Gqx2TuTiv
XfFKYO9StJf7lLAhH9qn9mGeowgBHfc6U4WlCKhItQaDNQRM+ZTcDEW7BQx/
7rBVI6CvLW49uyYBjSW7wvduw3eICxmX1EE+NigxqhA3Zt5TIhG9L6ZkhyE2
Ny1IcSPGBz66MIL4YCjN67Ie8vnkzQwVfKeQjyMKQf94ubTzu78Njp8q7Vrp
jPu6f2r8jn5y3i4kaFsgAZKyRffvoT8r9WqJB2Ic71a4m7UP/feZZx/frTJc
/ypN0bCRgM1XLovwdhCwliOr99oAxocTDz8rfSQg73nZ2pXfEBe/65bPYXy+
J8JegfFnb21a9CVuErK4q71LV5DgbrVF9u5aEkRbPljt3kiCfA+HpADG4Z0C
XYdXYtz1tOw9FWVDwqXhPKvD+0jgYp39BUdIiBrX2xcRiXjwzuWwBBJmXrok
6F0l4Y06+9arRSToZixvS60m4WKBowizlYRhX2W3A69J4A51Fbv1CeOzZY5W
wzQJHW9lX1mSJCgXsOwS/pKQImTffY+HgglZjvIoYQr2LGeE+EpTcONtZi+/
PAWCn/M3HVOl4G+URcoTTQqErXr4fYECadn9H45bUsDB5x2U50TBKo+bc5mH
KSgsHmusOUbBug3UNu1wCrjPHdlYG0tBy9j0N7Z4CvWa2zupNAo+3tHW8LlK
gdW3HVGrblHw/l3avYK7FJyWGR7LKqfgnd0SQbKaQl5kV1xqoMD/O/VzoY2C
Krvy8JEeCpgTTTwH3+N5A2yhdoyCLRqHT8bMULB6TupzNUmB6+of7xX/UBDf
KLj3NTsLWLc+PvnBzQIDNU6hu3wsuLtFrt1PgAVEfXXDVhEWPD87fVNfnAVH
DZ4veyjFguKGBub+VSz4+/phwYc1LHCwlLN5Js+CiDIbNXNFFjxSWuDqQXz/
4V5cHWJe/B6TQERB7s4ZhgILXtmJ9S/H9gfNrty9iDUJaVOeiCZr5H7nITY8
eb2BU4kFQbpru9MRl+1zPCuCeDDX3HMK528SZr8lhvu9o823uq9mQXJ60iHP
lSyIXVtwVVaCBZoXze5TK1gwsezFw2nEwhCzunk8f4uPtrSdNAvi3Rz4k2RZ
sO2EzOygHAumtky+37KOBXzsTltfrWfBwuJI0MgGFoBqx3c6ouS31n5+VRa4
f2iMUcNxq/ym1tavZcFvqcLGL7jvgHSpWgDukz/Fy34Y7ffCz7ViLRsLun7a
ChmjvT3Covd5TOH7+0tbj32koH/8zG+3fgoea6548fYlBSv9LM3GWykY3FPN
1tBEwZjwfJXCUwru8m9bsecJBecfPynbibgh7O8RNUTDKxl8/Ih9J6fKRBsp
4Lka6fOhngJaUf/I1VoKGrMsw2OQH9JLaZPrKilYsna8SO0hBRfuMPQ2IH9u
2vy+3liGPMoLaShF5BF8IuOB33P6k21McNylKNvItTiPXqaq1I7rrOyQtnuF
695erPs78JiC+Rp/CMD9jR5ymb7Bc1roMSeO4LnPB1u/Zmum4IhlwN9riBzC
69ay472OylpavkF+8vMsPSr8goJyFfG/sx0UQDlvNQfydcXz/tiZXgp01moG
DCHKhERIa+B3dzsxtV84LnvFqiedOK9B4s7M0DO8X6l+HhPX9V084V6B+zTJ
r/SMwnMMJHn+tEF7HADuDZvwnBtMRF7EPkL/zRN9ZliB31fd385XQkFyU0SZ
6B0KIteNrktGPzte6vtFMBUxwejczTjc/9XLhJvRFNSbcR8IC6Egd6r71lN/
tE/N6bYwLwocuudVbx6goNqR/f4rF/S7mh31+Y7YLp8ct3SgoE3u+B61PWj/
4E395XYUfCsb+L5og/Y4c6vqPMaF79kdwiHmFOSXFKYsmlDw+dOGLXQjCn7x
KgePG1AwpXrxdaAeBRXl13+1a1EgZLhPtnYzBfvVWVF8GzF+XLaapNZR8Gru
JG+kHAW/81pC52UosF4oJ0Ik0G6dA96zGK8aHtm6XuPH9u+19SO8FFwL8Lhb
t4yClzxvXs5jXPNxDQnKRdwSWKBpiLhkpm7HZ07c72yq/kk2tIekXt3J3ySs
XZFp9IAgYSKVr0X8Jwmx646KSk+gjtbbFbhnhIRb56PDD74hgSkk7g09GLcP
HPfd1466esfU45VtJHy4InJvspkE4RG+4jbE8ZFhw3KMwwnF8TLGL0ioz7ot
9KiThFCWJKH7ioTw6gzngQESPMKjhavekWAfrHT3wzAJW+s698hgvNYy9UwM
GyXB1zFJ2/Yr7nM2kBgZI2HkT09APX5v2loYX/0F4/lTTbZcxGvyo1xFiMH2
E9u3YT/Tw8/cDscHr+pqu4TzPz5Nlb8wTsIFJY4jt/Fe31bSHkR8I0Hmz4ol
Bojq/EeEErHf+6/0UBrO2yeSD6txnRaxRteezySsYjM63Ysot3ApdwZRvZyH
TQn3+xXc2hKBWGmz0DSGaNH/t9AD59Ws6uBLRjyw5ObsBlzP6FXXmWHEMvXJ
ost4npFI862TiOZ2TsPBiFVUpUwnjre1u3LwNN6/9KZgrDvao71y4PtmtHt9
4rmLtC60i8c57astJNCdEl4o1OB5HA6WH7xLwtjPKh+RayQ0/xE4wpWE59jn
Jugfg+fs8EjkDSKhfHqJjYgPCXVXypdaH0C7XvzMmnTEPKnIeWWFLQm9Xkc+
XbMgweqQlreAKQnruo5Pc+/AfDqx1UXGgASOxI8Wp/RI+J3DV0liPdRQsFZB
Rh/vZe+dvQb7ow84GGtgvaQqdVWvHufdd0gfksB1ep4SZlK78F0DH1knWpFA
S5x4f9MO66yvyaVzTlj3vHJ/EH2QBP+frrHCeD5u4r761wASpL/8vsjAfJ/r
G5RmGEfCCRNXtutpyDvNJAufHBIu1/WvFC4m4fqDAvCpRX1BC/x7FPn4+VPH
n8fvSdj0wKXryQ/k7UDomw+LJNzktt5Vgf4Swzb4BiteoP6MOL/QwbiyiWl5
wpoC7ceXZMw9KHg4mvvoNMYD879uD+Muov9q/XBpwvjRVQ+FnZifHfepfTTF
eJOvYARLMd4JGpVHH8F4lmetcfjf3wfOUns3jmM+3hNTodo7S8GC4vnj/L8x
zp5tSS7E/LvrTrmqBuYRmetDCz8wr1XxHt+ii3mndO/agBlNFhhZlQ5wbmcB
WTT554kJ5tWMHIOvFixY6rLv931bzEe2u6ymHDBPzSceeOXMgiWRfzRfuLLg
uu3tydx9LKDCP1xvQnT14XXIRPScrdlVi/2hGpER611YoLtjmUESznvKe6WK
H5GL8Ys91pEFw4t/lkTtYcG1h/NTmrhPjA3RaWWDeXCXbHaKFebRTYlJHZYs
SBqP/+uF7TwVqiTbGvPhZs7fB3ez4LDXbtEUe8yrmRLNs3tZMFK5UdYO97W4
t/fIKncWdEtz+63xZsHPkY3qKsdYYFniLakTygLeUPW9dTGoJ4J2xAzHszCf
9HDoZqBOSDm+5X0uC0LSjlg8useCW0vU499WsWB56e1Dfk9xvQPP5Za/ZIFi
ULkS/RULhpo+b/k+yII7DFuP+BEWsPtzX3n7hQXpzRGNvl9Z8EM2Ui58ggUn
J8f2s31nQe2jY7lvJ1nQcX6M2fKDBZfGLN7Oz7JAOsE29T4d36e8vKGEYEFb
5zk7RRYL9n4I1fuOqLdHcjVjngWG0RIrd/5iQefmacnPv1mwcyrvp9MfFvh7
/6Wt+Iu6Iujz0AP2eQj7kqqdxDUPqn1R7wt452F5Qv3AAf55UJhtu71bYB7i
0nv2h2A7i8V7K5tvHvrG7L3rcFxfwKyRP2LLVZ7K0WXzMKvHun4S0dGpsX8r
Is/ojO877nn4RPKvSeGYhxO+lRkXF1ng3MyTxqTwPrxJrWxzyBsD/tEovO/6
JcvEkz+zQMnujZb6O9R1XgdDN/aw4ObameXSbSzgP5x5y6meBeJ28kaiD1ig
Uq5UUF7AAoFEv8tJ11ngwru40SCNBerHPCOUL7Bg8PPKDaOncNzuhbrD4ajf
7uaPmgSxYHTHHeUYfxb0B95UCfRE/vBs2yaBPGAVcEwHIF8Ujx77YgIsyPqk
FLOwmQXTvVWjL1H37Tu3dvIu6s0liREe3ajvPF9fGNMUY4HYisECEUThu2XG
2ajvzqqI3NiH+jRGsMz+GeoyyYs/7+ahzttf6XJwL+q8593+qpWoL39xif2d
Qh2n80K23UsF+bYl2IWpzILL+pqVi4iv/fp0nyDymGu2aKIevNCf2a2lhvz/
JiC4sJUFD9IMX84ZsUCfMztXHHmt77K99q4X8sWsPTv4JK7bmc20SGdBKxd/
vFcx6uUWasWhZhaM+3lEfEYeRnE1z5Qjr9oPqWhsRz5InPnKdBOZh7YCuqyE
4jzwrn5g5b91HoRObz9w2HgeEtY2JfZYIx5k9o7tmYfTbpxuHx3nQUXAxyvN
aR6El/EJ+2JbY9Uxlz7sj6QRN/zs5sH1V4IRl+08TEUL/x2xmQfFJyefNCFu
oaaLxxFZ77mNHu2eh0bjpSuP4LjkYeWCXmy/aqJZVmP/GxONkUnLeWjoKVm4
Yz4PZwWiysRN5qHZ4GzXF5gH0/j6pBt687A+ppQeqTUPtA3dZeWb5iFqoiaT
W3kevEPFrH+sngfNk2fsXCTm4dtFtSRZwXmQD25fMoC89wxYn3kX/aI9keHs
i/5UrsJnEoV2CbJOX74D/fJBk0uI4wcW7P5+m8tmAPV7k4+BcycLytZHhIW0
suBcil5SXgMLNmc6hfPUoA43+dJTWs6C7DtBSy9gXBgVcgnKuIO89yk90JeD
9c2JUZn+LKwTNn3ry0S+5khy15YlsOD7huncb2dZcMCkJUsvGt/b9NSgEcYf
0+QfdvuPY51idEX5og/Gh3FpWaYHC+rO1aRsdWNBU80T3lMYJy/UczOeY3yM
OrnkWjDGu3dSiSxrjMurxd8vnjNmgbLu+Ruluhh/QliZyuos+LrmasVzrGMc
vCzrqpGvTRsqfzOw3loZ9qnckpMFHxPupe9doODPxQvrRggKgr9xaJvMUXCs
ougR4wfq0E2KmpNYz92sN9T+9/fop4IEPbVYFNQeWJv5nUK9m/DjhQ8N89Se
35tWf0P9nZr+1fgDBVEE/3L9PgpeHw9lHXtOwbZmx9f8qJdfXN1b8w31Psfb
S/c87qPOnHgXNXEPdWnmh4GiYgpU3PcuAawPatnm47/UYH05uOqjA+r/U6qW
x3NQj0vW6nFPd1KwnlvnN99rCr5I3XftfYv166pIOU/Me1eid5OaQziv4Hu+
EbYbVPy+0bH/0/O28Qgc//e63drl3Zg3T2Odg+fKaLFntqCef+6RxLuyjoIz
n9h+2KF+zxHzONKL+v2+zPvv+/NxvmEgY0sO1rWBcrenM7EuCHRo+3GJAgmb
DrNtmJ9hsPPNjTMU6iKLkCrU8290rb5PRFBw9vHjkL+Yx1d+F5xfcoIC0/FJ
8x+o7+f0DfSafCmwvGzOjPWmYDR/o0c76v1L9udrPRCtYw5xnPWkYFc4YyYV
6/nnj2ein6Iu+BBolnsX64HVbHu2TWA9sKwloPQ+1gHHaxesDqN+SLhY/H0Z
6ny5lHB/XW0KZgRGd65XRR3A0dcUKkuB2GLa+npR1AvGZTv28+F+ua86XqAO
t3682JXOTsGTSdtTzCUUbP2ZICGDmPduk+0HRPWaN7u6sL+bHvt9DxfWFe2W
N4xQ5xeF5Na3o+4PCS94UilIgUiwy2gO4tDW9zKz+D2IK54IwjogilpcaF+K
dUZsTFcC6qDz9j9j6v8jIaY9tCeZIiFMZ18/B0lCXmhAoRzitqSpm1L4faLV
QngVC3Vf7osvmfMkBL28oLbyF+ruZknaQ6wXdFbsiJBbQL1VegMKEV+Wz73h
/qez9M1HKvDcy48nq2/noCDMQL95hBvr3kFrxct4757+S1OueE6r8ZVd/iIU
GNgWCaqJUZAZnKWujXVN1PTiFQVJrKcYSiFMbCf/bbwwhHjrSEDyGxznnpPj
aYnzas4bsxngPR/uf+SzE+0SDZycWbg/90nTCQ+8h+QFFx2TGTzP2q8P9VFf
v2fIrhgfIiFeq/3jrT4Ssg0izgyhXmz9JF+p1ERCMk/z7sQ61Ot0keO+lSTo
1v0ZZpRiXZF77U9qIQk+gwBFeSSwWwra96LOXq0b9fNWBupX4eeJ5y9hHaLx
oSfiIgndZ7cMS57DeiO3935WLAmnl/795nwK9bSo1s3LJ0nwnPAig1DXHvhw
85BHKAmcL9SetqHeFRr0Kun1I6Hzu4Lh2cP4Pq+PHrrvhvXFMgFza2fUxxG9
zov2qOf/s+B1sSZBz6QlXNUc+/N/bRI0JiFO5MnFo6jD19RHXA1FnV6zY21o
ujYJn3RMfdO0SDjntNLyjibWP8FVAVkaqJ9FBirztuC77wqIV0S8l+X60nUz
1kN3ch/zI5rzLiqfUMd7zr0034O459HbYmvEuL/mXmrYnylR1k7ivOmcogwe
XJf7rrfAEsSVxVIfhBCzYwbabyPOZbZdkML9u7b9J1qyjYSzayK59+jgvoJD
q0yxjvg6ud3XFs8bsv+NPi/WEwZBlb18iEd6hzLrcJyP2AatsK1YV970ERXG
/V+e9Hq9RoUES/fXO0EO7X/lfdLrlSRIRQEnjxi+L9dAspkA1jWWXgrruEko
EZJ7M7hIgOra6o/xFAHqPgf7dWcJmHuZ8kL2OwFalI2v5xcC6ndpatwZIiBt
beXqgT4CciOOtFHtBCSuT3PhbSJgy9BjKb5HBOhHPJJ0KyNgp1hP2p8CAmaq
1fbJ3iSg2fOqSnw2AenLB374pxOgvGVjhtolAh7JDYRvjidAprrjlkAcAUOB
pcP7zxEg9t9ktsQZAk5XXLyeH0NAZoLXc69oApok9h0mIwmYffxq20wEAQtf
dGRXIIb2W6X1hxOw9p3KjCv2Xzph+lfkFAH/lcpxZ5wlwKTouX9wAgEKr38+
s7pMgGc0uWL6KgGG1/iPnsojYMfRHZvvFBGwui64MxHPbzwVcGpbNQHjxMYs
wQYCgt2+LYg9I4Ce8+yI5SsC/PjWf9o1QsD9y7VXTaYJ4Gprq9H/j4Cb61Lf
LKJd/1auMEsWx7q9/dq1WAXkr0HHsWDkxYt0nSea+H5zNHGeDTuxDmwtzU5F
vh4BT2WPvVg/mmVIvkNeixmtpDVjvcfcV8wbd4KEnDZH6WT0j4RD14h3WO+F
/wpKW4r1Hu9Ab5PQdRKsBwKuaOSTcFCyeOgY+mXD9RJV5SoS2v7GLNnSQMLr
cfkNSm0kuPQRjlxYJzeuXbfjWD8Ju7NOtqdgPdipoZDJ+ZGEHf/ZcOlina73
oHf3b6zH3yh4NlRMkDB4uvwV6zsJxU79z7dOk2B6XWIFF8aP9yaNKkt/kjDa
786zgJhQ2e/8BDE8WTE3CuvL2hNtMzdw3nOOQF0arufc4Li3DOv3ZGGJ6YAR
EsbJNY9zsY6vmgjP9kc0oM99CfuAfrypzsrlM66Te7Q4chz9dBWb0RDu2y/6
Jk6EQQLPcDmtCeP0yWRNtmg2jOvmGw1GeSjgW/qE5iREAckx3CeKcXHL5g+i
46soeCyootepQEF5GbO3HfPO7Jz68+LNmPdzGjlDMB/p6H057gqoGwwbtDLM
KJhfrWxsb0uBqthrly2Yzy5zJhn1Yp6jzypFpxyhoOqj8Cv+YAp+qhJGUlEU
bNSwz7CMpWBp2QWXorMUnDz8UF71PAWMC/IaxYi7isrMHc5R0Ooglvr7NNbX
L4d2csdgvg7iz/2M89fKlVXNhFMQePvXlaxQzPPXB06H4/qd+o9nVRHPLAho
nkbkl9M2E8C8ncK9sWk7jiv8KtRvjPn89bhmYtxJCmT2n0nZiutunrQfWYt5
Py7e/IoF7u8ro2+84gIFZn7ctycQK/bImSqiPrA3fh/Sh/1PTNkYkzg+ptbx
zh28h9VJ5Z2bEW+cifeax/V0VgQ2umFb1Lfx8UYct+yVtegSnKfVM73HH9fJ
UtfkyU+kgE3tyQhXMgXCnpN9V5LwfPKQV52AeU7f1zwjjoIxr78fO/H+0V3N
2UrR//LumUpePL/fA8NMfrzXS2LpY7UgXCft8KhvIAVlOrubLwSgDssI2x6H
eOTc792/EHf2PDA1Q1w6JDrkewzzvNGWQcKPAi8/tbHvqE8SpQ44Lj9IgeJy
BxrLCXXEJnllAXzPvuvCGqfNKYiVq6u0MML1hQYnb+pR8Et+z9bwrRS8L1bX
2raJgvg1fJ9ClClwmtJxOLiGgn6TcGVlzLveY5p+3ZifVTtSDHZh3m4Ouzpz
A/Pq4bTUty2YV2U4E149niUh/Y927PkpEmRTD5bJfCPh4e8o8zPI47ate70f
Ih4zPbrzHn4vOJFXswXHZaaFccqg36jnexOHkN/B2yUHX6O+MOMsuN37h4T1
xV5fE1GnrHB10chDnrsX1DsVLEe7ScXKXcfz3Past7HBvF+RqcrbsoICj+Sp
I83If8fF/O2x0qiTY1bQu9APjsElIwE5fOczp1y/KKE9V5+wLNlAQQvhcPyY
Bq6fpe79TPff7wk7Vn1F+4Sersr/g/6w3Gv05lfUcSPG4+4d9hS8+jOyzcIR
+aTWWHEd7dtWcr2Ljhip1/t0tTPqvM+52a3oNy5y6slG+yjIru29/RpRs/yP
l/F+Cv67Fhjm44b63jT22xDqRj+1yrda7hRcVaiutEIc8PxhNoPvZ15t0VOB
/Z8Ouey/hfPWfL3fFe9Kgd2hLq3juM+2GNXaPXgOpbGtq3j//f4yr0GoA1FP
aexqBvZLrdJJG8B9zoU+3PAUecHp/zh4DnWurvF3sddhFOyYOCZ1Ffl8nWs8
MBJ529QU/F9xFvq13bUbrJt43w2nOLIL8L3tHQrk71KwKdMxkQux65zOvXv4
3fjby76gW6irP2Y+6rlOgWdGc+Ec6vBfSvbTd1MxbhCFdBb6xcoNUrli8fge
OauE2NFfItUuPkhAP7x7NDXEFJF91mlzP/rHh9istBfoV0bvnF3n8FxFtRln
pdH/zA6tqYrGOBG5suNgFPq9e/Ub5Sjk/6fg18JmPui/uz5xRaOdDu/aohWL
96+yYgidtaRg1VEL7Tp8x+tirulrMM6JbAtpWYP8DowP/GKP/H6r+D3bRh7t
tK/hislq9Juejf5eK9GvWy7YPED+WIS9FJlFPq1LHfpch/xi93abBoyvJptS
wqz+8S9Q5YoA6kuD0k/s55GnC2Gq1SN0En7Yja8/hbpyX/SqJ+oDJFDXREb2
tZAw9iNV+0oZ6uq6JRUjqBPdt1SYdKEuPOWioL0hAvOBwIT4nyOY/wQOqi7z
QP4bntp92oUEPp7g1e4OqNvGBlfxo847n6Ty6zziLoP+ahZ+lzqVeqvdiYSt
76eGFFxJqGMSD94jqvbnrRzF+Zmr9n9dhjrRIFtRyQ7zbEpqhkSNHeazgj2f
rmP+DRRNqPXZRcLTn1LS0piXn+pEBEkYkcBV0pLIwnz91HpKvh71ovWPbXoE
6sOyOrt8gU0kXAlNSLmFesvqZ53/B9RbHVrSkIx6i93R/v64CAlOV6tnKpZh
XDCvDXP99/c31T8XP6LOOj4Uslf/JwHv7Du8Qr+irknicpFDfRWuU8onjPpi
/+pVI8OoN+Y0ev98e0zAef3tjq8rCXj9QDdN4z7qn2NuVgJ3UYdtbbyYeYeA
I2qG3ZmoY0j9nPiQHAJ2WYtn3rhGgEDLiQVe1F1nHGKcD2YRoPfWvW4J6h5+
paS3SbmoZ8Qib2jdI2Bd8YDEEtRv35LqhCdacf9Atv1jnQQ4nE8ee9ZNQJnW
x3sq2F7ys4z/4QsCbtntvO+C46RYislM1EfvqoqHv1YQ8KLX9PgV1FHnhX8c
KryB64xfH3iIem+z1inDNckE/KRHXVp3kYCNokc+bUBddpzfreAq6rTamMeX
OFG3saJSVoWGEGBp87Z7MgB14tjIt5dHUb+dq/ay9COgjY+dc7sPthtN8ge8
CRib7HII9yWgYeblZhfsfyLxOkgUsVlm+fkg7HeOr936yQN1LKF0rdmNAHnD
7GYrFwL21QX32OzBfQxy490tCVDqsXh/3pgAu2xtvUY9AlbSzdPvbMV1vJye
5mxCneq84ovwepxXn7XrhgIBEotVRN5qAv68cjrnIEPA26PGYaukUAfyN6d6
iBNgMSl+YHYFAUJTGZOkKN6/5PlSYcT1vqYvhxFPM9902OO4vS7ykh8lCXif
apZhIk3ArxdSgg64Dm9hwebtYgTkHyxa3iNAwFM6o9OPiwDzGlZK5AITxHYb
23XQmRAeH3mUPsGE/Z7MGachJuzxNXna0c0Ek7ZHy0ybmbBQMfZmSzUTPqs+
YnMrZsJ6Y/LE5VtM8GOrXa91nQn30g7ttchiQvwnVdmeTCb0zZ1+53iFCcNd
ke9js5lgSa9sFcFxUxZbDIZvMEGZpfPrFuLipNZ1X8TB5eYO2Yi+yxbuP0ec
c4gXYiJaVYySsjlMkFN+yTaGbQ/LV+NvcB2Tt846rKtMEJE+4yGO6595+kWj
C/c1fXdsd3Q6E7rSZF/uS2WCcYJiLnsSE249vGpXeIEJourvPxqfZcJRQxHz
T6eYYP5WqSAkEtdtjBDlDmVC40X1OwuBTIgtcimf9WdCkSLP6Y++eF4r56Md
nkx4We3KsHRnQr81dXvRFe3xdPWNz/ZMOLYFdBzNmXBwSvtLhx6eb/PvVXob
mVDZW8snvpYJXx9yZrtJMaHQVXVjsSja5VJdtaogE3bqWidXLWfCKWinhfIz
IaP2fWehEBOSnLYlDeO4c1d/MMrEmTAa5Rl5Eecf/CKQ1iuD72M0OyGzBu15
bYe3gRwTxuPe7mRTQHuOZPR1KzKBd2Jn2YASExoGqU3i65jA8H+87j/sD9tq
PCOG84YM5yV4pJlwsX5xL8cKfL/eE0W8AkyIHNtNSfMw4Xbtf7Jb2XHf2IEJ
5wUGvDu+bCGOYsDLLZGLDTQGRBxrCf01zYDp/IWquxMMYL1M09//hQH0Ly90
Yz4wQOQio2D4HQOWBZdN3XnDgE/HfEwCXjOg5/i5pwa9DMicEdkj1MWA181a
tLF2XKdQ6MvpNgZsror6PfmEAdS3jaLStQxQ0D2ntbOcAdry9LbcAgbcfXdQ
wukGA9jX8IsvS2fAVvG15yvjGbDub4HljxgGLDZmErGhDMgx3Xb19lEGLKWr
rNjtwYAPLiV19nsZ8EY3k266iwEFKj5t67czICZhfscfdQaYSUWFKCgyYErR
b+L2SgZ0Oarm7RBjwLdaReU8YQak39l06KwgA1o2jcvLCjDg95XqfQXLGbAn
y07IjBfHq/83OMDNAJlp7zsWnAxI9u1hmnIwYH1C/97MpQzISGtQ7GZnQOEz
g5pZNgbUDq33X1jCgOX27Cvnsf1sR6n9GI6X3tP6qGEZnv/Rs8x63Dfn1HyK
8Sq057md7E3r0Z5S16PWazNgV22m20ojBvzy/4/zgAkD3M85j6cYM2BjjBx3
LH5Xu72R1xMYEOrvyTDAey4RjnsmpMeAat8D54Zx/uG3t/g4tjHAKqlOk9zK
gNSMHa/EtPA+KUttu7DNW1T2d1QD14/c+I65Ce3ct0YiVxXnDVfmhSsxYPLS
f1mr5RhQ1Hvlazuer/jyIPlOigEr3Xba2YozoDLzP4W/ogzgKPCRlhBhQOMr
nuLNQgzgDOLTmeRnQH1U9afbfAw4JbqD+zIPA7JEUjXPoJ3O2X5XM/xDB0OR
LfpLSDr8pQu83D9DB7GXsoprx+jQITwev/s9HY4FqIhI99LhzyjNxuYZHW7e
LG6vb6BDdmlAYkoVHQ6eXIj1KqVD+/IEi8J8Omzrv1lunUMHI+5fJw5coYPB
0IxEYSodBD4qWMQn0cFT/MTCrXg68OSkcs1doMMuJ+sH2+OwfcGQTekcHWaP
HywOPYPnif/64nks4pDpIfEYOtwVz0zziaaDXUZeln0UHXIv6Z41iKBDilL+
f1QIHXozVip/DaRDyboqxdf+dPhcPJ3P9MH98o4ajXvQQdPgutz7fXQYuToy
9movHfr4I3k1bOnwTLYu9IYFHbzucf1ctpMOO3WmTWOBDtv9D/os6NDB3VwW
zmrSITH0eafwJrSPxk/h+yp0eL5aXslegQ6nHCxNbsrS4dra87sOStEhQ8U4
/6UoHZrE7uzfIUCHmvffi3p46PCIfr3m6FI6FG37j832Dw2OK55pOknRYJ3H
hwXHORoQ1qU25d9oED+1Xj3uEw0WRgP77g/RYCarwK/pHQ3urUxQdXpPA0mr
SR2BDzTg8JFcKz1Kg2xjo6DISRrs3imr8IJGgxP8QYWLLBqsJ7uXzy3QQGyb
pcTmvzR4s2t81/NFGrREf+iJxO9C4lX/2czTwPhI/8ZPdBpIf9q3bv80DV5M
eYoewnXj+O9sZeB+fst64gr7aGAQn+H4sIMG75+9NxV5hv0f7a5cbabBZW3x
ng9PaXBbhXmaH/HVEe/xDYgqXlKORxGnq1PdNzyhgYaY8MzxxzTYsCtSwLOG
BhW++7e/L6fBjuUSQ9l3aaBVskwt4BYN7tzwutp2jQZmLelxGRl4L9YDdZMU
GqTz/QnSjqfBhS/xlM5pGgTt8kw6GU4Do6h86Y7jNLilH9u5xhvPs5Kz4bQb
DRxFjCas99IgkeeTjIMNDVYoNAm/2EWDQdEjXlymNNjL6uowM6HBEPw+tRZR
eEgj//JOGqTcv1H40owGoCQ46GZBg2upzy9NWtGgdzG08IYtDUxWy78ydKCB
Tn394AkXGrCXyRw+eBDt3BrCedsL5/c3xvgcpYHCGrOTFoE0kI+9UTMaTIPt
U50V6WE0UNJd9UUlkgb6j25yFJ2kQflg1Sv/GJyXH71T/Ay+j4iR4+1zNLhU
pClfFEeD1uKWrMSL2I6Q0ZDC+8sdzrd7nECDp5wbLbiSafDST/1F+yUauI+F
3N+SRgM+/ei5qEwaBCZEEHnXaRDx4r217h0a+PcNhu4qpQF54kDT4SpcR/tD
kGMDDa5PFo7OttHgoZhwz/NuXC989cjwW+SLdtmTjZ/xXSfLOBWn8Hy77WSf
Ik/0xmKFVZE3S6s30HJ/0+BbybCiJfJZ9n0cey/yK/pR2WNldjoMf+p2Jrjo
sOa/yxoLfOgHKkqeQ0J0aGs99oIhRgfH+L6V4jJ0SDsQe2VEjg4uJ44rl62n
w8sjhfv3bKFDQYbD/lfof4ypult7DOkgqVEvX26KceKG8/R9azr0SG5IPetA
hxMv/gZvQr9ec9ORuxr9/Kh/2J1wXzrQ/cZ6owLosGAxbOoURofMa04DRRg/
8kcvcr8+SwelHUX3BjEOHTjoXG6XQgcP/0sfijPocGmFptK/37d0rF/c3XaT
DmEtp1TliujQLFFg3lFGh5apwKdrHtFBWco5ndVEh6owoR2TnXRYviNUhxik
g+ihTfsnMX5u3hSl9WKWDo0rVD1Tf9HBJvJB5SfMV0FRvPUymG+6T632GMf8
V+f95xs75sPPVduflW9kgOPmqPUymBc6nmcWn9FnwINUCa8ozDdRvNYmARaY
T3ffdj5kx4C23ynZjc6YB62mDaXcGeATar7Z3JcBwuOlD8YDMa+f/tjkFMUA
9RZ+2vFzqBdKqowzkhkQfVOZzf0KA3R9xy8ty8XzrOxpPoj53vWsXf+fEhy3
6xEz5iEDzi5+5bGqwfl6KjM99Xi+5RkWb54y4L68Pq/HMwbwHDBrMkZdIbZW
30ligAGdl6RSPqIeqVOzDz88jnpi7+k+4xnMozoJO6WYDJAbGVtv9R/mq9Re
rvBFBohOdHCxL0WdxuZTuoaLCcG6XivfcDPBns9E/gfqIt5DtqN/EQ07wqgv
iCODsw7KiKdHSjK24zjnA9s04nFeq9imZh5E29M6kkkcqCMnWyLCUE+pC5xX
7frLAGtNh2EF3M9tbsNkDeqrjQfW6E38xnx8IOtFJeLEHw2FGfy+ymXN4TYc
t3zV0v2vl6Ae/BBYIYbn6xO2F1PhRP3W/vroIKK8+4TRI9yHObOd1s7GhA1V
1V/ycf7H8n4OCdRtHpNP5xvmUA9sEyDXTzEgYOPrjx1jDHC+FlCSPYLvl5lu
nDHIgOywuHMNfdj/TnxFGNqxHA4Nur5AvbWz4qRvC+b/nJ33chsZcDD8kV8m
2l/C7HylOOq0rRuEPifgu9wT6II9iG5nPj1/W80AU44bJWGI1I8bBpqI3k6X
2pcjbvsv4PRiFQOObnn3SQdR7UCbqmMFA/RUvX/IlDHAa1JmxuUuA8JumJQX
3UYdVJugwZbDgAPpM9lLshjwmPFU83gK2qfCw9ziIgN0LinUpp9mwODf62+/
nEQ9Nq2jvQR5Jp2TvvJxJPJJqju4ENtvg/44MLDfn3/Tg22nGHCI9NgdjLrx
hpik+VvEVpck332ItXF2hTnRDGj3uC7VEcGAvqKkmJ3BDBjZduaRoD/evzHK
xNWTAQ8jg9OfuqHufKvjyuOC/A/54rHUiQE2DSkqkY4MeKFw8fcSbHNyxm7Z
gn7hcffInQBEVZ7pTlv8Tjz4C8ccGBBv8db4si0DkgwsQhos0X/2Su2oM2XA
8W09Wg47kJeVubopBuh/fS1Bi7rIh8b6K+9Rx0226crZoI57csNOZQPij7y8
VUH4fV9ebspq1Huc8aXHvHHes5sKsAL9VXhdFl+rOdp1Gcc8z260e3b8Els8
5+BA3Rn1AwzYQiX2lXgzYNOjyzpK6K+VxssS36L9nIvmztujv872/c45egnX
GXszviebAcbZnkXv8vC9n0j+SitiwFdt8QP/3m/Loq6HOPIg7Eh6YCXq+e7w
hDxn1PkDU2+y3yK/aHMlMi/QLx/QZQ6lT+J5v4oH65AYLx7JvduL/J3f7X3W
mg/rO9cjnA0iTLDzGEg6JsmEtotFf9hk0Q80z8+JyDOhnKrsv431zUPtK/vG
1qPfDflbvFdjQk+vYfrUZiYoShP8VVuZ4FZ3+JCvDhPWLV06zbudCTX8Hv/d
MGSCyp7n8ruNmXBS9e9DxZ1M2JVTwvEYcebGA7qRKdaNjrmlTxFfgK30XzMm
yGyj7mntYgKH7WeHHgtcv2hb37w1E6Zv3quTtWNCfe4hGUMHPHer+640R4wX
S74aCzkzoe6D49Q6FyaEBJiIAtaN8dIGjx33McHn6vBAwH6sN+01BFwOMIGI
7NgW5cGEiCmfu//+fabqr4ppC95MKBlxvX7QD/36x/SxbKxL7W8l6b8LYEJg
qHb5z2Am9Ip4Hy3GOpa+ceshvjNYn6+/wRcZz4SOYxpbXdMwLh3XEhvDOjkv
J7e55CbWxfUF1jYFTDif9GzA+x7agXPdLrKECWKmZ9szSpmQzXFaoQTbFoaL
zjrYrz9+5M3HQibo7v147G8+2r3U0kj7DhPGOJrNEm4xYaDupGZLHtrt5t8P
ZthmGF6OsL2NdbHup+EdOD5v74jrD9xPhs/JWhzXucR1RvM/bB9wuBf7H64j
SR3snMD5lZvs45lY78ffSRrYew3reBanc8gVJsBb9qursK7v/Brw4wLeh83p
yTeJyxhPm2patuL3rSZ8xlEZTGjhNcuVzmJCwQee9rGrTIgbrBjhzkW7XyyL
kMd9dr68wKWF93ndeLS16AETPmlIlgQ/YsJb7mx5rUYmyP6x8ZxtxnrYpChw
6XOsh7kypodeMGHp79i694jLWHMDf58xYWHX21GZViYIcr27lvWUCUJ6jQdu
NzBBT2Qb/2Ad2ov92G5NXFfskn9TQxUTXk6rfz9awYTmnHJDE9xX8szkVpMy
PMeOeGMOtPethbTL03gu21Ne3ATaZXVRWd9qtMfPGWrZMXy3uM74FR9T8b1f
hc8dx3eVUl8se3yaCUsyDK8nhqN9nDtGPh9nwp80hfkLPkx4urRDRvowE1Kv
m27vdEd7+Gkc8jiI/RekF00QZyo0Pxci0n5OrqxFvs3rHhsIwfE8nT6WJl5M
OLWsYlQe1zHxM5gWRt5NH0t+sPwo2kmMo84E+TeyuHDADvF227a36vhdKODg
WnMcd34yfc1hnOdk6Dcbi+ucl86+lYPrmklIK8oeYsKQF/EnFzGc9nxvFfJb
6nxJWAqOD/os0jWP8+cinzrQ/u3jJJT3DvFmT1XvTvwuuGUtbz+uk8P1oTTa
Df1Kixkp7MSE/OTu8ym2yC87RrMz+uMnjvC2ZeivC97a6VwmTFgl/KxdEv07
ld0v3wBxQ6HKRhP0b1tzaS5XcyaoZoY8kbDCvHk1+8EYrhP/5/Dg+b1MsPHo
/H0F/ZWhdVfODP1z9E+hVwciVbH68ln029kftn6A/Yaa0TQv9PO7K068akb/
79bQ+zCN630etLn89V+8KB89Koz7Ns5l5gpivHlE9iiGG+B7n8v1E8U49I0v
8eK4HhM0si7n2CEqJl781oIoveuLjjYwwXwtT95pvMdT7aCVvXi/NfcGHj7G
fRa82oiT//77065Q309oF5331UMSGA/Or3Z43HoS35erdbdZIhOSXbvdhtCP
rNMOsn9Gfj2Jax13qWWCUVWE2cM2jIcM223iPfh+EvU0537k12b9u9Fv0b6l
siO175gQ8KCCuDvMhPTZ2HGbT2gPHeN+iQnkueCJea1ZJlyIf+Jv9h8TouyW
ylpyEfD5zEOdsBUExLXu586SI6Aii9vtvjoBgU026xwMCKh96bWEsiSgNebU
jstOBFDdtfL7DxFQdWxnaOJRAhp/xg08CiJA/UjD2V0RBFQf7ZUOO0nApvTJ
hUHE3c76HTyI/GdMbYcjCTgn7FwzEU6A5N4Tp9zDCGjefyZ/PATndQh2DgUT
QJ//9HwI1+sTcGNUItoeuNTYjd9ln987k/Lv3z3Mf6rvhuvcznxopxNNwNmY
i5LysQT6y7i89RkClsUUBsedI2AJx4Gd3XEEqNB/9a2NJ+C6knNqXQIBJgn+
b1QSCQh6dcKvBPHllO2dAURdv6bKQsS4Bd1Ls4hu1p4q0ckEZHGYdNqkEhB6
LeGxdwYB91tVVFWvEbA+p/WLTx7us1HCeFURAckXSjdI3Ceg8kCIjGMFAe+u
PModriHgsnS/4vLHBFza+kHL/ikBedfY2j+3EPAqyev36TYC7I970rWfE3As
fW8MTzued+bk9qcdBHSs5s1v6iKgqdlbsriXgOLnLz+WvSbg59U1D3Pe4ry7
UiEfhwkgCc4c/S8EbFzTH/lzHM/37O3bp1MEHK51+2QxS0BJuO1TVQYB7r9r
Iw6RBHw7uf3Zk3l8132hv5b9JmCLB7NR7A8BaiNCreZ/CZBu2/OQl52Et+va
z6VwkPA6kPOJ3r+/F1kurrZzGQnLuArzypaTsEn0UKqAMAkrVjhLvxInQb5F
VPDnShKksztUtdaSUBh+93GoIgnp3g+3RaqQoBt75PDQBhI6pP2G1TaR0Hx2
TqsUMcjG+UK1GgnLDfkePsR+UkNPfWA9Cffdtj6TxnkCHVk3HiuTsM19LiUa
cf+JE+3PEfPNE1M2Yj/PqZ0nxLH97HPyxgncT9N8d3sH7n9+pGiP2yoStD37
QrUkSXC5vc56jSgJXRbLTSv4SWjlWpX+De+lL3d+vQLed8OG/RL/fh/c+lgv
aCdFQLSou+neOQI8s1iqHpPIb1sXltcoAb2FkYJXPhDgcu3++VWDBKzrXO+j
1kfAeZPomdSXBKimnMlf3kyAYG2rfEAtAcG3qhpjy5Afspp/AvLxfRY3xp24
ToD1l6r1u5FP+xnhF14jz5Z/H23af5GA7bRWvdmzBKQZpK2oO41+w/eM3w6R
N7GDzxb5reCnzqxEfr94VdIdjuMHzrzZ6Pvvd8gnQo+eRZ4+Zv/B9hzX3f17
3nbhKvLoQG2/Qi4BbxN3Eu9v43v7t84/LPr3O/aQ9fdLCaDp5a4+/JAA8V01
2cer8TyZx3KX4LklPpQMfasjQDE1p2hPPfoLal4zbL8betOS+ogA70dbUjNx
fKp/Ap9CFQEnAoTDhxEL2uqurcb5Iil3WpQa8T7aVQwn5DnVtf+ydTcBmxX/
c3+D/BX4rLS9/hPuEyQ3kPWNgDeXr53SR76mVbpqfiII+JLUG2aJ/HRM1JK6
wEbCYXe5ejceErKdWhK5BEkYmAiPPytGws01Piduy5Dgu9E/ZFGehLbcve2a
qiSIB+cUft5MQl3x7UdeWsjnfZXzm3RIKN7tv+7f34FpFd5L6NMngX+TmonJ
dhKKTnpp3UIU7U449w3RWoTXWsqAhBlTokIXcQsjuNcKcXe5f9hqwP2ouFFr
QxIKPk96LTciIdoop2v9DhL+863bbmKM8zv2N7uaIP5duSdwJwl+g3w+cuYk
KOpnRb+zIIE3aNfheWsSXJf63G6wR94/+npx1gl5WNM69J8b+pvD3SfCniQ8
FVmt+dqPhJBeJ92B4+hXj0bvSgWTcM4uaHlIOJ73t6Du+Em8p7ZHg84ZEvjO
Oet9/Pf/VWNnD21LI4E23WYYfY2Eq517OCLvIN9XltpllaI/qR0WCqgmISzz
/tG+BhI4ZD8cmW0m4XvQ14Srz0hgU7xe4veChCqVmzs3t5MguRi8T/7f75XW
956910bCz238Qa1NuB99V7Yhznc1uPnNsYaE8kcr8/UekBDXMXSCdg/vOV90
3ySfhKll1LTOTRJS2j5vPnaDBMZJE5XI6ySsuSKr8gLbpXXnxi9i/0bBV5v3
FZCAaksA8Jyfg5Wzb1SRoLFpwH17IwmW3kEvnfB8bjGby+y70a/5ig/+6ifB
e0TU7PwQCYOh4qcaP5EQcepLrf4YCe1tZYoD4ySovdPut/5OQlraBruISeTN
lwP37BEDxk6q/mt37pFJmUSMKKzcyjtNgl5IlKvxDAkKXxOVM+Yw3o3LOb0g
SLhSkuBfvIBxZr+Y2TEuCk5+CJe5K0hB9Rz5p0GSAu1lQXtC11Bgb8Ez3adE
wRnObTFeqhTc2sIU9NpEAe9FXf2rmyk4sraNewHxwDrNI0rqFHAa2eSbb6Tg
JpVjO69MQXmUSttmeQpGB8caFVdRkG0kt6NPnALZtMSceQEKFt+hVOSkYOHM
ljzJ3yQEz8rrvMVzntrvXrMF72teVrAv4z0JSRkZok5dJExIigh9Qfu5Lwu9
o1JGgvDu8PTOXPSrh9wrFFPRX0xtPG8gf5Q3lZZSochbW3mza/4k1GTZlkx4
YZzWr7oX6IF2WRAqPeL+z460KbZD+L7Hau90YX9YcIQ7dQTjc+36qzEnSPC0
veD87//r2zJdYxZikC9VkUZxcSQwj0Qw2pJIiLKV2bH7MgmX+i8tKmSRsPSV
llgJ8oH/nfnQCPLAafdx/zW38f0lj5rcQ966fr8MRsiLW3fZp88Vov+faSjf
fhfzioqKx9tinM/7I1/8PgnrD5+ueFWO/JPx4X5VSUIke+isWS0JZ6MkS/Tw
/jwxq3YKIc8XWy/QDyGPxn/AmZwO9Ctu30zX1yTIXbguzDGM6yucPMSOdkyU
1T6fOEtCQ3xuzut5Eky/pvnfW0rBj99d8xH47r01fEKl0hQU2ITO3lOk4LvT
OlVBfM9+Rsx6c10Kyny69RV3UtD2lJe9xJYC4bOGa4f3U3A/y8/H3o+CoqQL
tx+EUgCrBze3naVgqzfnYmsqBd7V+mPjNyhQ/fXGNOMuBdGTOXdfV1LQ2uo6
eLyRgr5iBSvuZxTk7v/epNNFQZyJe+ubPgo+ppguCA5S0NXXFndxGHl076e2
wSc83/dXuuxfKMjkP/aMd5QCo4prucnY/nbwkGoi9tuV/67m/ECBb7Tvhetv
Kbhdd8Qk9hUFVqM/GmQ6KGhI39gc0krB6zV3vs01UGCxYDWnXENB+9rDUnPl
2G9uwxy5R8HOiP+SW/IpWPKZ42n/LQpCI4IHSvIoYPokjltgW+FX7GnJ2zhO
dPTGijtoxysl7kGIYxNJ7ktwXs0F2+7EO/9+Z84n8wXHdYb0+HbjfF1Rnugp
tMfW8ee+A9kUkIPct+gZaKcj1QmlaRQ4cXV2XL9EwWQm+1BTIt5/k9nYZDwF
9e+8rMQRF620s0cv4ntkFGqPI76T5nCKw++br3VNp+P47/6pye+TKYiqkXF3
RPuXOndGLU+nYONGrXUbMyl4FhEXbXeFAseRJN0viC73beyDEHUmy8X0EY1C
33EUIAoKvezekYXvsmq+IQbPuXHk6FeF6xgfVj5v8c6loPuqUF0o2kE8R/F2
Ld6Xjfu0qyq+76rw9gm2EgpCfiQtGSilYN/R1WwcZRTof2Vz34BI7xC6Eo3f
Kem5BwwcLx8t5OyK8+f2+2lK3kR7d+wXaMP9on+EmTehPTrXavvl/7ufVHOA
7mlsF3AcnAzHc08fqtl5ggL/+rsFZ45S0DQk1+Dtg/yxWfku0RPX/66QN32I
gt/1JwVsPJCvbU2H//279THsES0RB5BP3Oo2HMhfzgVLyzgX5NveLN3LjhQs
jY10Strz7+/980zv7KZg77cu/34L5EtUlkuFCQUvdpscvrOdgrcZid0BWsgL
Q8NN4hgPO0hZyf/WYXy0dDxRvuYfryof+aA/cYkeWd6wAt91WFBtWAjt1lR4
qBXjntjShxInEJ8YnD5mjlizPlHRFPGw/hu+V4gxcg/PiqJf7gz5/k4Y0SI9
03cT4scTXbF5uM50Q2TOFVx3pnLecESKgkMiNxQMVlOQIjEzu0cB/YHaKPZD
hYL3D8K7tuL5FGHvVk1NCnwGznfHav/7fnU+Vh/9cllbdi/g+U8KZvnvwHvf
PdShjH5+pmmHiM4uCtY9e3NsqTW2Hwg60tDvDYo412mhnVQ6Y34EoP0utqwv
zztMAf8LyUZ3fIfk11qS50IoCI5bfkQvhgKRvuwMJ+SpYW7557v4nvYbpEVf
XsN1bKY+P0b/6GFX4zyHfJBXM7WSr0Z771G7cBPjQoiMW2kaxgW/3a0nDnfj
+c2UDkj0U/BrLML0Afr11qz5R7/fUdDiH+rkPUSB5o1dBU0YJ47sdAzLR///
mm0WvmKEgsCDx/+MITZ6qO/+jPEhL1zI5h3GC86hax49YxivGmvkqK8UjIyP
m85NUPDfcav5x5P4zvkPlFtnKDh632N7Pw1515N0aDVBwV/DVPlIFgUfPn7R
Gf2F71e4wdxlkYIrbJeHx9hY0HD4P+9YThbURGVZqy9jwQB70BC1nAX7ZWWM
3gix4Bt74N2OFSwwvf/5XL4EC758WVLZIcVCvXTMaFCaBV+9RmfUV7LgA1O3
MBjbYnPKqnmSLHg98PrnGXEW5FcdrqsRxfVmncZ5hFkwX8/GHS3Agsqi7Ulh
uE+3zaJUOi8LipXJ2Rzc/3U0r5EXtv/c0hGx5WNBwuGKdFV+Fny2jNs6L8gC
Hw0fSloEz/U+uXGTGJ5nPaeBH+53lblvph3PkfLrR0yMLAse76hNUlrDgtNJ
0l7r1rLg5bF9+rvlWKBaIJRwU54FZj/DVEcRb6rtcZ5A7Lkf5iOiwAKGjPGA
L+LEu2yxf//ug0vF6rsZiizQWs/y0kTcS/fN34Lf2195Ju7HeU3Oo3GVuK7v
5ZZfmogwk2c6jvv1KSQ+bUZ85/ywrBPRLSllsx/2S2uEt/YifjI0uJeJ6P7i
fVU84rfIPZs+4jg5X4Ef83juPd19+TsQg5+EsK1FnHfMGt6AOOvAvKCB49Jc
NHxv4P4Z+yxsNymx4LdlbsVFZRZsi8vmHFRhQafiotHp9Sy4+7PuvCwizdut
1xz7FS9/bPz3715se9xTZoD7elpaLdVfzQLdhuQkJbQf+4yZ8mZ858fZ8+uY
aOcfY0J7tdHutm/W5i/ie0hv23cuAt9HU3za/TYP8iYspOkjFwscwHhYeSkL
Gv3Yeb7/oWCLfk+ZGPIuKIR7QXIO/Ym92eki8rXj6MildOT75SoxtaWYN6sU
f3Wf+JdPz0gf3FGP+XJ7cgU8oGC3hBP1t5ACm2bZeWuMs2B/RZ2B8b1Ds2e3
7GUK/izZHPoK8wbtv2LBrQkUqDm4Ckuj3zarC3KVx1EwYXZcYS/igKHLakC8
rzzdfOM8tpPtO9nOUbBri3KF/hnMf6eDAr+i3xdetvnkGk3BkLFHkv5JjMMG
aTYN2NZZUPD7N27quZ5I4wWMV4M7PDlwXzejB3or8BxfNEPypjH/qC4fabmA
+WavWpFvFeYbDduSoe2Yb/qG+UqSMW74nXV9mleA57L461+M9xLtznotVIR5
RjjYcRDbDhV8AR6IB2mV9VKIMqz79ZrYH+2+xF26mILEn9Xfu8r+/a4sILUC
406Uh+1fryd4n2fbzR69QD9Puho6iLrh3nX94QyMM0+lT0fRPuJ5fzKvXsS4
Ye5Ry5X273d5kb81C6coKDZsll3EeMFfaNX3mk7B+CkJ4b34XmF+3tZ0fL9s
zYpVxRgX1owVjljh+yc/iq4zRr8//ai+RxX5c2oippVbgwWLpnnf3hmiv2yi
/9pmw4Jyh9k/pAsLyhilYru8WPD8a1zg5uMskHU7WGgRwoLaCH2p7HAWxCTm
Bq+MYkHBf5W6y0+ygE/t6o2j2LbpTjUNjEQeTVlKn4tgQZ7lsmvDiLYS/1d0
3fFcflGYBpHRkKKiUBoykhRxzKKkQmmRBk2kUjKiRGZ+ITQ0kISijIbIStpS
MiJblFV83/f9SvV7/PV87r733HOe51zyFmVwHKir6DFUiPYD//SCNnqzlL5W
NXuvL0sz+p91cWdYum8hHp8YyJKeacC8USHgndDHfavCWBo7xiXL+DyL/Hvs
j63AimT+mJJw7NtiTOsUtOvGpqnaBLNUK/XO+1QAeHH6WpVhP/SPMN17Bets
bi6sOI99t+gvW3TkKEs9G/Ubv7qytFN70F74EEuXH/ret9rHUqjj1sHCPYjH
FUmJI39n/un6LMeRv4N3WGS5q3YTS4F9S+I/bGBp5hTJ99ZrwX/rXlaUmSPe
PHxOXlgF/vujM9/XlKWucMeaCGOWhh/U8OyBVXcftDwEelLjpcsmLJ0Z1NO5
gX6O+g+FfgPrLfP+pgL3JvuZmqPd5I+xuyj6F1ao/NdryNJuQ/04Hu5J57+I
jxuIpWURIcMVerDPtU+SR1egfcGaorHA5HN6ygrAdVa5G3YCC7NS5pYA47yD
He6hv4VWfVg/xt9wmfUwz4ilxy57Ggyxrughq3Nd2P++2PAaaZznYFL75pdm
ONfUFu13qBf5Yy5ri36/4862xGKcx6IyRAdLXqe9XY9g3v1/7Ba56YK3fvsI
KS0HPz5edsZWG/Nu84tZoYXzh8nkLoO/Ld1QpX1fA342z+eKnjp0yUNUwFgN
PHTrt+IgsHyU8aR1i8HT0X8VZmLcW4FR40uWgZ8CtgTrYx1TV6GKn7DDgJpM
9FHYp2zsq+NbYa9zmjbFokDn1E86a2Evs7zADY+wH/00YeVMrJt9MLMyDrwq
VRhxznUmS4PqolZxiIu3qyZlTRoF3t9uGH2HB92V07zG+4H8WCdDJbyNoc07
xG4JNSI/5R+9cgF6L7FIOcsO74RGhYenBJEfKNtqTc94h3xykfT+GLwn3teV
D01H3u8SMGr7+HLkB58/tSx6gXxpV1P8acT58k3ZHpXAmcc7VL8DlZdvDX+J
fuP3v87/+Ar5e6DBrBWYb91sI7G3H8BL6pWaT7CettuL4SvIK1TuLmFFkT9o
TA1quA4esHHxXVeEfEHse5X0Z46hVPuXc01xnh1izaMMR/IAPfU+dejBw2OZ
TU3QHe/rqe/9F7LU1tdv2bmEJf7gmi2S+vDTvB7RoZWIx6h5Frfh1yHtOyXX
WrNUYzrcHWDLksR9AXfrrSxlaSstktuOe3/wztzfHjr8cH9LLuIk5PYUtXzE
TbOKs1LcAdxXkdxz8yMsCa0/ZuQMftjstZv2n2VprdbmBkLc8ifsMBm4CN6Y
O1Aidw3xL+21KjKZpTXHVFaeucfSUNuaCttclsbFfZ46pQD651N9obeUpYIf
+zKnvWLJVWq31qt30LcDPxUOfWTpuOTXf68/ww/lF5RY1bK09dCf0iV18Isf
A28MgaFBL5u8UJ9VY/KvrRo63ZP9p70K50vxSv2G8afn56Q+roROp+16Vgps
aJZf9Bl41TAuZRPavSY/n9MMzE3fafn1E0vbNEmsC+OHBQr/7cd8TjsWiQ7X
sPR6elrHDawX4jlj3LwG+F2tw77njciHjhU89mxh8Vydnm7eDj+0XbjY6RvO
tyr9wfUulvILdlWzP6D3sgpmh3vBO3pPUkV/It757xPKB+DHNdc/pDHI096k
VuXwsV8Xi9Wdw+D3pzovTAQ4ignua3wzmqNLv38rnBHmyDNtpYzTeI5K4zL3
Tpbk6Ge3nsmWyRwVFf0xrpzK0e9kyQrfGRw9n3ZwwEGeo/7VPXkmszlaKHXS
VUWBowyzQlMZ4OIIP5OjqO9/r6UvAmya/rJiAur/XlnYG6LEUbS3RMzEeRwd
KYz+VL2QIw2Tmdqm6hx9mtdns1WLo/bAc2lTdTmy/9r1TNqQo3//LkbNMeMo
zOFDbYolR3n72za7bORIpmKMUco2jhR6J76c7cBRtpnbCcPdHNV1rhu6vocj
d+dMd1FHjvY2/CrPBkoec5l2zYkj57nljs/3cmQCEh4EOtWfdYoEpiq0CR8A
nn+yqv4r+ucciR14ivkkwsaXLcH8SWINjiZY77eyl53cJo4EfBeX/lrH0d32
gnHh5ti3au61DcYcJSvKK1SvgB2tHr07vZSjKxt1ynJwPvNnq1LHL+LI+oxx
hB/O3fttf0wqsPtY10QrFY6s9iUNi6HdVu5Y7S1VjiyutOr7aXCk/9nLYM8S
jiJTrXVmLOPoMLNRpBr2qT+5Sf8CcRSY4PlmkhFH7Hyr0yFAYVGntkEDjrZY
rThlqYf2Qqe6KG2OBP8k/tuO+fYIW+wWx7rrCnYn38R9+ExOt/KR48jGf+a/
0TKww8HvYnuncPT4nLXHCty/eMcc1dOTOEpI8o/9MxHnq3z35h5wpfJH49IJ
HCUmhqzShb8Eh+vM8BDn6InOobvGojh3Y4TXKCGOOvRrxvgJchSlGjh+9h/k
630Jj705YMHa81E8xJu9wkUNoJqvjsJTlqXvkad0/vyGDhVzKpvhpweKknwF
ME9oglFmIfxzVkZD6kWsJ6m7Orcd+1COWfe3Dfv8a6NhEIV9T79WZmALf/0a
vmWiBs6jGeXz6tx0jpg9K+4V45xfEtOVzRU58rDZZvNNmaOACstJ12D/9oYi
JxfYRyXv/fVf8MOUjBgJFR3c/8FnrV36HPX8qKwrw/0unZS9io/7FtiatyZn
PUerxv9XuHszR6+OZ4xdDj+RYWeoX9sHv8hfn6PqxtHZuidKgSfh990acw1O
czT58k7NsiCONsVe+iP7H+Z9kGJuGMvRvn+LenWvceSq3vFB/BZHRq1uYtZp
8P/PssJ1GRzNczLeW5fF0RxPf8f+XI5EtM7Lyz/mSFfmbEzFE46EDlrvS8xH
/L3oa9Ys4sgseJNY93OO5N7tshV8zdGu2uZkkw+wj6/HH/laxFFlUrxaC+Kh
x7ZEspujWlWx5zweR5ev9fVJ/+NIPSU6MEWIT1q2Dz3vivGpuUJcuXQSnx4L
dSfPnsanG71FrTtn8GnV8yC3Xnk+ZajI6wzP5tPq+K/vwxX4tGL5XWVDRT4l
jreb3IbyylKv541od+kZ+PUByFwPWjsbmCm/edtBoNf9D/HSwMgPdO/XLD6t
D/h+URN4P0V49jE5PoUXaUvKA+/H52ZexXoHXrxut0L/gqhWFXfMX9s/za4S
693TSjh2cA6flNZ8c6+by6c9PTdMHivz6ffZiOl68/k0qHRc+DXQeOd/czUW
8KkpSeOpK3CahtLLHqB25LGLDcCPsrzRBJQ3y872QP+3Vn/NQ+bxybteSNAQ
6MOJsftR33w8KGvpQpwvWcqbFvHJYlSNjb8an4SXeisKLubT5sOFGQ+X8Cn6
++ykW9p8CnKSvr9Lh0+i8XaZj3T5xJ8uOIOAdV0fNQaX4Xxl4YMrtPikKfZH
pV2dTyJ/X4Y/UuHTktpX/Gys2zvF16BGiU+x5dHys3D+A8G/nRRn8klOTslS
SpZPc2Ijg4On4hxHy5flSPOp0GPnbv4UPs1rmZ7QLQX7my0xHpgM+zJPs0SB
DhFsZ/QE7DNsc1TReNjh98FZ58dg3ZXqjfa/OSoo8bqs+Qvx/V7+g0gXRxWm
7xInN3N0NfKhw4wv4KcUcRv5Ko7G3s4/bPGOIzXZXrHPL8DXi82dN5Zw9Kxf
8eLOQvCy+JKmEvhn5Z+7JyfncSSdsNgu5xF4W0NRyxjYWZppkQd/Pt7pKzQD
/RbVTlCIgR8bp8ZcGoAfZ55JLlUvB1/v73WyAB5fF7vdtIyj1qTbJ04XYx9/
1tgtKeDodOVg9wLEQ8cm3lDcQ47eOzsPSyNevkpWaY8Hlp0wt5RA/eKuRp0f
QHHzgFs3sb6/s8L9YZTrSk+I7Ea/+UEvzBOyOaJM8eFexN2REvUG6RyO4nwe
GFug317/v7UDGFc5b0v6Max3p3TSCkGcq7+dt9wR57it0Oi2Av1C1gjtm4V5
xpqnBU/M5Miy9a7bnVTM9+Gz7kzE+a7pp6w/XedIauVe1aVXoLdH7wp7xHH0
JlPqw5sYjoqLZ9wRuMjRbrUFYi1RHL1lXRfpRWJ/Wx+MTY9Au6B9w1AIdPiX
5Y0FZzlSuuluusKLI21upukb8E95zcBPceha/6GdsyqgX06KyZnN4K0Dg/uZ
elOOGmM6VEvAc85Z356rqnHk9av6dS/4sUnzfGn8NPDO8dIcNwnopXS2ztix
4L97m6u3II/oFQ6u0gdvh4Q6vMvpw/ujKm1PIfKRK7vmB0d2snRY73Pq7w60
v91zOwZYvsbSwBH5y3m9TPtRyF+q1p0/6QwUarzvZ4j+xgLFRn7Ic4SUqw9G
NuO9YX/4x6R65KV9QYLXkaedcbI9uuwD3gMBle7eb1kKurlJeRnyugytJFuh
FyxNt7qX0lnC0tmC9g8nC1k6YpAkFZyPvPK4sF3WU+Q9mxZesgfuy3B8UIj6
yVrBLvQMZcM5yyTQP/f6jNuRyBuXdPtlvn0y8vObyg1bsvG+KvedF5+Gd7Bs
Z47ATbxr89nnuVEspXUJFT/zZ2n+cVUdy8N4v5UOVvxBvjt6Z53IAbx72LlK
5qp4t/CuZ9utlkO+mfck4pc49lljPW6bIN65ceuW+yP/1vqknHf1F/J5BZWb
4sjLh21kzYWBfXNOLO8Bnq64al2A9ikmGYlpgwyJeq8lX7w71pa1CB5A+a3A
2cyr6HdLmovy/s5QsJnBs6qR77E+MXuT8gXvgVEX9kbgPRDs3B/T+5FBvsTF
2QE/X+25efQTg/xK1TSqiqEXhs0BI++GQ4W7A/yqGZJ9bCPpiXrr0v1fjuBd
wSv+IjoK7xXH7+nSRSUMTT2T2C71lKHEKy39ZQ+w71G5rw7fwfvH1P3kCbz0
Jk+caHsklqE4P8XgsvMMPQ9rGnX7HEP2cW0TTp5haNzeMds+nWLI78z5ki4v
htQVQ54GeDKkIymTMP4kA39MMGg+gfX3JOrpeDC0U7NcpRlocv7p1iq0K12a
M9kH4xZIHFso6sNQS3jJkpGf6yg5t80b+f9brVe0zmk4zdDKfbtd1LHeQZVG
pVHAA9q3q36gXaBz76s8X4ZU/bflHsG4aQx3eKLPyPcMhir/Yd7bqWaWhigX
PBRdeRj9CwZr9ZUDGIoQUjN9E8zQ+jP1Qw4413G1R/LfIhkK/bP8Pwec94E0
EyR4haGOC/Hc4msMRSbecy2+ztD8q5s7fWGXt8P/cpyBWgJb9M+jvm7l39Ud
QN76xBfGqK9UWaQw4SZDTxKPVmYnMBSjE+C55BbW4X8vupCC/eq0qS+9y5CD
sF9d3334Q0zXvqJc2G2NsMPIffQflLg1s4ih5pZcqUnPGepVtEt8hnfju5ay
UAYY2nvHwQr13To/ElzQz7yg7uraPIZWLfDjwrIZCvusKT3yfabk1RNlHLF+
1/EtxYI4l/IBO1fnUOx7jOPNCbBHRmtRrrU7Q8W+rmVjD2GdkjKvEkeGLkXr
af+3h6GS0clfDu1j6IhjwhtbV8zz4dPvGbi/DVYDUdYYf8be1PtlEO7pUvl2
7wiGoj4N1VdGww8vd+Q6xjH0TEsg2ukSQ5ukHp/RRXkw86rd6osMbXykHlh2
Af67vSFrVTju+96KOZpBI9+r5RePfP+hzdQq1Rj3GSHd1amG9RRffxjwcWOo
9XniCbv9DPkKBSru3Ylz1sk2/93CkIyB1YXZ1gyZWnicFbBk6HL0owe7zRkK
F8ye5b2SIaFtVb4TTRhaYbW8JtCIIducn96ihgwZdlzsHtZjqMhWqrVwOexV
4yzyeAlDW8PiHCarMmRVra4hoMyQpj6j4CXPUM2jMXLwDZJyzfJ1Ecc9DJn0
pI3G/sMe2cZxPBrzVVdiTw+PCl0rq0RbePQzKjkg6DOPbI4uX3TkFY8MoyMz
FxTwKPu0rua9+zzKWZ/7ecctHs1fZtqUcIlH69fEXDKM4FF/3CsJ3SAeVfjP
nhN2lkd/3dImv/bnkWhI+ZfiQB4Vq6ypqg7nkW5Y+9SPsTxyL/KraEvkkZpL
zrnPmTyakR1smvSUR/ICUjctXvAorEb+v70VPApdm6swWM0jk1FW5SENPKqu
3bGotIlHaULi9z9hv9JR8R4bW3mk0L7aRwr4d8vDX42oD/PQUexBuXpBxY5x
7Txa+zzNYe837PfU4qtJ33kkeWtc3tbeke9+bn+U/xP7kJijGc/jUYjphGm7
hnjkOKN/S70A4jKoM79WmCFPA6NvPAmGsgRDbC7Dnk21IiLDMxm6XzXobjUX
PPjXMPSGGkOLfqVmZy+DfaPWtnO4ryW6MwwPr2Go8FGfzEMb8Gpb5u0KO4Ze
OQ/cV4Lfvlnv3rcBftwye/32+SPf/1jMl5qC+P9l9MV6GnjLsGWC63v4nftt
w8+uVxn6q7T4znAyQ9Hz7GdOQhx6aVPR1McM5XxrSrtTAF7cccYrrpghuSTL
r2sRbwPiGy68Qfzdunyrak055lNK1H/3kiH/tdXmm8CretfkV6x9C7/e9dV4
RgXi/aZ5E1vJUEq3gFYLeHh7/LRoyRrwYv3hjHV1DKkJdKR/Br+3ZG30pHrw
15JMp0LgkH/P5G0NDDFzDSdM/Ir49CuZLg2ck/20aAzqr6oekUrHOH+5zVvF
R35vvbBeYjv4vm1pxc+30IO1G6dUa0Afbju/l8gD7+/IMLFaBjwbs2OmJPbl
fkI21Qhom9xl7op+m27csh3CeJs5T576YP4dOUFLh1qhK6efXBH5Af6fLvTv
xE+sYydSMBl6d8PC4uLxv+CPcx3LdMaw9OKQVI+KKEvqF2/0zJiI99+pzBWu
U1m6JPbOXGkmSy2r5K5VzWapf0ixPkeJpeUKQpufz4Ge9j9ZfhBYFbTwugTq
V5u8bTJDv8hx24stobe/z36V653Okq2fQWe4LEsVqfvMX8iwVHt3l/5l4Dx3
4XW6aLf74ZlQj3W6bvO/j/weJ6u1Y5P8XJb23JJpy5/P0qnvibLKi1gSUPT5
EqbG0r+mRm6WOvIfRcWlU1RZWqyZmb90AVCtIdUK+/k14YvlPnmWhEVMXzZM
Y2mFY2Z7xySMd7z1fTr0PyvFpsdLGHnRyRdhOqNx7tKuscH/wB8DO42chhmS
djY0OMCHX820fhvFMDRPteVO8wBDM9dImcxCHiDdrWJkCXsuLvx2ZkT3Awu6
okSArx/KsFF9DM3YfCJkbC9D+ZcUY0tg/wVjMm44doLn6+O+rG9jSF9++foN
TdAXzUQjR/hLdXry65/wK82FuQbn4WcRam6p1+F3eRKXvv3EPQ8N8LbkvGfo
8BVnndPvGPJwFXza/YahdBf7F9vht9P7ane9hx+/vBvwnxH8evQVclsLP5f9
uMZ0FvKEtrrQwsBnDL1fyOxuRXx0zxY5uRQ6cyFcj+dzD/HQ0ZAmh7zhjUWl
yAPo3M9Zr4SXJsGfb0SOO5bIkOvsC50VwF/zg962ot7SKzJ+4m34Z7nbz6fQ
Q43tWU9Xp8Kf33AvczHPySANOSe0Z3md9w9Ff6eMk1Jh0NN52y+f1oiHTr4R
+dcEPTsxXJXuBN1eGv5v9tYwxJ/KrWvnAhl6rH3ycQ/0SXfLruxn3ugv4yz8
CnlJr3NhctLId4j6Zl/9hvzA63athR34ISjgdn889GaX6+VISYwb2Fo3sQN5
xuiFTzYHIF+4XDUr/gn06UDyWaturGPY22+RBR5xnHPOOyUG/c1ae/YgXwgS
GNqVC/2Pq7kTLAg71NkpyLTgPOFRD7JDYKdUj0M5u7IYupLaovceel8yIaXg
Guwpom7lFv8E+07e4q4F/d8+XP9pL/jn+4K5Q3sL4TdJsnO0wUMmO8eZjQcP
ubH5Ve24pxev8peq4T5/1+WrnUHcexQlNqWBD0y+hg5KNUM3J0UumAu/Wf9B
5kQz/CpqV/ioFhZ5pJ/iNVZgJH89ZhE6nqU7fSG3D0iztGBd9AQNxM8ujb0D
JxciTy6S8runxdLP5KqNo4mlCb+nyd5dCX+/I7b4ngXy9G/h8xLWo/0hCRRa
s3Qrs8M0cSNLNVYiBjmbkOcfcV28w5alxtDM7aKbEf9fyjn5Lahfl7tcZBtL
o55cOlRux5LZuBaZSAeWHuTLeO7bzVJB7t1j0/cinvMXC0kdYmmrd8aPDcjP
n12hudVHWVpfwZTrH2dJvKGPfQq8ETpadzZQtGqzi9Axll7NNKtIcGPpw6+o
9/aueEfYdevqAyulNVrFMY/l+byKq0cQx832+t0YZ9dyR2WPD0tab8RtRp8F
X5kPGf4LxXxaUczPaJaOVmsVG8Qj3jktySe3wB/nG9zt77EUoZv41CGXpWmt
nlEDeJckbkrJbcE7JLAx69yLIrxvZBrFRVD+czjazyCPpYEg/ybnLJYmiefK
XkhhSePxw44JV9BuZfTiCdZTvuTeOd+bJUGFc458Z5ZcjwWPiYQ9WuKE1wxs
Z2nT1B2VObCfmHnY6FqgRH/Ldh7q/4iZX6zaydJfNrjfYx9LPqVb8m5jvMOM
KsFy2OHyDr8ycmcp/d7uORIe4Gv9BJvXJ1nKPHxRr8ET5zZcIVwPND+2dJBD
u1vKe7d3sEumUZZlMeyZsGm9xk3YfVRRoMmI3Qy/Du17gHl9t2l7tsCew56r
3Eph3/bYj/K2LrCb6pXY1wdZylYIuDEL+0n1mRYTvAf+FVIx+RD2OeQRUFlm
z9JDoRoDp5Hvo07u3eCFc9gu2zqwFH4hLCXo74h3mO7J1YXXcM6p6UJGzfAf
KT3j45FAu3zFhFOof9+QmOmKfvdbbsrtwbgWk8yXc4Bh4+79lUF9T6Nusxj6
VanofxyGHxqcG6PeCb/8bnPC4i389FXXxhOpNnivLgnk+8B/F9Yel15pxZJ3
ULSY4AaWVr59ubXREvcZvOxXOvy952nZ6svm0J3ZgUfEEAfcD8Hj+4xY8o9M
9U/XRxwt3/Hqsw7u0SbQs30p9jOtIElPk6W8W2EJx6E74p56mecRV8fcnk44
qww96Q7qzlOETlnlqu9H3I2//bKsF7rn8vSkXht07bV8afc96I9Czl/7tVNY
+tzkFhs8Afex5ZrCS+jth+vWvjXQX18RM8eZ0J/hXrUuNeiOzOvOD/XQG4nC
PsUQxH0ru9m0AjryMdnSfUoX8oN3H0+GdoA/V6Zm/IOepEZtk0+C3hepOgym
gjfemCVLezVCH06vH1oJfdHTnJhRD33pEtYyc8P7Mu15sMkh6Eyb8Pz7AsAo
lbIpe1Cf+3VMmnotQ+suf/11CeMu2K9/dAjzqKXt6naHXt32DnVYj/J/TQ6J
r9H+PjU4eD36i7vcSfDG+C9SP9b8QD5y/VhS4zXkK3ITC13eQb+WrrDNnIJy
TuoX9wnQNZP3514PAFdpF58vRv/2sRvOd4D/+Eu9HWORx5yq/nVAFPlRU/TO
y3ewnshrDX9jnFNSOkDyDs5vrOiw3gR665boGH8ffHh+zY0Fg7DfjUXpEXXC
I/9OIvbjO0mWtiz7T/oT8pisGToRgcgHNuZGOJ5BXnF975fwVyq4d6uSRDXc
r4rv29yOZfDP3gdXQvUQH+XLv88yZKnPTtnAyJil/VN7qjeboF8UY7gffnMs
aoti3Sr4mcpiNS/4k6CJ1im/1Szpm2o1nwU2dJlesQX2PdhtpYJ2sSnRNcvM
wDtb99ApjDv3wPzwH8yTeO6GykNgx74a8XSguPPrgHrgWN+lSl7AmoKfarNN
4e/f1xmMxvon9DtiurGv9iefXhiDz79370jX0WVpb43jRW34q5KWpauLBvj9
UMS4yciLntzVbulDXpRX/qnmwDzwmY3WwYfw2wLZm3eFUJ5l36pdMH/k++Bx
01Lg11e/FbUXI88SN75nlgx//xZzKu4h5vs5NDqtcDF4/nJt8VzYy7VC2+E0
yucyjsRcRbtEdGlsA/KxFP2k6DtA7/Fjmv4CZR9EB99BP3kZk6NiSxAfQ4P6
m4Eyn88s+oV5Vn1XdEwGHmfk2qoxj09NedFjrJu5e6zTfezj11RHUyXcU25Z
pmc60CL95iwpnEthe1e2MvoPRj1X8YW+xemmZ65B3FrqN9vOgV2+jdlUNQ5x
Leqpvuc80GnptPIu2E0roob/zYClbenjx24CWi6YEemI/nPbOge9Ef9SZ+65
7QfuO+W0g0P9vI1Rh+bj/pnL/1odcB+S+dfjruE+xZXSL3iBT5I/fU6wX8dS
vun2j6vAO3/eTfHbDz6SzZnxoQT85PnK5rESeOvbt06dreAxATmz4NfgSU8X
6cMm0MujSs/97aEP8kfFZ592Aj8PfPmYvh/rqFouaYFuCgxllASBn5MsnKx1
wOPjTjBX2RPQgdjjgVu9cP8ZsnEavix5pUa9kvaHHhkp1Lmdg/8ZC1TUQ4/8
B9qf/oxAXhwvGnM/Cvd1c1zz6YssNQ0K+rwC5q8MFSkCSkiERToB0++/L+wH
5iRb9UTGIJ9//nbDN2D7roUlT2NZ6vawTFgZB57VjBQLBG6NHd03Ce16bkJf
gyNRttnP/ghnKS13U79LMEvafmdbJwcg3iLDy4xOY/6vj1aO7PeC46T6NOj1
2L8NCzqBvybH3nhwCveiYF9lgH4Nt88URWFcuX/u0xMhiN/dLaE2/7G0+2aJ
2ELsI0dSSeviNZYeR2oYq0GH05wuVThks1SUa51RUgy9lN+zvq8Cdp/ybNvd
L/DX2RYFL5txj5WlE762sNSZ/vy7NcozX8zVdfjKkuLVpPxr6Oce35ssWYv1
jxyWzfqMeEmc4Jr3Ee+PtRFig+9QniL6rKScpf8BqdhbZA==
  "], $CellContext`length$$ =
   52479, $CellContext`width$$ = 1000, $CellContext`min$$ = 
  0.056246918046867586`, $CellContext`max$$ = 
  5.483731137381128, $CellContext`location$$ = {44040, 47061, 
  3}, $CellContext`selection$$ = {1876, 46852}, $CellContext`left$$ = 
  44040., $CellContext`right$$ = 47060., $CellContext`pts$$ = {{1876., 
  0.18746565085546357`}, {46851., 4.4642951899415095`}}}, 
  DynamicBox[ToBoxes[$CellContext`location$$ = {
       Max[1, 
        Round[
         Min[$CellContext`left$$, $CellContext`right$$]]], 
       Min[$CellContext`length$$, 
        Round[Max[$CellContext`left$$, $CellContext`right$$] + 1]], 
       Max[1, 
        Round[
         Abs[($CellContext`right$$ - \
$CellContext`left$$)/$CellContext`width$$]]]}; $CellContext`selection$$ = {
       Max[1, 
        Round[
         Min[
          Part[$CellContext`pts$$, 1, 1], 
          Part[$CellContext`pts$$, 2, 1]]]], 
       Min[$CellContext`length$$, 
        Round[Max[
           Part[$CellContext`pts$$, 1, 1], 
           Part[$CellContext`pts$$, 2, 1]] + 1]]}; 
    Part[$CellContext`pts$$, 1, 2] = Part[$CellContext`data$$, 
       Round[
        Part[$CellContext`pts$$, 1, 1]]]; 
    Part[$CellContext`pts$$, 2, 2] = Part[$CellContext`data$$, 
       Round[
        Part[$CellContext`pts$$, 2, 1]]]; Grid[{{
        Slider[
         Dynamic[$CellContext`left$$], {1, $CellContext`length$$}, ImageSize -> $\
CellContext`width$$]}, {
        Slider[
         Dynamic[$CellContext`right$$], {1, $CellContext`length$$}, 
         ImageSize -> $CellContext`width$$]}, {
        Dynamic[
         Text[
          StringJoin["Location : ", 
           ToString[$CellContext`location$$]]]]}, {
        Dynamic[
         Text[
          StringJoin["Selection : ", 
           ToString[$CellContext`selection$$]]]]}, {
        Button[
        "Add Selection Crop", $CellContext`dataproc = \
$CellContext`addCrop[$CellContext`dataproc, $CellContext`i, \
$CellContext`selection$$]]}, {
        LocatorPane[
         Dynamic[$CellContext`pts$$], 
         Dynamic[
          ListPlot[
           Take[$CellContext`data$$, $CellContext`location$$], Joined -> True,
            PlotRange -> {All, {$CellContext`min$$, $CellContext`max$$}}, 
           AxesLabel -> {"Sample number", "Velocity (m/s)"}, 
           ImageSize -> $CellContext`width$$, PerformanceGoal -> "Speed", 
           DataRange -> Drop[$CellContext`location$$, -1]]]]}}], StandardForm],
   ImageSizeCache->{1006., {354.625, 360.375}}],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{
  3.5947505878624277`*^9, 3.594996240337112*^9, 3.596217281449486*^9, {
   3.596217320083355*^9, 3.59621733560658*^9}, 3.59621738601899*^9, 
   3.596217423903035*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{"dataproc", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.594740556478219*^9, 3.594740559965982*^9}, {
  3.594996923021846*^9, 3.59499692720798*^9}}],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"\<\"VINCENT LECRUBIER test 2000m toulouse             le 200m \
avant c'est arnaud 2011/10/21 09:45:42[1956,48561]\"\>", "\[Rule]", "1"}]},
     {
      RowBox[{"\<\"Etienne HUBERT Test janvier 2012 2000m d\[EAcute]but \
propre mais mou fin bien. 2012/01/25 09:01:06[1624,51719]\"\>", "\[Rule]", 
       "2"}]},
     {
      RowBox[{"\<\"ARNAUD HYBOIS test 200m et 2000m 2012/03/28 \
10:03:45[1876,46852]\"\>", "\[Rule]", "3"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.5947405603884583`*^9, 3.594740691420426*^9, 3.594741438441903*^9, 
   3.594747346195972*^9, 3.594749291882234*^9, 3.594750660931937*^9, 
   3.5947507887491817`*^9, 3.59475109394141*^9, 3.594996415506695*^9, 
   3.594996927715248*^9, 3.5949969694879*^9, {3.5962174542575893`*^9, 
   3.596217487616873*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"DumpSave", "[", 
   RowBox[{
   "\"\</Volumes/MacBookHD/Users/Vincent/Documents/Minimax/BorisNeveu/\
BorisNeveuData.mx\>\"", ",", "dataproc"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.59475156822856*^9, 3.5947516069691963`*^9}, 
   3.594979283205534*^9}],

Cell[BoxData[
 RowBox[{"<<", 
  "\"\</Volumes/MacBookHD/Users/Vincent/Documents/Minimax/BorisNeveu/\
BorisNeveuData.mx\>\""}]], "Input",
 CellChangeTimes->{{3.59496578321058*^9, 3.594965800217004*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataproc", "=", 
   RowBox[{"remove", "[", 
    RowBox[{"dataproc", ",", "1"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.594976928085443*^9, 3.594976965319262*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DumpSave", "[", 
   RowBox[{
   "\"\</Volumes/MacBookHD/Users/Vincent/Documents/Minimax/2000m \
tests/DataLight.mx\>\"", ",", "dataproc"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.594976981647223*^9, 3.5949769823503647`*^9}, 
   3.5949792767847157`*^9, {3.596217508233831*^9, 3.596217514254673*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dataproc", "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.594977235014991*^9, 3.594977238474018*^9}, {
  3.594979105465089*^9, 3.594979129270677*^9}, {3.594979202540792*^9, 
  3.594979206546414*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"VINCENT LECRUBIER test 2000m toulouse             le 200m \
avant c'est arnaud 2011/10/21 09:45:42[1956,48561]\"\>", "\[Rule]", "1"}], 
   ",", 
   RowBox[{"\<\"Etienne HUBERT Test janvier 2012 2000m d\[EAcute]but propre \
mais mou fin bien. 2012/01/25 09:01:06[1624,51719]\"\>", "\[Rule]", "2"}], 
   ",", 
   RowBox[{"\<\"ARNAUD HYBOIS test 200m et 2000m 2012/03/28 \
10:03:45[1876,46852]\"\>", "\[Rule]", "3"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.594977238910687*^9, 3.5949778552701397`*^9, {3.594979093937426*^9, 
   3.5949791296419783`*^9}, {3.594979196086648*^9, 3.594979207049597*^9}, 
   3.596217542145447*^9}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["V2", "Section",
 CellChangeTimes->{{3.60906939010465*^9, 3.609069398524007*^9}}],

Cell["AcyclicGraphQ", "Text",
 CellChangeTimes->{{3.6090694035818243`*^9, 3.6090694133493137`*^9}, 
   3.6090748045951157`*^9}],

Cell["BreadthFirstScan", "Text",
 CellChangeTimes->{{3.6090695274619207`*^9, 3.609069527462709*^9}, 
   3.609074804596569*^9}],

Cell["caching :", "Text",
 CellChangeTimes->{{3.609069690099655*^9, 3.60906969105121*^9}, 
   3.609074804597178*^9}],

Cell["leonid shiffrin caching on stackexchange", "Text",
 CellChangeTimes->{{3.609070931274189*^9, 3.6090709404769278`*^9}, 
   3.609074804597941*^9}],

Cell["f[arg_] := f[arg] = expensivef[arg]", "Text",
 CellChangeTimes->{{3.609069672199378*^9, 3.60906968600156*^9}, 
   3.609074804598764*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"computings", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"raw", "\[Rule]", 
      RowBox[{"parse", "[", "csvfilename", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"time", "\[Rule]", " ", 
      RowBox[{"data", "[", 
       RowBox[{"raw", ",", "\"\<Time\>\""}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"forwardacceleration", "\[Rule]", " ", 
      RowBox[{"derivate", "[", "forwardvelocity", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"upacceleration", "\[Rule]", " ", 
      RowBox[{"applyhighpassfilter", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"data", "[", 
          RowBox[{"raw", ",", "\"\<Up\>\""}], "]"}], "*", "9.81"}], ",", 
        "600"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"rightacceleration", "\[Rule]", " ", 
      RowBox[{"applyhighpassfilter", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"data", "[", 
          RowBox[{"raw", ",", "\"\<Sideways\>\""}], "]"}], "*", "9.81"}], ",",
         "600"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"forwardvelocity", "\[Rule]", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"applyhighpassfilter", "[", 
         RowBox[{
          RowBox[{"integrate", "[", 
           RowBox[{"applyhighpassfilter", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"data", "[", 
               RowBox[{"raw", ",", "\"\<Forward\>\""}], "]"}], "*", "9.81"}], 
             ",", "60"}], "]"}], "]"}], ",", "60"}], "]"}], "+", 
        RowBox[{"applylowpassfilter", "[", 
         RowBox[{
          RowBox[{"applylowpassfilter", "[", 
           RowBox[{
            RowBox[{"data", "[", 
             RowBox[{"raw", ",", "\"\<Vel(Dpr)\>\""}], "]"}], ",", "60"}], 
           "]"}], ",", "60"}], "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"upvelocity", "\[Rule]", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"applyhighpassfilter", "[", 
         RowBox[{
          RowBox[{"integrate", "[", "upacceleration", "]"}], ",", "60"}], 
         "]"}], ")"}], "+", 
       RowBox[{"applylowpassfilter", "[", 
        RowBox[{
         RowBox[{"derivate", "[", 
          RowBox[{"data", "[", 
           RowBox[{"raw", ",", "\"\<Up(m)\>\""}], "]"}], "]"}], ",", "60"}], 
        "]"}]}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"rightvelocity", "\[Rule]", " ", 
      RowBox[{"applyhighpassfilter", "[", 
       RowBox[{
        RowBox[{"integrate", "[", "rightacceleration", "]"}], ",", "60"}], 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"forwardposition", "\[Rule]", " ", 
      RowBox[{"integrate", "[", "forwardvelocity", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"upposition", "\[Rule]", " ", 
      RowBox[{"integrate", "[", "upvelocity", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"rightposition", "\[Rule]", " ", 
      RowBox[{"integrate", "[", "rightvelocity", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"distancecorrected", "\[Rule]", " ", 
      RowBox[{"normalizeoffset", "[", "forwardposition", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"pitchacceleration", "\[Rule]", 
      RowBox[{"derivate", "[", "pitchvelocity", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"yawacceleration", "\[Rule]", " ", 
      RowBox[{"derivate", "[", "yawvelocity", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"rollacceleration", "\[Rule]", 
      RowBox[{"derivate", "[", "rollvelocity", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"pitchvelocity", "\[Rule]", 
      RowBox[{
       RowBox[{"data", "[", 
        RowBox[{"raw", ",", "\"\<Gyr2(d/s)\>\""}], "]"}], "*", 
       RowBox[{"\[Pi]", "/", "180"}]}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"yawvelocity", "\[Rule]", 
      RowBox[{
       RowBox[{"data", "[", 
        RowBox[{"raw", ",", "\"\<Gyr3(d/s)\>\""}], "]"}], "*", 
       RowBox[{"\[Pi]", "/", "180"}]}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"rollvelocity", "\[Rule]", 
      RowBox[{
       RowBox[{"data", "[", 
        RowBox[{"raw", ",", "\"\<Gyr1(d/s)\>\""}], "]"}], "*", 
       RowBox[{"\[Pi]", "/", "180"}]}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"pitch", "\[Rule]", " ", 
      RowBox[{
       RowBox[{"data", "[", 
        RowBox[{"raw", ",", "\"\<Pitch(deg)\>\""}], "]"}], "*", 
       RowBox[{"\[Pi]", "/", "180"}]}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"yaw", "\[Rule]", " ", 
      RowBox[{
       RowBox[{"data", "[", 
        RowBox[{"raw", ",", "\"\<Yaw(deg)\>\""}], "]"}], "*", 
       RowBox[{"\[Pi]", "/", "180"}]}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"roll", "\[Rule]", " ", 
      RowBox[{
       RowBox[{"data", "[", 
        RowBox[{"raw", ",", "\"\<Roll(deg)\>\""}], "]"}], "*", 
       RowBox[{"\[Pi]", "/", "180"}]}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"heading", "\[Rule]", 
      RowBox[{
       RowBox[{"data", "[", 
        RowBox[{"raw", ",", "\"\<Heading\>\""}], "]"}], "*", 
       RowBox[{"\[Pi]", "/", "180"}]}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"drift", "\[Rule]", " ", 
      RowBox[{
       RowBox[{"applylowpassfilter", "[", 
        RowBox[{
         RowBox[{"applyhighpassfilter", "[", 
          RowBox[{"heading", ",", "300"}], "]"}], ",", "20"}], "]"}], "-", 
       RowBox[{"applyhighpassfilter", "[", 
        RowBox[{"yaw", ",", "300"}], "]"}]}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"watervelocity", "\[Rule]", " ", 
      RowBox[{"forwardvelocity", "-", 
       RowBox[{"waterflowvelocity", "*", 
        RowBox[{"Cos", "[", 
         RowBox[{"heading", "-", 
          RowBox[{"waterflowdirection", "*", 
           RowBox[{"\[Pi]", "/", "180"}]}]}], "]"}]}]}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"airvelocity", "\[Rule]", " ", 
      RowBox[{"forwardvelocity", "-", 
       RowBox[{"airflowvelocity", "*", 
        RowBox[{"Cos", "[", 
         RowBox[{"heading", "-", 
          RowBox[{"airflowdirection", "*", 
           RowBox[{"\[Pi]", "/", "180"}]}]}], "]"}]}]}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"airdensity", "\[Rule]", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "-", "airmoisture"}], ")"}], "*", "0.028964", "*", 
          "airpressure"}], " ", "+", " ", 
         RowBox[{"airmoisture", "*", "0.018016", "*", "airpressure"}]}], 
        ")"}], "/", 
       RowBox[{"(", 
        RowBox[{"8.314", "*", 
         RowBox[{"(", 
          RowBox[{"273", "+", "airtemperature"}], ")"}]}], ")"}]}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"waterdensity", "\[Rule]", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"999.842594", "+", 
         RowBox[{"0.06793952", "*", "watertemperature"}], "-", 
         RowBox[{"0.009095290", "*", 
          RowBox[{"watertemperature", "^", "2"}]}], "+", 
         RowBox[{"0.0001001685", "*", 
          RowBox[{"watertemperature", "^", "3"}]}], "-", 
         RowBox[{"0.000001120083", "*", 
          RowBox[{"watertemperature", "^", "4"}]}], "+", 
         RowBox[{"0.000000006536332", "*", 
          RowBox[{"watertemperature", "^", "5"}]}]}], ")"}], "+", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"0.824493", "-", 
          RowBox[{"0.0040899", "*", "watertemperature"}], "+", 
          RowBox[{"0.000076438", "*", 
           RowBox[{"watertemperature", "^", "2"}]}], "-", 
          RowBox[{"0.00000082467", "*", 
           RowBox[{"watertemperature", "^", "3"}]}], "+", 
          RowBox[{"0.0000000053875", "*", 
           RowBox[{"watertemperature", "^", "4"}]}]}], ")"}], "*", 
        "watersalinity"}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "0.00572466"}], "+", 
          RowBox[{"0.00010227", "*", "watertemperature"}], "-", 
          RowBox[{"0.0000016546", "*", 
           RowBox[{"watertemperature", "^", "2"}]}]}], ")"}], "*", 
        RowBox[{"watersalinity", "^", 
         RowBox[{"(", 
          RowBox[{"3", "/", "2"}], ")"}]}]}], "+", 
       RowBox[{"0.00048314", "*", 
        RowBox[{"watersalinity", "^", "2"}]}]}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"waterfrictionforce", "\[Rule]", " ", 
      RowBox[{"0.5", "*", "waterdensity", "*", "watercx", "*", 
       RowBox[{"watervelocity", "^", "2"}]}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"airfrictionforce", "\[Rule]", " ", 
      RowBox[{"0.5", "*", "airdensity", "*", "aircx", "*", 
       RowBox[{"airvelocity", "^", "2"}]}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"totalfrictionforce", "\[Rule]", " ", 
      RowBox[{"waterfrictionforce", "+", "airfrictionforce"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"inertialforce", "\[Rule]", " ", 
      RowBox[{"forwardacceleration", "*", "mass"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"totalforce", "\[Rule]", 
      RowBox[{"inertialforce", "+", "totalfrictionforce"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"waterfrictionpower", "\[Rule]", " ", 
      RowBox[{"forwardvelocity", "*", "waterfrictionforce"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"airfrictionpower", "\[Rule]", " ", 
      RowBox[{"forwardvelocity", "*", "airfrictionforce"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"totalfrictionpower", "\[Rule]", " ", 
      RowBox[{"forwardvelocity", "*", "totalfrictionforce"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"inertialpower", "\[Rule]", " ", 
      RowBox[{"forwardvelocity", "*", "inertialforce"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"totalpower", "\[Rule]", " ", 
      RowBox[{"forwardvelocity", "*", "totalforce"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"waterfrictionenergy", "\[Rule]", " ", 
      RowBox[{"integrate", "[", "waterfrictionpower", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"airfrictionenergy", "\[Rule]", " ", 
      RowBox[{"integrate", "[", "airfrictionpower", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"totalfrictionenergy", "\[Rule]", " ", 
      RowBox[{"waterfrictionenergy", "+", "airfrictionenergy"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"kineticenergy", "\[Rule]", " ", 
      RowBox[{"0.5", "*", "mass", "*", 
       RowBox[{"forwardvelocity", "^", "2"}]}]}], ",", "\[IndentingNewLine]", 
     
     RowBox[{"totalenergy", "\[Rule]", " ", 
      RowBox[{"kineticenergy", "+", "totalfrictionenergy"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"strokeposition", "\[Rule]", 
      RowBox[{"strokepositionsoffset", "[", 
       RowBox[{
        RowBox[{"strokepositions", "[", 
         RowBox[{"data", "[", 
          RowBox[{"raw", ",", "\"\<StkMark\>\""}], "]"}], "]"}], ",", "0.55", 
        ",", "length"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"strokemark", "\[Rule]", " ", 
      RowBox[{"markevents", "[", 
       RowBox[{"strokeposition", ",", "length"}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"length", "\[Rule]", " ", 
      RowBox[{"data", "[", 
       RowBox[{"raw", ",", "\"\<Length\>\""}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"stroketotal", "\[Rule]", 
      RowBox[{"Hold", "[", " ", 
       RowBox[{"Accumulate", "[", "strokemark", "]"}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"strokephase", "\[Rule]", 
      RowBox[{"Hold", "[", 
       RowBox[{"strokedatatotimedata", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{"j", ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "1", ",", 
             RowBox[{"stroketotal", "[", 
              RowBox[{"[", 
               RowBox[{"-", "1"}], "]"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", "0", ",", "1", ",", 
             RowBox[{"1", "/", "599"}]}], "}"}]}], "]"}], ",", 
         "strokeposition", ",", "length"}], "]"}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"strokerate", "\[Rule]", " ", 
      RowBox[{"data", "[", 
       RowBox[{"raw", ",", "\"\<Stroke\>\""}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"distanceperstroke", "\[Rule]", " ", 
      RowBox[{"60", "*", 
       RowBox[{"forwardvelocity", "/", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Max", "[", 
            RowBox[{"#", ",", "10"}], "]"}], "&"}], ",", "strokerate"}], 
         "]"}]}]}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"forwardvelocitystroke", "\[Rule]", " ", 
      RowBox[{"timedatatostrokedata", "[", 
       RowBox[{"forwardvelocity", ",", "strokeposition"}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"forwardaccelerationstroke", "\[Rule]", " ", 
      RowBox[{"timedatatostrokedata", "[", 
       RowBox[{"forwardacceleration", ",", "strokeposition"}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"forwardaccelerationstrokenormalized", "\[Rule]", 
      RowBox[{"normalizeall", "[", "forwardaccelerationstroke", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"forwardaccelerationstrokemean", "\[Rule]", 
      RowBox[{"Mean", "[", "forwardaccelerationstrokenormalized", "]"}]}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"forwardaccelerationstrokegarbage", "\[Rule]", " ", 
      RowBox[{"Hold", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"N", "[", 
          RowBox[{"Correlation", "[", 
           RowBox[{
            RowBox[{"forwardaccelerationstrokenormalized", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", 
            "forwardaccelerationstrokemean"}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{
           "Length", "[", "forwardaccelerationstrokenormalized", "]"}]}], 
          "}"}]}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"forwardaccelerationgarbage", "\[Rule]", " ", 
      RowBox[{"applylowpassfilter", "[", 
       RowBox[{"strokeaggregationtotimedata", "[", 
        RowBox[{
        "forwardaccelerationstrokegarbage", ",", "strokeposition", ",", 
         "length", ",", "1"}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"waterflowvelocity", "\[Rule]", " ", 
      RowBox[{"data", "[", 
       RowBox[{"raw", ",", "\"\<Water Flow velocity\>\""}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"waterflowdirection", "\[Rule]", " ", 
      RowBox[{"data", "[", 
       RowBox[{"raw", ",", "\"\<Water Flow direction\>\""}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"airflowvelocity", "\[Rule]", " ", 
      RowBox[{"data", "[", 
       RowBox[{"raw", ",", "\"\<name\>\""}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"airflowdirection", "\[Rule]", " ", 
      RowBox[{"data", "[", 
       RowBox[{"raw", ",", "\"\<name\>\""}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"airmoisture", "\[Rule]", " ", 
      RowBox[{"data", "[", 
       RowBox[{"raw", ",", "\"\<name\>\""}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"airpressure", "\[Rule]", " ", 
      RowBox[{"data", "[", 
       RowBox[{"raw", ",", "\"\<name\>\""}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"airtemperature", "\[Rule]", " ", 
      RowBox[{"data", "[", 
       RowBox[{"raw", ",", "\"\<name\>\""}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"watersalinity", "\[Rule]", " ", 
      RowBox[{"data", "[", 
       RowBox[{"raw", ",", "\"\<name\>\""}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"watertemperature", "\[Rule]", " ", 
      RowBox[{"data", "[", 
       RowBox[{"raw", ",", "\"\<name\>\""}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"watercx", "\[Rule]", " ", 
      RowBox[{"data", "[", 
       RowBox[{"raw", ",", "\"\<name\>\""}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"aircx", "\[Rule]", " ", 
      RowBox[{"data", "[", 
       RowBox[{"raw", ",", "\"\<name\>\""}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"mass", "\[Rule]", " ", 
      RowBox[{"data", "[", 
       RowBox[{"raw", ",", "\"\<name\>\""}], "]"}]}]}], "\[IndentingNewLine]",
     "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"graph", "=", 
   RowBox[{"Graph", "[", 
    RowBox[{
     RowBox[{"DeleteDuplicates", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{"x", ",", "\[IndentingNewLine]", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{"Function", "[", 
              RowBox[{"z", ",", 
               RowBox[{"z", "\[DirectedEdge]", 
                RowBox[{"First", "[", "x", "]"}]}]}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Select", "[", 
              RowBox[{
               RowBox[{"Level", "[", 
                RowBox[{
                 RowBox[{"Last", "[", "x", "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"-", "1"}], "}"}]}], "]"}], ",", 
               RowBox[{"Function", "[", 
                RowBox[{"y", ",", 
                 RowBox[{"And", "[", 
                  RowBox[{
                   RowBox[{"MatchQ", "[", 
                    RowBox[{"y", ",", "_Symbol"}], "]"}], ",", 
                   RowBox[{"Not", "[", 
                    RowBox[{"NumericQ", "[", "y", "]"}], "]"}]}], "]"}]}], 
                "]"}]}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
         "computings"}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"VertexLabels", "\[Rule]", 
      RowBox[{"Placed", "[", 
       RowBox[{"\"\<Name\>\"", ",", "Center"}], "]"}]}], ",", 
     RowBox[{"VertexSize", "\[Rule]", "Large"}], ",", 
     RowBox[{"VertexStyle", "\[Rule]", "White"}], ",", 
     RowBox[{"EdgeStyle", "\[Rule]", "Black"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "1600"}], ",", 
     RowBox[{"GraphLayout", "\[Rule]", "\"\<LayeredDigraphEmbedding\>\""}]}], 
    "]"}]}], 
  RowBox[{"(*", 
   RowBox[{"GraphLayout", "\[Rule]", "\"\<SpringElectricalEmbedding\>\""}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"AcyclicGraphQ", "[", "graph", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"BreadthFirstScan", "[", 
   RowBox[{"graph", ",", "raw", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<PrevisitVertex\>\"", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"val", "[", "#", "]"}], "=", "#"}], ")"}], "&"}], ")"}]}], 
     "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"log", "=", 
  RowBox[{"val", "/@", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", "First", ")"}], "/@", "computings"}], 
    ")"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"DuplicateFreeQ", "[", "log", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Length", "[", "log", "]"}], "\[Equal]", 
  RowBox[{"Length", "[", "computings", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Extract", "[", 
  RowBox[{
   RowBox[{"VertexList", "[", "graph", "]"}], ",", 
   RowBox[{"Position", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"VertexInDegree", "[", 
         RowBox[{"graph", ",", "#"}], "]"}], "&"}], "/@", 
       RowBox[{"VertexList", "[", "graph", "]"}]}], ")"}], ",", "0"}], 
    "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.609072424740052*^9, 3.609072521879057*^9}, {
   3.60907311285853*^9, 3.609073128697493*^9}, 3.6090732454377947`*^9, {
   3.6090733028600063`*^9, 3.609073338084174*^9}, {3.609073425702183*^9, 
   3.6090734417734327`*^9}, {3.609073571273686*^9, 3.6090735739533253`*^9}, {
   3.609073664374693*^9, 3.609073665351796*^9}, {3.609073718004854*^9, 
   3.609073721644053*^9}, {3.609073754242906*^9, 3.609073802744258*^9}, {
   3.609074603132992*^9, 3.6090746170272903`*^9}, {3.609074751216612*^9, 
   3.609074789502989*^9}, {3.609075792497924*^9, 3.609075961838724*^9}, {
   3.609076014817623*^9, 3.609076036091908*^9}, {3.609076086210023*^9, 
   3.609076208915656*^9}, {3.609076250548753*^9, 3.609076279752048*^9}, {
   3.609076320378581*^9, 3.609076320753295*^9}, {3.609076353056217*^9, 
   3.609076423413394*^9}, {3.60907657714721*^9, 3.6090765953429832`*^9}, {
   3.6090766484306107`*^9, 3.609076811712318*^9}, {3.609076849057296*^9, 
   3.609076894913113*^9}, {3.60907700036523*^9, 3.6090770898143673`*^9}, {
   3.609077121190147*^9, 3.6090771401591377`*^9}, {3.60907718868504*^9, 
   3.609077339525383*^9}, {3.609077371052189*^9, 3.609077583334612*^9}, {
   3.6090776271356173`*^9, 3.60907763109205*^9}, {3.609077663301218*^9, 
   3.609077830242975*^9}, {3.609077893046788*^9, 3.60907797427446*^9}, {
   3.609078006616969*^9, 3.609078052087647*^9}, {3.609078089414173*^9, 
   3.609078202384576*^9}, {3.609078238153841*^9, 3.609078268128531*^9}, {
   3.609078374716276*^9, 3.609078455634407*^9}, {3.609078490031233*^9, 
   3.6090785150804443`*^9}, {3.609078588026979*^9, 3.609079040595858*^9}, {
   3.6090791377213*^9, 3.6090791847598124`*^9}, {3.609079250077959*^9, 
   3.609079419382395*^9}, {3.609079452773246*^9, 3.60907948504294*^9}, {
   3.609083339381324*^9, 3.609083377037363*^9}, {3.6090836164602203`*^9, 
   3.609083618754072*^9}, {3.609153324036278*^9, 3.6091533638713493`*^9}, {
   3.6091554445485907`*^9, 3.609155444861279*^9}, {3.6091554803774643`*^9, 
   3.6091555115447073`*^9}, {3.60915639729976*^9, 3.6091563978594313`*^9}, {
   3.609156491408601*^9, 3.609156569964179*^9}, {3.6091570508970957`*^9, 
   3.6091571211937*^9}, {3.609157178385062*^9, 3.609157257462254*^9}, {
   3.609158939766629*^9, 3.609158943463718*^9}, {3.609158993861784*^9, 
   3.609159014410726*^9}, {3.6091590509582663`*^9, 3.6091590989834423`*^9}, {
   3.6091591771288757`*^9, 3.6091591791513233`*^9}, {3.609160071063678*^9, 
   3.60916009704557*^9}, {3.609160972375123*^9, 3.609160975310749*^9}}],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{$CellContext`csvfilename, $CellContext`raw, $CellContext`time, \
$CellContext`forwardvelocity, $CellContext`forwardacceleration, \
$CellContext`upacceleration, $CellContext`rightacceleration, \
$CellContext`upvelocity, $CellContext`rightvelocity, \
$CellContext`forwardposition, $CellContext`upposition, \
$CellContext`rightposition, $CellContext`distancecorrected, \
$CellContext`pitchvelocity, $CellContext`pitchacceleration, \
$CellContext`yawvelocity, $CellContext`yawacceleration, \
$CellContext`rollvelocity, $CellContext`rollacceleration, $CellContext`pitch, \
$CellContext`yaw, $CellContext`roll, $CellContext`heading, \
$CellContext`drift, $CellContext`watervelocity, \
$CellContext`waterflowvelocity, $CellContext`waterflowdirection, \
$CellContext`airvelocity, $CellContext`airflowvelocity, \
$CellContext`airflowdirection, $CellContext`airmoisture, \
$CellContext`airdensity, $CellContext`airpressure, \
$CellContext`airtemperature, $CellContext`watersalinity, \
$CellContext`waterdensity, $CellContext`watertemperature, \
$CellContext`watercx, $CellContext`waterfrictionforce, $CellContext`aircx, \
$CellContext`airfrictionforce, $CellContext`totalfrictionforce, \
$CellContext`inertialforce, $CellContext`mass, $CellContext`totalforce, \
$CellContext`waterfrictionpower, $CellContext`airfrictionpower, \
$CellContext`totalfrictionpower, $CellContext`inertialpower, \
$CellContext`totalpower, $CellContext`waterfrictionenergy, \
$CellContext`airfrictionenergy, $CellContext`totalfrictionenergy, \
$CellContext`kineticenergy, $CellContext`totalenergy, \
$CellContext`strokeposition, $CellContext`length, $CellContext`strokemark, \
$CellContext`stroketotal, $CellContext`j, $CellContext`strokephase, \
$CellContext`i, $CellContext`strokerate, $CellContext`distanceperstroke, \
$CellContext`forwardvelocitystroke, $CellContext`forwardaccelerationstroke, \
$CellContext`forwardaccelerationstrokenormalized, \
$CellContext`forwardaccelerationstrokemean, \
$CellContext`forwardaccelerationstrokegarbage, \
$CellContext`forwardaccelerationgarbage}, {{{1, 2}, {2, 3}, {4, 5}, {2, 6}, {
       2, 7}, {2, 4}, {6, 8}, {2, 8}, {7, 9}, {4, 10}, {8, 11}, {9, 12}, {10, 
       13}, {14, 15}, {16, 17}, {18, 19}, {2, 14}, {2, 16}, {2, 18}, {2, 
       20}, {2, 21}, {2, 22}, {2, 23}, {21, 24}, {23, 24}, {4, 25}, {26, 
       25}, {23, 25}, {27, 25}, {4, 28}, {29, 28}, {23, 28}, {30, 28}, {31, 
       32}, {33, 32}, {34, 32}, {35, 36}, {37, 36}, {38, 39}, {36, 39}, {25, 
       39}, {40, 41}, {32, 41}, {28, 41}, {41, 42}, {39, 42}, {5, 43}, {44, 
       43}, {43, 45}, {42, 45}, {4, 46}, {39, 46}, {41, 47}, {4, 47}, {4, 
       48}, {42, 48}, {4, 49}, {43, 49}, {4, 50}, {45, 50}, {46, 51}, {47, 
       52}, {52, 53}, {51, 53}, {4, 54}, {44, 54}, {54, 55}, {53, 55}, {2, 
       56}, {57, 56}, {56, 58}, {57, 58}, {2, 57}, {58, 59}, {60, 61}, {62, 
       61}, {59, 61}, {56, 61}, {57, 61}, {2, 63}, {4, 64}, {63, 64}, {4, 
       65}, {56, 65}, {5, 66}, {56, 66}, {66, 67}, {67, 68}, {67, 69}, {62, 
       69}, {68, 69}, {69, 70}, {56, 70}, {57, 70}, {2, 26}, {2, 27}, {2, 
       29}, {2, 30}, {2, 31}, {2, 33}, {2, 34}, {2, 35}, {2, 37}, {2, 38}, {2,
        40}, {2, 44}}, Null}, {EdgeStyle -> {
         GrayLevel[0]}, GraphLayout -> "LayeredDigraphEmbedding", ImageSize -> 
       1600, VertexLabels -> {
         Placed["Name", Center]}, VertexSize -> {Large}, VertexStyle -> {
         GrayLevel[1]}}]], Typeset`boxes, Typeset`boxes$s2d = 
    GraphicsGroupBox[{{
       Arrowheads[0.011167416171836985`], 
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$2", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$3", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$4", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$6", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$7", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         BezierCurveBox[{
           DynamicLocation[
           "VertexID$2", Automatic, Center], {-0.6752959026542432, 
           6.893230816213777}, {-1.0977610932902735`, 
           6.8264360031476645`}, {-1.5767711101312532`, 
           6.750701042632885}, {-2.112325953177182, 
           6.666025934669439}, {-2.7044256224280594`, 
           6.572410679257326}, {-3.353070117883887, 
           6.469855276396544}, {-4.0582594395446625`, 
           6.358359726087096}, {-4.819993587410388, 
           6.2379240283289805`}, {-5.1539704547064655`, 
           6.183051084111786}, {-5.487089177541842, 
           6.124176264050864}, {-5.819349755916513, 
           6.061299568146214}, {-6.150752189830481, 
           5.994420996397833}, {-6.4812964792837455`, 
           5.923540548805724}, {-6.8109826242763045`, 
           5.848658225369887}, {-7.139810624808161, 
           5.769774026090319}, {-7.4677804808793145`, 
           5.686887950967025}, {-7.794892192489764, 5.6}, {-8.112500314109303,
            5.513580246913579}, {-8.411959400207724, 
           5.432098765432099}, {-8.693269450785033, 
           5.355555555555555}, {-8.956430465841223, 
           5.28395061728395}, {-9.201442445376294, 
           5.217283950617284}, {-9.42830538939025, 
           5.155555555555555}, {-9.63701929788309, 5.098765432098765}, 
           DynamicLocation["VertexID$8", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$14", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$16", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$18", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$20", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$21", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$22", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$23", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$26", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$27", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$29", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$30", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$31", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$33", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$34", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$35", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$37", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         BezierCurveBox[{
           DynamicLocation["VertexID$2", Automatic, Center], {
           0.7490041227908824, 6.892999411131572}, {1.218592609167418, 
           6.825915341712703}, {1.7515720455323391`, 6.749775422304065}, {
           2.347942431885647, 6.6645796529056565`}, {3.0077037682273406`, 
           6.5703280335174785`}, {3.730856054557421, 6.4670205641395295`}, {
           4.517399290875887, 6.354657244771813}, {5.367333477182739, 
           6.233238075414325}, {5.72974497100231, 6.1793486027965026`}, {
           6.091349883818558, 6.12134155179385}, {6.45214821563148, 
           6.059216922406367}, {6.812139966441075, 5.992974714634051}, {
           7.171325136247345, 5.922614928476904}, {7.529703725050289, 
           5.848137563934925}, {7.887275732849908, 5.769542621008115}, {
           8.2440411596462, 5.686830099696474}, {8.600000005439167, 5.6}, {
           8.945679017527935, 5.513580246913579}, {9.271604943211631, 
           5.432098765432099}, {9.577777782490257, 5.355555555555555}, {
           9.864197535363806, 5.28395061728395}, {10.130864201832285`, 
           5.217283950617284}, {10.37777778189569, 5.155555555555555}, {
           10.604938275554023`, 5.098765432098765}, 
           DynamicLocation["VertexID$38", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$40", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$44", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         BezierCurveBox[{
           DynamicLocation[
           "VertexID$2", Automatic, Center], {-0.2296118822502105, 
           6.901234567901235}, {-0.36163871454578933`, 
           6.844444444444445}, {-0.5051461409540272, 
           6.782716049382716}, {-0.6601341614749242, 
           6.716049382716051}, {-0.8266027761084801, 
           6.644444444444446}, {-1.004551984854695, 
           6.567901234567902}, {-1.193981787713569, 
           6.4864197530864205`}, {-1.3948921846851021`, 
           6.4}, {-1.6021214703842435`, 
           6.312768132062376}, {-1.8105079394259433`, 
           6.228850306027283}, {-2.020051591810201, 
           6.148246521894723}, {-2.2307524275370163`, 
           6.070956779664693}, {-2.4426104466063894`, 
           5.996981079337192}, {-2.6556256490183205`, 
           5.926319420912224}, {-2.8697980347728094`, 
           5.858971804389785}, {-3.085127603869857, 
           5.794938229769878}, {-3.3016143563094618`, 
           5.734218697052501}, {-3.7227499241791753`, 
           5.619629587794568}, {-4.113556756990969, 
           5.513292792044105}, {-4.474034854744842, 
           5.415208309801112}, {-4.804184217440794, 
           5.325376141065586}, {-5.1040048450788245`, 
           5.243796285837531}, {-5.373496737658936, 
           5.170468744116944}, {-5.612659895181126, 5.1053935159038275`}, 
           DynamicLocation["VertexID$56", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$57", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$63", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$4", Automatic, Center], 
          DynamicLocation["VertexID$5", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$4", Automatic, Center], 
          DynamicLocation["VertexID$10", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$4", Automatic, Center], 
          DynamicLocation["VertexID$25", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$4", Automatic, Center], 
          DynamicLocation["VertexID$28", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         BezierCurveBox[{
           DynamicLocation["VertexID$4", Automatic, Center], {
           0.45491076517329543`, 5.88627230864331}, {0.7568825552487615, 
           5.810779361114115}, {1.1085319502530326`, 5.722867012351018}, {
           1.509858950186109, 5.62253526235402}, {1.9608635550479905`, 
           5.509784111123123}, {2.4615457648386774`, 5.384613558658325}, {
           3.011905579558169, 5.247023604959626}, {3.611942999206466, 
           5.097014250027026}, {3.693387061123748, 5.071714962984316}, {
           3.7652494690733684`, 5.038934546312645}, {3.8275302230553283`, 
           4.998673000012013}, {3.880229323069625, 4.9509303240824165`}, {
           3.923346769116261, 4.895706518523856}, {3.9568825611952336`, 
           4.833001583336336}, {3.980836699306545, 4.762815518519853}, {
           3.9952091834501955`, 4.685148324074408}, {4.000000020808536, 
           4.3999999999999995`}, {4.000000023945064, 4.31111111111111}, {
           4.000000026970333, 4.222222222222222}, {4.000000029884343, 
           4.133333333333334}, {4.000000032687094, 4.044444444444444}, {
           4.000000035378585, 3.9555555555555557`}, {4.000000037958818, 
           3.866666666666667}, {4.000000040427792, 3.7777777777777777`}, {
           4.000000042785507, 3.688888888888889}, {4.000000045031962, 3.6}, {
           4.000000047161931, 3.51358024691358}, {4.000000049170189, 
           3.432098765432099}, {4.000000051056734, 3.355555555555556}, {
           4.000000052821566, 3.283950617283951}, {4.000000054464685, 
           3.217283950617284}, {4.000000055986093, 3.155555555555556}, {
           4.000000057385787, 3.0987654320987654`}, 
           DynamicLocation["VertexID$46", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         BezierCurveBox[{
           DynamicLocation["VertexID$4", Automatic, Center], {
           0.5732230975624878, 5.8853553804472405`}, {0.9564186364271601, 
           5.808716272672957}, {1.4040035019503772`, 5.7191992995667364`}, {
           1.9159776941321398`, 5.616804461128581}, {2.492341212972447, 
           5.5015317573584905`}, {3.1330940584712996`, 5.373381188256463}, {
           3.838236230628697, 5.232352753822501}, {4.60776772944464, 
           5.078446454056602}, {4.690088082672849, 5.0570441118471905`}, {
           4.762723688901432, 5.027702175910783}, {4.8256745481303875`, 
           4.9904206462473795`}, {4.8789406603597145`, 4.945199522856976}, {
           4.922522025589415, 4.892038805739576}, {4.9564186438194895`, 
           4.830938494895178}, {4.980630515049936, 4.761898590323783}, {
           4.995157639280755, 4.684919092025391}, {5.00000002490755, 4.4}, {
           5.000000028546627, 4.311111111111112}, {5.000000032001104, 
           4.222222222222222}, {5.00000003527098, 4.133333333333335}, {
           5.000000038356253, 4.044444444444444}, {5.000000041256924, 
           3.9555555555555557`}, {5.000000043972994, 3.866666666666667}, {
           5.0000000465044625`, 3.7777777777777777`}, {5.00000004885133, 
           3.688888888888889}, {5.000000051013595, 3.6}, {5.00000005302606, 
           3.51358024691358}, {5.000000054923528, 3.432098765432099}, {
           5.000000056705998, 3.355555555555556}, {5.00000005837347, 
           3.283950617283951}, {5.0000000599259415`, 3.217283950617284}, {
           5.0000000613634175`, 3.155555555555556}, {5.000000062685895, 
           3.0987654320987654`}, 
           DynamicLocation["VertexID$47", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         BezierCurveBox[{
           DynamicLocation["VertexID$4", Automatic, Center], {
           0.21936933909774062`, 5.890315330285963}, {0.3602476799601633, 
           5.819876159810082}, {0.5219218016345472, 5.739039098921627}, {
           0.7043917041208922, 5.647804147620598}, {0.9076573874191984, 
           5.546171305906994}, {1.1317188515294658`, 5.434140573780816}, {
           1.3765760964516942`, 5.311711951242064}, {1.642229122185884, 
           5.178885438290736}, {1.7173168371050422`, 5.136403309266754}, {
           1.7835707034826995`, 5.088461561435136}, {1.840990721318855, 
           5.035060194795883}, {1.889576890613509, 4.976199209348993}, {
           1.9293292113666622`, 4.911878605094467}, {1.960247683578314, 
           4.8420983820323045`}, {1.9823323072484644`, 4.766858540162505}, {
           1.9955830823771137`, 4.686159079485071}, {2.0000000141761545`, 
           4.4}, {2.000000016442097, 4.311111111111112}, {2.0000000186071314`,
            4.222222222222222}, {2.0000000206712567`, 4.133333333333335}, {
           2.0000000226344734`, 4.044444444444444}, {2.0000000244967815`, 
           3.9555555555555557`}, {2.0000000262581805`, 3.866666666666667}, {
           2.000000027918671, 3.7777777777777777`}, {2.0000000294782523`, 
           3.688888888888889}, {2.000000034105417, 3.4}, {2.0000000355036303`,
            3.3111111111111104`}, {2.000000036881832, 3.2222222222222223`}, {
           2.0000000382400223`, 3.133333333333334}, {2.0000000395782007`, 
           3.0444444444444443`}, {2.000000040896368, 2.9555555555555557`}, {
           2.000000042194524, 2.8666666666666667`}, {2.000000043472668, 
           2.7777777777777777`}, {2.0000000447308013`, 2.688888888888889}, {
           2.000000045968923, 2.5999999999999996`}, {2.0000000471629242`, 
           2.5135802469135795`}, {2.000000048288698, 2.432098765432099}, {
           2.000000049346242, 2.355555555555556}, {2.0000000503355575`, 
           2.283950617283951}, {2.0000000512566443`, 2.2172839506172837`}, {
           2.000000052109503, 2.155555555555556}, {2.0000000528941326`, 
           2.0987654320987654`}, 
           DynamicLocation["VertexID$48", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         BezierCurveBox[{
           DynamicLocation[
           "VertexID$4", Automatic, Center], {-3.9775515665777345`*^-10, 
           5.901234567901235}, {-5.165121466335322*^-10, 
           5.844444444444445}, {-6.455958313897918*^-10, 
           5.782716049382716}, {-7.850062109265522*^-10, 
           5.71604938271605}, {-9.347432852438132*^-10, 
           5.644444444444445}, {-1.0948070543415753`*^-9, 
           5.567901234567902}, {-1.2651975182198379`*^-9, 
           5.4864197530864205`}, {-1.4459146768786013`*^-9, 
           5.4}, {-1.5260192648619758`*^-9, 
           5.311111111111111}, {-1.3945720167140717`*^-9, 
           5.222222222222222}, {-1.0515729324348896`*^-9, 
           5.133333333333334}, {-4.970220120244285*^-10, 5.044444444444445}, {
           2.6908074451731155`*^-10, 4.955555555555556}, {
           1.2467353371903292`*^-9, 4.866666666666667}, {
           2.435941765994626*^-9, 4.777777777777778}, {3.836700030930201*^-9, 
           4.688888888888889}, {9.314703675045168*^-9, 4.4}, {
           1.097956123604816*^-8, 4.311111111111112}, {
           1.2537961880792144`*^-8, 4.222222222222222}, {
           1.398990560927713*^-8, 4.133333333333335}, {
           1.5335392421503107`*^-8, 4.044444444444444}, {
           1.6574422317470085`*^-8, 3.9555555555555557`}, {
           1.7706995297178058`*^-8, 3.866666666666667}, {
           1.8733111360627026`*^-8, 3.7777777777777777`}, {
           1.965277050781699*^-8, 3.688888888888889}, {2.046597273874795*^-8, 
           3.6}, {2.120483612897159*^-8, 3.51358024691358}, {
           2.1901478754039598`*^-8, 3.432098765432099}, {
           2.2555900613951964`*^-8, 3.355555555555556}, {
           2.3168101708708697`*^-8, 3.283950617283951}, {
           2.3738082038309788`*^-8, 3.217283950617284}, {
           2.426584160275525*^-8, 3.155555555555556}, {
           2.4751380402045065`*^-8, 3.0987654320987654`}, 
           DynamicLocation["VertexID$49", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         BezierCurveBox[{
           DynamicLocation["VertexID$4", Automatic, Center], {
           0.33681613208637384`, 5.887727955873633}, {0.5578362974936436, 
           5.814054567382339}, {0.8139311957465614, 5.728689601272306}, {
           1.1051008268451274`, 5.6316330575435325`}, {1.4313451907893415`, 
           5.52288493619602}, {1.7926642875792038`, 5.402445237229768}, {
           2.1890581172147137`, 5.270313960644777}, {2.6205266796958724`, 
           5.126491106441045}, {2.700169228322794, 5.095005318669466}, {
           2.77044206566633, 5.056766224884089}, {2.8313451917264776`, 
           5.0117738250849095`}, {2.8828786065032386`, 4.960028119271928}, {
           2.925042309996613, 4.901529107445144}, {2.9578363022066014`, 
           4.836276789604561}, {2.981260583133202, 4.764271165750175}, {
           2.9953151527764157`, 4.685512235881989}, {3.0000000172520433`, 
           4.4}, {3.0000000199107117`, 4.311111111111112}, {
           3.0000000224504495`, 4.222222222222222}, {3.000000024871257, 
           4.133333333333335}, {3.000000027173134, 4.044444444444444}, {
           3.0000000293560802`, 3.9555555555555557`}, {3.000000031420096, 
           3.866666666666667}, {3.000000033365181, 3.7777777777777777`}, {
           3.0000000351913365`, 3.688888888888889}, {3.0000000406060194`, 
           3.4}, {3.0000000422068385`, 3.3111111111111104`}, {
           3.0000000437137766`, 3.2222222222222223`}, {3.000000045126835, 
           3.133333333333334}, {3.0000000464460124`, 3.0444444444444443`}, {
           3.0000000476713087`, 2.9555555555555557`}, {3.0000000488027245`, 
           2.8666666666666667`}, {3.00000004984026, 2.7777777777777777`}, {
           3.000000050783915, 2.688888888888889}, {3.000000053440064, 
           2.4000000000000004`}, {2.9965752900348535`, 2.3124916422998667`}, {
           2.9863009982135558`, 2.227744346977243}, {2.96917717797617, 
           2.1457581140321307`}, {2.9452038293226956`, 2.066532943464528}, {
           2.914380952253133, 1.990068835274436}, {2.8767085467674836`, 
           1.9163657894618544`}, {2.832186612865746, 1.8454238060267834`}, {
           2.7808151505479204`, 1.7772428849692228`}, {2.722594159814006, 
           1.7118230262891725`}, {2.6168126459964185`, 1.6019342429939138`}, {
           2.5184426912081306`, 1.4997447936811041`}, {2.4274842954491413`, 
           1.4052546783507436`}, {2.34393745871945, 1.318463897002831}, {
           2.2678021810190576`, 1.2393724496373673`}, {2.199078462347964, 
           1.1679803362543524`}, {2.1377663027061686`, 1.1042875568537864`}, 
           DynamicLocation["VertexID$50", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$4", Automatic, Center], 
          DynamicLocation["VertexID$54", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$4", Automatic, Center], 
          DynamicLocation["VertexID$64", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         BezierCurveBox[{
           DynamicLocation[
           "VertexID$4", Automatic, Center], {-0.19753086468165848`, 
           5.901234567901235}, {-0.31111111176366, 
           5.844444444444445}, {-0.43456790207018325`, 
           5.782716049382716}, {-0.5679012356012285, 
           5.71604938271605}, {-0.7111111123567955, 
           5.644444444444445}, {-0.8641975323368845, 
           5.567901234567902}, {-1.0271604955414952`, 
           5.4864197530864205`}, {-1.2000000019706278`, 
           5.4}, {-1.3783768928133102`, 
           5.31255749736013}, {-1.5579520092585708`, 
           5.2280077672183}, {-1.7387253513064092`, 
           5.146350809574508}, {-1.9206969189568255`, 
           5.067586624428754}, {-2.10386671220982, 
           4.991715211781038}, {-2.2882347310653923`, 
           4.918736571631362}, {-2.4738009755235426`, 
           4.8486507039797235`}, {-2.660565445584271, 
           4.781457608826125}, {-2.848528141247577, 
           4.717157286170564}, {-3.18155309787334, 
           4.6061489668508155`}, {-3.491084922284244, 
           4.502971691634045}, {-3.777123614480286, 
           4.407625460520252}, {-4.0396691744614674`, 
           4.320110273509433}, {-4.2787216022277885`, 
           4.240426130601593}, {-4.494280897779248, 
           4.168573031796729}, {-4.686347061115847, 4.104550977094843}, 
           DynamicLocation["VertexID$65", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$5", Automatic, Center], 
          DynamicLocation["VertexID$43", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$5", Automatic, Center], 
          DynamicLocation["VertexID$66", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$6", Automatic, Center], 
          DynamicLocation["VertexID$8", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$7", Automatic, Center], 
          DynamicLocation["VertexID$9", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$8", Automatic, Center], 
          DynamicLocation["VertexID$11", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$9", Automatic, Center], 
          DynamicLocation["VertexID$12", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$10", Automatic, Center], 
          DynamicLocation["VertexID$13", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$14", Automatic, Center], 
          DynamicLocation["VertexID$15", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$16", Automatic, Center], 
          DynamicLocation["VertexID$17", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$18", Automatic, Center], 
          DynamicLocation["VertexID$19", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$21", Automatic, Center], 
          DynamicLocation["VertexID$24", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$23", Automatic, Center], 
          DynamicLocation["VertexID$24", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$23", Automatic, Center], 
          DynamicLocation["VertexID$25", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$23", Automatic, Center], 
          DynamicLocation["VertexID$28", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$25", Automatic, Center], 
          DynamicLocation["VertexID$39", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$26", Automatic, Center], 
          DynamicLocation["VertexID$25", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$27", Automatic, Center], 
          DynamicLocation["VertexID$25", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$28", Automatic, Center], 
          DynamicLocation["VertexID$41", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$29", Automatic, Center], 
          DynamicLocation["VertexID$28", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$30", Automatic, Center], 
          DynamicLocation["VertexID$28", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$31", Automatic, Center], 
          DynamicLocation["VertexID$32", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$32", Automatic, Center], 
          DynamicLocation["VertexID$41", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$33", Automatic, Center], 
          DynamicLocation["VertexID$32", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$34", Automatic, Center], 
          DynamicLocation["VertexID$32", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$35", Automatic, Center], 
          DynamicLocation["VertexID$36", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$36", Automatic, Center], 
          DynamicLocation["VertexID$39", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$37", Automatic, Center], 
          DynamicLocation["VertexID$36", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$38", Automatic, Center], 
          DynamicLocation["VertexID$39", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$39", Automatic, Center], 
          DynamicLocation["VertexID$42", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$39", Automatic, Center], 
          DynamicLocation["VertexID$46", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         BezierCurveBox[{
           DynamicLocation["VertexID$40", Automatic, Center], {
           13.000000018804448`, 5.901234567901235}, {13.000000018440195`, 
           5.844444444444445}, {13.000000018044265`, 5.782716049382716}, {
           13.000000017616662`, 5.71604938271605}, {13.000000017157387`, 
           5.644444444444445}, {13.000000016666434`, 5.567901234567902}, {
           13.000000016143812`, 5.4864197530864205`}, {13.00000001558951, 
           5.4}, {12.995157641346045`, 5.315080907964057}, {
           12.980630519755925`, 5.238101409634005}, {12.956418650819153`, 
           5.169061505009845}, {12.922522034535723`, 5.107961194091576}, {
           12.878940670905639`, 5.0548004768791985`}, {12.825674559928899`, 
           5.009579353372713}, {12.762723701605502`, 4.972297823572118}, {
           12.690088095935455`, 4.942955887477415}, {12.60776774291875, 
           4.921553545088603}, {11.838236253720455`, 4.767647245502106}, {
           11.133094090345491`, 4.626618811226439}, {10.492341252793857`, 
           4.498468242261602}, {9.915977741065547, 4.383195538607594}, {
           9.40400355516057, 4.2808007002644155`}, {8.95641869507892, 
           4.191283727232067}, {8.5732231608206, 4.114644619510548}, 
           DynamicLocation["VertexID$41", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$41", Automatic, Center], 
          DynamicLocation["VertexID$42", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$41", Automatic, Center], 
          DynamicLocation["VertexID$47", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$42", Automatic, Center], 
          DynamicLocation["VertexID$45", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$42", Automatic, Center], 
          DynamicLocation["VertexID$48", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         BezierCurveBox[{
           DynamicLocation["VertexID$43", Automatic, Center], {
           1.0000000216462588`, 3.9012345679012346`}, {1.0000000223965508`, 
           3.844444444444445}, {1.0000000232120851`, 3.782716049382716}, {
           1.0000000240928626`, 3.716049382716049}, {1.000000025038883, 
           3.644444444444445}, {1.0000000260501458`, 3.567901234567901}, {
           1.0000000271266516`, 3.4864197530864196`}, {1.0000000282684, 
           3.4}, {1.0000000294602207`, 3.3111111111111104`}, {
           1.0000000306869423`, 3.2222222222222223`}, {1.0000000319485656`, 
           3.133333333333334}, {1.0000000332450898`, 3.0444444444444443`}, {
           1.0000000345765154`, 2.9555555555555557`}, {1.0000000359428425`, 
           2.8666666666666667`}, {1.000000037344071, 2.7777777777777777`}, {
           1.0000000387802004`, 2.688888888888889}, {1.0000000402512312`, 
           2.5999999999999996`}, {1.000000041698366, 2.5135802469135795`}, {
           1.0000000430628073`, 2.432098765432099}, {1.0000000443445556`, 
           2.355555555555556}, {1.0000000455436102`, 2.283950617283951}, {
           1.0000000466599714`, 2.2172839506172837`}, {1.0000000476936393`, 
           2.155555555555556}, {1.0000000486446134`, 2.0987654320987654`}, 
           DynamicLocation["VertexID$45", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$43", Automatic, Center], 
          DynamicLocation["VertexID$49", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         BezierCurveBox[{
           DynamicLocation["VertexID$44", Automatic, Center], {
           2.6913580266981874`, 5.901234567901235}, {3.08888889087306, 
           5.844444444444445}, {3.5209876562805302`, 5.782716049382716}, {
           3.987654322920598, 5.71604938271605}, {4.4888888907932625`, 
           5.644444444444445}, {5.024691359898526, 5.567901234567902}, {
           5.595061730236386, 5.4864197530864205`}, {6.200000001806845, 
           5.4}, {6.753005117063166, 5.311718231993699}, {7.167576018458618, 
           5.224650705752573}, {7.443712705993201, 5.138797421276623}, {
           7.581415179666914, 5.054158378565848}, {7.580683439479755, 
           4.970733577620248}, {7.441517485431728, 4.888523018439823}, {
           7.163917317522829, 4.807526701024575}, {6.747882935753062, 
           4.727744625374502}, {6.193414340122424, 4.649176791489603}, {
           5.419487877207626, 4.552435983399192}, {4.694781521138721, 
           4.461847688678896}, {4.019295271915711, 4.377411907328714}, {
           3.3930291295385917`, 4.299128639348643}, {2.8159830940073673`, 
           4.226997884738687}, {2.2881571653220365`, 4.161019643498845}, {
           1.8095513434825987`, 4.101193915629116}, 
           DynamicLocation["VertexID$43", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$44", Automatic, Center], 
          DynamicLocation["VertexID$54", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$45", Automatic, Center], 
          DynamicLocation["VertexID$50", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$46", Automatic, Center], 
          DynamicLocation["VertexID$51", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$47", Automatic, Center], 
          DynamicLocation["VertexID$52", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$51", Automatic, Center], 
          DynamicLocation["VertexID$53", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$52", Automatic, Center], 
          DynamicLocation["VertexID$53", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$53", Automatic, Center], 
          DynamicLocation["VertexID$55", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         BezierCurveBox[{
           DynamicLocation["VertexID$54", Automatic, Center], {
           6.0000000051197215`, 4.901234567901234}, {6.00000000793641, 
           4.844444444444445}, {6.000000010998025, 4.782716049382716}, {
           6.00000001430457, 4.716049382716049}, {6.0000000178560455`, 
           4.644444444444444}, {6.0000000216524505`, 4.567901234567901}, {
           6.000000025693785, 4.48641975308642}, {6.000000029980047, 
           4.3999999999999995`}, {6.0000000342356445`, 4.31111111111111}, {
           6.000000038184985, 4.222222222222222}, {6.000000041828066, 
           4.133333333333334}, {6.000000045164888, 4.044444444444444}, {
           6.000000048195452, 3.9555555555555557`}, {6.000000050919757, 
           3.866666666666667}, {6.0000000533378035`, 3.7777777777777777`}, {
           6.0000000554495925`, 3.688888888888889}, {6.000000060973022, 
           3.4}, {6.000000062578003, 3.3111111111111104`}, {6.000000064088147,
            3.2222222222222223`}, {6.000000065503452, 3.133333333333334}, {
           6.000000066823921, 3.0444444444444443`}, {6.000000068049551, 
           2.9555555555555557`}, {6.000000069180343, 2.8666666666666667`}, {
           6.000000070216297, 2.7777777777777777`}, {6.000000071157414, 
           2.688888888888889}, {6.000000073801127, 2.4000000000000004`}, {
           6.000000074464171, 2.311111111111112}, {6.000000074855584, 
           2.222222222222222}, {6.000000074975367, 2.1333333333333337`}, {
           6.000000074823516, 2.0444444444444447`}, {6.000000074400035, 
           1.9555555555555557`}, {6.000000073704923, 1.8666666666666667`}, {
           6.000000072738179, 1.777777777777778}, {6.000000071499805, 
           1.688888888888889}, {6.0000000662867, 1.4}, {5.998201026029936, 
           1.311450471302302}, {5.992803908551289, 1.2235796629869875`}, {
           5.983808713850759, 1.136387575054056}, {5.971215441928344, 
           1.0498742075035064`}, {5.955024092784045, 0.9640395603353399}, {
           5.935234666417863, 0.878883633549556}, {5.9118471628297975`, 
           0.7944064271461551}, {5.884861582019848, 0.7106079411251369}, {
           5.854277923988015, 0.6274881754865013}, {5.818214746958225, 
           0.535299299149828}, {5.784348869477616, 0.44872741480047607`}, {
           5.752680291546181, 0.36777252243844505`}, {5.723209013163923, 
           0.292434622063735}, {5.695935034330839, 0.22271371367634588`}, {
           5.670858355046935, 0.15860979727627791`}, {5.647978975312205, 
           0.1001228728635309}, 
           DynamicLocation["VertexID$55", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$56", Automatic, Center], 
          DynamicLocation["VertexID$58", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         BezierCurveBox[{
           DynamicLocation[
           "VertexID$56", Automatic, Center], {-6.219369343405706, 
           4.890315330314261}, {-6.360247683633276, 
           4.819876159873753}, {-6.521921804561234, 
           4.7390390990348195`}, {-6.704391706189586, 
           4.647804147797461}, {-6.907657388518331, 
           4.5461713061616775`}, {-7.1317188515474665`, 
           4.434140574127468}, {-7.376576095276994, 
           4.311711951694835}, {-7.642229119706913, 
           4.178885438863775}, {-7.717316834174041, 
           4.136403309719525}, {-7.783570699322951, 
           4.08846156178179}, {-7.8409907151536435`, 
           4.035060195050567}, {-7.8895768816661125`, 
           3.976199209525857}, {-7.929329198860366, 
           3.911878605207659}, {-7.9602476667364, 
           3.8420983820959753`}, {-7.982332285294214, 
           3.766858540190804}, {-7.9955830545338085`, 
           3.6861590794921457`}, {-7.999999963795284, 
           3.3999999999999995`}, {-7.999999959234762, 
           3.31111111111111}, {-7.999999955028662, 
           3.222222222222222}, {-7.999999951176986, 
           3.1333333333333333`}, {-7.999999947679729, 
           3.0444444444444443`}, {-7.999999944536898, 
           2.9555555555555553`}, {-7.999999941748488, 
           2.8666666666666663`}, {-7.999999939314501, 
           2.7777777777777777`}, {-7.999999937234936, 
           2.688888888888889}, {-7.999999935509794, 
           2.5999999999999996`}, {-7.99999993400486, 
           2.5135802469135795`}, {-7.999999932585925, 
           2.432098765432099}, {-7.999999931252985, 
           2.355555555555556}, {-7.99999993000604, 
           2.283950617283951}, {-7.999999928845091, 
           2.2172839506172837`}, {-7.99999992777014, 
           2.155555555555556}, {-7.999999926781184, 2.0987654320987654`}, 
           DynamicLocation["VertexID$61", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$56", Automatic, Center], 
          DynamicLocation["VertexID$65", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$56", Automatic, Center], 
          DynamicLocation["VertexID$66", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         BezierCurveBox[{
           DynamicLocation[
           "VertexID$56", Automatic, Center], {-6.000000003792079, 
           4.901234567901234}, {-6.000000003067772, 
           4.844444444444445}, {-6.000000002280478, 
           4.782716049382716}, {-6.0000000014302035`, 
           4.716049382716049}, {-6.000000000516945, 
           4.644444444444445}, {-5.999999999540703, 
           4.567901234567902}, {-5.999999998501478, 
           4.48641975308642}, {-5.999999997399269, 4.4}, {-5.999999996046414, 
           4.311111111111112}, {-5.999999994255255, 
           4.222222222222222}, {-5.999999992025788, 
           4.133333333333335}, {-5.999999989358012, 
           4.044444444444444}, {-5.99999998625193, 
           3.9555555555555557`}, {-5.999999982707542, 
           3.866666666666667}, {-5.999999978724846, 
           3.7777777777777777`}, {-5.999999974303844, 
           3.688888888888889}, {-5.999999958017991, 
           3.3999999999999995`}, {-5.999999953289997, 
           3.31111111111111}, {-5.999999949262946, 
           3.222222222222222}, {-5.9999999459368345`, 
           3.1333333333333333`}, {-5.999999943311662, 
           3.0444444444444443`}, {-5.999999941387432, 
           2.9555555555555553`}, {-5.999999940164141, 
           2.8666666666666663`}, {-5.999999939641791, 
           2.7777777777777777`}, {-5.999999939820381, 
           2.688888888888889}, {-5.999999943467412, 
           2.4000000000000004`}, {-5.999999944532863, 
           2.311111111111112}, {-5.99999994526922, 
           2.222222222222222}, {-5.99999994567648, 
           2.1333333333333337`}, {-5.999999945754642, 
           2.0444444444444447`}, {-5.999999945503708, 
           1.9555555555555557`}, {-5.999999944923678, 
           1.8666666666666667`}, {-5.99999994401455, 
           1.777777777777778}, {-5.999999942776327, 
           1.688888888888889}, {-5.999999937312301, 1.4}, {-5.996508050332933,
            1.3125574973813778`}, {-5.986032392858567, 
           1.2280077673032908`}, {-5.9685729648892, 
           1.146350809765738}, {-5.944129766424833, 
           1.067586624768719}, {-5.912702797465468, 
           0.9917152123122346}, {-5.874292058011104, 
           0.9187365723962844}, {-5.8288975480617395`, 
           0.8486507050208687}, {-5.7765192676173776`, 
           0.7814576101859873}, {-5.7171572166780145`, 
           0.71715728789164}, {-5.606148896709559, 
           0.6061489682106784}, {-5.502971620906856, 
           0.5029716926751896}, {-5.40762538926991, 
           0.4076254612851734}, {-5.320110201798715, 
           0.32011027404062964`}, {-5.240426058493274, 
           0.24042613094155849`}, {-5.168572959353588, 
           0.16857303198796}, {-5.104550904379655, 0.10455097717983405`}, 
           DynamicLocation["VertexID$70", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$57", Automatic, Center], 
          DynamicLocation["VertexID$56", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         BezierCurveBox[{
           DynamicLocation[
           "VertexID$57", Automatic, Center], {-1.7177774434270199`, 
           5.893078115985906}, {-1.9639618853477414`, 
           5.826092427634956}, {-2.243283576062553, 
           5.750090241721402}, {-2.555742515571455, 
           5.665071558245247}, {-2.9013387038744467`, 
           5.571036377206489}, {-3.2800721409715288`, 
           5.467984698605129}, {-3.6919428268627015`, 
           5.355916522441165}, {-4.136950761547964, 
           5.234831848714599}, {-4.327961096437653, 
           5.180607880465855}, {-4.5174146597873674`, 
           5.122305686259448}, {-4.705311451597106, 
           5.0599252660953775`}, {-4.89165147186687, 
           4.993466619973642}, {-5.07643472059666, 
           4.9229297478942415`}, {-5.259661197786473, 
           4.848314649857178}, {-5.441330903436313, 
           4.769621325862449}, {-5.6214438375461775`, 
           4.686849775910057}, {-5.800000000116066, 4.6}, {-5.972839505338192,
            4.51358024691358}, {-6.135802467404769, 
           4.432098765432099}, {-6.288888886315797, 
           4.355555555555556}, {-6.432098762071272, 
           4.283950617283951}, {-6.565432094671198, 
           4.217283950617285}, {-6.688888884115574, 
           4.155555555555555}, {-6.8024691304044005`, 4.098765432098766}, 
           DynamicLocation["VertexID$58", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         BezierCurveBox[{
           DynamicLocation[
           "VertexID$57", Automatic, Center], {-1.6157119556892847`, 
           5.891262762669723}, {-1.800981204641774, 
           5.822007882673543}, {-2.012799402988776, 
           5.742828828456668}, {-2.251166550730292, 
           5.653725600019099}, {-2.516082647866321, 
           5.554698197360836}, {-2.8075476943968636`, 
           5.445746620481879}, {-3.12556169032192, 
           5.326870869382227}, {-3.4701246356414894`, 
           5.198070944061881}, {-3.5763947745962383`, 
           5.151562227406918}, {-3.6597050277644954`, 
           5.100067608136199}, {-3.720055395146261, 
           5.043587086249725}, {-3.757445876741534, 
           4.982120661747494}, {-3.771876472550315, 
           4.915668334629507}, {-3.763347182572604, 
           4.8442301048957646`}, {-3.7318580068084017`, 
           4.767805972546265}, {-3.677408945257707, 
           4.686395937581011}, {-3.2828427034741012`, 
           4.282842710340236}, {-3.2234806523679107`, 
           4.218542388416976}, {-3.171102372208898, 
           4.151349293909526}, {-3.1257078629970607`, 
           4.081263426817884}, {-3.0872971247323995`, 
           4.008284787142048}, {-3.0558701574149145`, 
           3.932413374882022}, {-3.0314269610446067`, 
           3.853649190037804}, {-3.013967535621475, 
           3.771992232609395}, {-3.003491881145519, 
           3.6874425025967934`}, {-3.000000001992561, 
           3.4}, {-3.0048423775332487`, 
           3.315080907958668}, {-3.0193695002656953`, 
           3.2381014096124505`}, {-3.0435813701899006`, 
           3.1690615049613484`}, {-3.077477987305863, 
           3.1079611940053584`}, {-3.1210593516135843`, 
           3.0548004767444836`}, {-3.174325463113063, 
           3.009579353178723}, {-3.2372763218043006`, 
           2.972297823308076}, {-3.3099119276872964`, 
           2.942955887132544}, {-3.39223228076205, 
           2.921553544652126}, {-4.161763765049359, 
           2.767647245157235}, {-4.866905923939818, 
           2.6266188109623974`}, {-5.50765875743343, 
           2.498468242067612}, {-6.08402226553019, 
           2.3831955384728785`}, {-6.595996448230102, 
           2.280800700178198}, {-7.0435813055331655`, 
           2.1912837271835697`}, {-7.42677683743938, 2.114644619488994}, 
           DynamicLocation["VertexID$61", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         BezierCurveBox[{
           DynamicLocation[
           "VertexID$57", Automatic, Center], {-1.4993737799485698`, 
           5.89580014953969}, {-1.6058869759199466`, 
           5.83221700313097}, {-1.7252244778786665`, 
           5.760978375936538}, {-1.8573862858247305`, 
           5.682084267956395}, {-2.0023723997581375`, 
           5.595534679190543}, {-2.1601828196788886`, 
           5.501329609638979}, {-2.330817545586983, 
           5.399469059301706}, {-2.5142765774824207`, 
           5.28995302817872}, {-2.611280259413874, 
           5.224160417326396}, {-2.6864142269623152`, 
           5.1556505972933}, {-2.739678480127742, 
           5.0844235680794325`}, {-2.7710730189101542`, 
           5.010479329684791}, {-2.780597843309553, 
           4.933817882109377}, {-2.7682529533259377`, 
           4.854439225353191}, {-2.7340383489593085`, 
           4.772343359416233}, {-2.6779540302096656`, 
           4.687530284298503}, {-2.2828427021470308`, 
           4.282842710191111}, {-2.2234806509255773`, 
           4.218542388299149}, {-2.1711023704870533`, 
           4.1513492938193135`}, {-2.1257078608314575`, 
           4.0812634267516055`}, {-2.0872971219587897`, 
           4.008284787096022}, {-2.0558701538690505`, 
           3.9324133748525654`}, {-2.03142695656224, 
           3.853649190021235}, {-2.0139675300383573`, 
           3.77199223260203}, {-2.0034918742974033`, 
           3.687442502594952}, {-1.9999999903146148`, 
           3.4}, {-2.0025734826636383`, 
           3.3118346863235884`}, {-2.0102939588438318`, 
           3.225116523072133}, {-2.0231614188551945`, 
           3.139845510245634}, {-2.0411758626977274`, 
           3.056021647844088}, {-2.0643372903714297`, 
           2.973644935867499}, {-2.092645701876302, 
           2.892715374315865}, {-2.1261010972123437`, 
           2.8132329631891864`}, {-2.1647034763795556`, 
           2.735197702487463}, {-2.3663597534476564`, 
           2.4000000000000004`}, {-2.421293581848764, 
           2.311579130559137}, {-2.4775440267016986`, 
           2.2240943000143227`}, {-2.535111088006459, 
           2.1375455083655597`}, {-2.5939947657630444`, 
           2.0519327556128464`}, {-2.6541950599714563`, 
           1.9672560417561837`}, {-2.715711970631694, 
           1.8835153667955713`}, {-2.7785454977437576`, 
           1.800710730731009}, {-2.842695641307647, 
           1.718842133562497}, {-3.103674450869997, 1.4}, {-3.178053118587389,
            1.3126118096936703`}, {-3.2550928679220967`, 
           1.2282250165524597`}, {-3.3347936988741185`, 
           1.1468396205763685`}, {-3.4171556114434547`, 
           1.0684556217653953`}, {-3.502178605630106, 
           0.9930730201195412}, {-3.5898626814340715`, 
           0.920691815638806}, {-3.6802078388553516`, 
           0.8513120083231895}, {-3.7732140778939467`, 
           0.7849335981726921}, {-3.8688813985498567`, 
           0.7215565851873134}, {-4.04434641690224, 
           0.6096249561973833}, {-4.207365139788172, 
           0.5056329959775105}, {-4.357937567207654, 
           0.40958070452769485`}, {-4.496063699160682, 
           0.32146808184793624`}, {-4.621743535647259, 
           0.2412951279382347}, {-4.734977076667384, 
           0.1690618427985904}, {-4.835764322221058, 0.10476822642900312`}, 
           DynamicLocation["VertexID$70", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$58", Automatic, Center], 
          DynamicLocation["VertexID$59", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$59", Automatic, Center], 
          DynamicLocation["VertexID$61", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$60", Automatic, Center], 
          DynamicLocation["VertexID$61", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$62", Automatic, Center], 
          DynamicLocation["VertexID$61", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         BezierCurveBox[{
           DynamicLocation[
           "VertexID$62", Automatic, Center], {-8.999999943954975, 
           2.901234567901235}, {-8.999999943376787, 
           2.8444444444444446`}, {-8.999999942748321, 
           2.7827160493827163`}, {-8.999999942069575, 
           2.7160493827160495`}, {-8.999999941340556, 
           2.644444444444445}, {-8.999999940561256, 
           2.567901234567902}, {-8.999999939731683, 
           2.48641975308642}, {-8.999999938851829, 
           2.4000000000000004`}, {-8.995209110835177, 
           2.3148516759286446`}, {-8.980836628595211, 
           2.237184481492354}, {-8.956882492131928, 
           2.1669984166911305`}, {-8.923346701445325, 
           2.104293481524972}, {-8.880229256535406, 
           2.04906967599388}, {-8.82753015740217, 
           2.0013270000978536`}, {-8.765249404045615, 
           1.9610654538368935`}, {-8.693386996465746, 
           1.928285037210999}, {-8.611942934662558, 
           1.9029857502201704`}, {-8.011905513182256, 
           1.75297639523569}, {-7.461545696789669, 
           1.6153864414912142`}, {-6.960863485484792, 
           1.4902158889867427`}, {-6.509858879267625, 
           1.3774647377222746`}, {-6.108531878138171, 
           1.2771329876978115`}, {-5.7568824820964295`, 
           1.1892206389133522`}, {-5.454910691142398, 1.1137276913688974`}, 
           DynamicLocation["VertexID$69", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$63", Automatic, Center], 
          DynamicLocation["VertexID$64", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$66", Automatic, Center], 
          DynamicLocation["VertexID$67", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$67", Automatic, Center], 
          DynamicLocation["VertexID$68", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         BezierCurveBox[{
           DynamicLocation[
           "VertexID$67", Automatic, Center], {-4.000000011251384, 
           2.901234567901235}, {-4.0000000069026225`, 
           2.8444444444444446`}, {-4.000000002175708, 
           2.7827160493827163`}, {-3.9999999970706397`, 
           2.7160493827160495`}, {-3.999999991587419, 
           2.644444444444445}, {-3.9999999857260455`, 
           2.567901234567902}, {-3.999999979486518, 
           2.48641975308642}, {-3.999999972868838, 
           2.4000000000000004`}, {-4.003491851748452, 
           2.3125574973458822`}, {-4.013967502000809, 
           2.228007767161305}, {-4.03142692362591, 
           2.1463508094462704`}, {-4.055870116623751, 
           2.0675866242007763`}, {-4.087297080994336, 
           1.991715211424824}, {-4.125707816737663, 
           1.9187365711184132`}, {-4.171102323853733, 
           1.8486507032815438`}, {-4.223480602342546, 
           1.7814576079142161`}, {-4.282842652204101, 
           1.7171572850164296`}, {-4.393850969312229, 
           1.6061489659389072`}, {-4.4970282424848085`, 
           1.5029716909358648`}, {-4.592374471721838, 
           1.4076254600073022`}, {-4.679889657023317, 
           1.320110273153219}, {-4.759573798389248, 
           1.2404261303736157`}, {-4.831426895819629, 
           1.1685730316684921`}, {-4.895448949314459, 1.1045509770378485`}, 
           DynamicLocation["VertexID$69", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$68", Automatic, Center], 
          DynamicLocation["VertexID$69", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[{
          DynamicLocation["VertexID$69", Automatic, Center], 
          DynamicLocation["VertexID$70", Automatic, Center]}], 
        GrayLevel[0], StripOnInput -> False]}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{0., 8.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$1"], 
         InsetBox[
          FormBox["csvfilename", TraditionalForm], 
          DynamicLocation["VertexID$1", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{2.9700686354772188`*^-12, 7.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox["raw", TraditionalForm], 
          DynamicLocation["VertexID$2", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-13.324820332546338`, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox["time", TraditionalForm], 
          DynamicLocation["VertexID$3", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$3"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-1.9122126104775816`*^-10, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$4"], 
         InsetBox[
          FormBox["forwardvelocity", TraditionalForm], 
          DynamicLocation["VertexID$4", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$4"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{0.999999998164057, 5.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$5"], 
         InsetBox[
          FormBox["forwardacceleration", TraditionalForm], 
          DynamicLocation["VertexID$5", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$5"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-7.324820317124335, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$6"], 
         InsetBox[
          FormBox["upacceleration", TraditionalForm], 
          DynamicLocation["VertexID$6", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$6"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-3.324820309713431, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$7"], 
         InsetBox[
          FormBox["rightacceleration", TraditionalForm], 
          DynamicLocation["VertexID$7", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$7"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-10.00000000830542, 5.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$8"], 
         InsetBox[
          FormBox["upvelocity", TraditionalForm], 
          DynamicLocation["VertexID$8", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$8"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-7.000000005601052, 5.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$9"], 
         InsetBox[
          FormBox["rightvelocity", TraditionalForm], 
          DynamicLocation["VertexID$9", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$9"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-1.0000000027392133`, 5.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$10"], 
         InsetBox[
          FormBox["forwardposition", TraditionalForm], 
          DynamicLocation["VertexID$10", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$10"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-10.000000017570471`, 4.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$11"], 
         InsetBox[
          FormBox["upposition", TraditionalForm], 
          DynamicLocation["VertexID$11", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$11"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-8.999999999945985, 4.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$12"], 
         InsetBox[
          FormBox["rightposition", TraditionalForm], 
          DynamicLocation["VertexID$12", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$12"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-0.9999999853214518, 4.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$13"], 
         InsetBox[
          FormBox["distancecorrected", TraditionalForm], 
          DynamicLocation["VertexID$13", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$13"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-10.32482032257316, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$14"], 
         InsetBox[
          FormBox["pitchvelocity", TraditionalForm], 
          DynamicLocation["VertexID$14", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$14"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-13.000000018969388`, 5.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$15"], 
         InsetBox[
          FormBox["pitchacceleration", TraditionalForm], 
          DynamicLocation["VertexID$15", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$15"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-9.324820320766634, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$16"], 
         InsetBox[
          FormBox["yawvelocity", TraditionalForm], 
          DynamicLocation["VertexID$16", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$16"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-12.000000013188298`, 5.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$17"], 
         InsetBox[
          FormBox["yawacceleration", TraditionalForm], 
          DynamicLocation["VertexID$17", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$17"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-8.32482031894736, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$18"], 
         InsetBox[
          FormBox["rollvelocity", TraditionalForm], 
          DynamicLocation["VertexID$18", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$18"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-11.000000010277887`, 5.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$19"], 
         InsetBox[
          FormBox["rollacceleration", TraditionalForm], 
          DynamicLocation["VertexID$19", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$19"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-12.324820327106792`, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$20"], 
         InsetBox[
          FormBox["pitch", TraditionalForm], 
          DynamicLocation["VertexID$20", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$20"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-4.324820311565787, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$21"], 
         InsetBox[
          FormBox["yaw", TraditionalForm], 
          DynamicLocation["VertexID$21", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$21"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-11.324820324384163`, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$22"], 
         InsetBox[
          FormBox["roll", TraditionalForm], 
          DynamicLocation["VertexID$22", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$22"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{1.0000000009041372`, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$23"], 
         InsetBox[
          FormBox["heading", TraditionalForm], 
          DynamicLocation["VertexID$23", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$23"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-8.000000006194739, 5.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$24"], 
         InsetBox[
          FormBox["drift", TraditionalForm], 
          DynamicLocation["VertexID$24", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$24"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{7.000000000484661, 5.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$25"], 
         InsetBox[
          FormBox["watervelocity", TraditionalForm], 
          DynamicLocation["VertexID$25", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$25"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{3.0000000029500455`, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$26"], 
         InsetBox[
          FormBox["waterflowvelocity", TraditionalForm], 
          DynamicLocation["VertexID$26", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$26"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{4.000000003882619, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$27"], 
         InsetBox[
          FormBox["waterflowdirection", TraditionalForm], 
          DynamicLocation["VertexID$27", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$27"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{8.000000001050822, 5.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$28"], 
         InsetBox[
          FormBox["airvelocity", TraditionalForm], 
          DynamicLocation["VertexID$28", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$28"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{8.00000000754342, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$29"], 
         InsetBox[
          FormBox["airflowvelocity", TraditionalForm], 
          DynamicLocation["VertexID$29", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$29"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{9.000000008694727, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$30"], 
         InsetBox[
          FormBox["airflowdirection", TraditionalForm], 
          DynamicLocation["VertexID$30", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$30"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{10.000000010903605`, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$31"], 
         InsetBox[
          FormBox["airmoisture", TraditionalForm], 
          DynamicLocation["VertexID$31", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$31"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{12.000000005478924`, 5.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$32"], 
         InsetBox[
          FormBox["airdensity", TraditionalForm], 
          DynamicLocation["VertexID$32", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$32"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{11.000000012987115`, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$33"], 
         InsetBox[
          FormBox["airpressure", TraditionalForm], 
          DynamicLocation["VertexID$33", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$33"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{12.000000015084098`, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$34"], 
         InsetBox[
          FormBox["airtemperature", TraditionalForm], 
          DynamicLocation["VertexID$34", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$34"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{5.000000004823008, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$35"], 
         InsetBox[
          FormBox["watersalinity", TraditionalForm], 
          DynamicLocation["VertexID$35", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$35"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{10.000000002505104`, 5.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$36"], 
         InsetBox[
          FormBox["waterdensity", TraditionalForm], 
          DynamicLocation["VertexID$36", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$36"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{6.000000005717297, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$37"], 
         InsetBox[
          FormBox["watertemperature", TraditionalForm], 
          DynamicLocation["VertexID$37", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$37"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{11.000000003655472`, 5.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$38"], 
         InsetBox[
          FormBox["watercx", TraditionalForm], 
          DynamicLocation["VertexID$38", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$38"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{7.000000062937218, 4.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$39"], 
         InsetBox[
          FormBox["waterfrictionforce", TraditionalForm], 
          DynamicLocation["VertexID$39", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$39"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{13.000000019437934`, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$40"], 
         InsetBox[
          FormBox["aircx", TraditionalForm], 
          DynamicLocation["VertexID$40", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$40"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{8.000000069773947, 4.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$41"], 
         InsetBox[
          FormBox["airfrictionforce", TraditionalForm], 
          DynamicLocation["VertexID$41", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$41"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{7.000000072467728, 3.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$42"], 
         InsetBox[
          FormBox["totalfrictionforce", TraditionalForm], 
          DynamicLocation["VertexID$42", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$42"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{1.0000000203414032`, 4.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$43"], 
         InsetBox[
          FormBox["inertialforce", TraditionalForm], 
          DynamicLocation["VertexID$43", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$43"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{2.000000002046235, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$44"], 
         InsetBox[
          FormBox["mass", TraditionalForm], 
          DynamicLocation["VertexID$44", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$44"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{1.0000000502984818`, 2.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$45"], 
         InsetBox[
          FormBox["totalforce", TraditionalForm], 
          DynamicLocation["VertexID$45", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$45"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{4.000000059820039, 3.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$46"], 
         InsetBox[
          FormBox["waterfrictionpower", TraditionalForm], 
          DynamicLocation["VertexID$46", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$46"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{5.000000064985855, 3.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$47"], 
         InsetBox[
          FormBox["airfrictionpower", TraditionalForm], 
          DynamicLocation["VertexID$47", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$47"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{2.000000054258706, 2.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$48"], 
         InsetBox[
          FormBox["totalfrictionpower", TraditionalForm], 
          DynamicLocation["VertexID$48", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$48"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{2.5595795705157798`*^-8, 3.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$49"], 
         InsetBox[
          FormBox["inertialpower", TraditionalForm], 
          DynamicLocation["VertexID$49", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$49"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{2.037376660510475, 1.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$50"], 
         InsetBox[
          FormBox["totalpower", TraditionalForm], 
          DynamicLocation["VertexID$50", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$50"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{4.000000065008479, 2.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$51"], 
         InsetBox[
          FormBox["waterfrictionenergy", TraditionalForm], 
          DynamicLocation["VertexID$51", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$51"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{5.000000069135282, 2.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$52"], 
         InsetBox[
          FormBox["airfrictionenergy", TraditionalForm], 
          DynamicLocation["VertexID$52", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$52"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{5.000000046606019, 1.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$53"], 
         InsetBox[
          FormBox["totalfrictionenergy", TraditionalForm], 
          DynamicLocation["VertexID$53", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$53"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{6.000000000221135, 5.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$54"], 
         InsetBox[
          FormBox["kineticenergy", TraditionalForm], 
          DynamicLocation["VertexID$54", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$54"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{5.608812114490277, 0.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$55"], 
         InsetBox[
          FormBox["totalenergy", TraditionalForm], 
          DynamicLocation["VertexID$55", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$55"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-6.000000005051746, 5.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$56"], 
         InsetBox[
          FormBox["strokeposition", TraditionalForm], 
          DynamicLocation["VertexID$56", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$56"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-1.3248203059678474`, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$57"], 
         InsetBox[
          FormBox["length", TraditionalForm], 
          DynamicLocation["VertexID$57", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$57"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-6.999999993515402, 4.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$58"], 
         InsetBox[
          FormBox["strokemark", TraditionalForm], 
          DynamicLocation["VertexID$58", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$58"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-6.999999940356844, 3.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$59"], 
         InsetBox[
          FormBox["stroketotal", TraditionalForm], 
          DynamicLocation["VertexID$59", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$59"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-9.999999950782765, 3.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$60"], 
         InsetBox[
          FormBox["j", TraditionalForm], 
          DynamicLocation["VertexID$60", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$60"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-7.99999992506126, 2.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$61"], 
         InsetBox[
          FormBox["strokephase", TraditionalForm], 
          DynamicLocation["VertexID$61", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$61"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-8.999999944960521, 3.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$62"], 
         InsetBox[
          FormBox["i", TraditionalForm], 
          DynamicLocation["VertexID$62", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$62"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-5.324820313438195, 6.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$63"], 
         InsetBox[
          FormBox["strokerate", TraditionalForm], 
          DynamicLocation["VertexID$63", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$63"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-9.00000000704533, 5.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$64"], 
         InsetBox[
          FormBox["distanceperstroke", TraditionalForm], 
          DynamicLocation["VertexID$64", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$64"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-4.999999991144463, 4.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$65"], 
         InsetBox[
          FormBox["forwardvelocitystroke", TraditionalForm], 
          DynamicLocation["VertexID$65", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$65"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-3.9999999900576313`, 4.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$66"], 
         InsetBox[
          FormBox["forwardaccelerationstroke", TraditionalForm], 
          DynamicLocation["VertexID$66", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$66"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-4.000000018814447, 3.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$67"], 
         InsetBox[
          FormBox["forwardaccelerationstrokenormalized", TraditionalForm], 
          DynamicLocation["VertexID$67", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$67"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-4.9999999458395905`, 2.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$68"], 
         InsetBox[
          FormBox["forwardaccelerationstrokemean", TraditionalForm], 
          DynamicLocation["VertexID$68", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$68"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-4.999999924497473, 1.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$69"], 
         InsetBox[
          FormBox["forwardaccelerationstrokegarbage", TraditionalForm], 
          DynamicLocation["VertexID$69", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$69"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{-4.99999992692905, 0.}, 0.2], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$70"], 
         InsetBox[
          FormBox["forwardaccelerationgarbage", TraditionalForm], 
          DynamicLocation["VertexID$70", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> 
        "VertexLabelID$70"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{27.12501738618232, 
       1568.0200000000004`}, {-245.2992000000001, 239.1862135658434}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FrameTicks->None,
  ImageSize->1600]], "Output",
 CellChangeTimes->{
  3.609076003064767*^9, 3.609076037787756*^9, {3.609076404742058*^9, 
   3.609076424608057*^9}, {3.6090765777893763`*^9, 3.609076595640801*^9}, {
   3.609077070284532*^9, 3.6090770902551823`*^9}, 3.6090771421607933`*^9, 
   3.609077340085786*^9, {3.609077499073052*^9, 3.609077502107769*^9}, 
   3.609079041715934*^9, 3.609079420108631*^9, {3.609083344914789*^9, 
   3.609083387426515*^9}, 3.6090836200860786`*^9, 3.609153094746364*^9, 
   3.609153324988402*^9, 3.6091533675183477`*^9, {3.609155494661314*^9, 
   3.609155512250531*^9}, 3.609156399273211*^9, 3.609156570376205*^9, {
   3.609157101397332*^9, 3.609157122237336*^9}, 3.6091572600989733`*^9, 
   3.609158944945558*^9, {3.609158995697278*^9, 3.60915901549739*^9}, 
   3.6091590548577957`*^9, {3.6091590866995573`*^9, 3.609159107963875*^9}, 
   3.609159179809307*^9, 3.609160097761858*^9}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.609076003064767*^9, 3.609076037787756*^9, {3.609076404742058*^9, 
   3.609076424608057*^9}, {3.6090765777893763`*^9, 3.609076595640801*^9}, {
   3.609077070284532*^9, 3.6090770902551823`*^9}, 3.6090771421607933`*^9, 
   3.609077340085786*^9, {3.609077499073052*^9, 3.609077502107769*^9}, 
   3.609079041715934*^9, 3.609079420108631*^9, {3.609083344914789*^9, 
   3.609083387426515*^9}, 3.6090836200860786`*^9, 3.609153094746364*^9, 
   3.609153324988402*^9, 3.6091533675183477`*^9, {3.609155494661314*^9, 
   3.609155512250531*^9}, 3.609156399273211*^9, 3.609156570376205*^9, {
   3.609157101397332*^9, 3.609157122237336*^9}, 3.6091572600989733`*^9, 
   3.609158944945558*^9, {3.609158995697278*^9, 3.60915901549739*^9}, 
   3.6091590548577957`*^9, {3.6091590866995573`*^9, 3.609159107963875*^9}, 
   3.609159179809307*^9, 3.609160097803446*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "raw", ",", "time", ",", "forwardacceleration", ",", "upacceleration", ",", 
   "rightacceleration", ",", "forwardvelocity", ",", "upvelocity", ",", 
   "rightvelocity", ",", "forwardposition", ",", "upposition", ",", 
   "rightposition", ",", "distancecorrected", ",", "pitchacceleration", ",", 
   "yawacceleration", ",", "rollacceleration", ",", "pitchvelocity", ",", 
   "yawvelocity", ",", "rollvelocity", ",", "pitch", ",", "yaw", ",", "roll", 
   ",", "heading", ",", "drift", ",", "watervelocity", ",", "airvelocity", 
   ",", "airdensity", ",", "waterdensity", ",", "waterfrictionforce", ",", 
   "airfrictionforce", ",", "totalfrictionforce", ",", "inertialforce", ",", 
   "totalforce", ",", "waterfrictionpower", ",", "airfrictionpower", ",", 
   "totalfrictionpower", ",", "inertialpower", ",", "totalpower", ",", 
   "waterfrictionenergy", ",", "airfrictionenergy", ",", 
   "totalfrictionenergy", ",", "kineticenergy", ",", "totalenergy", ",", 
   "strokeposition", ",", "strokemark", ",", "length", ",", "stroketotal", 
   ",", "strokephase", ",", "strokerate", ",", "distanceperstroke", ",", 
   "forwardvelocitystroke", ",", "forwardaccelerationstroke", ",", 
   "forwardaccelerationstrokenormalized", ",", 
   "forwardaccelerationstrokemean", ",", "forwardaccelerationstrokegarbage", 
   ",", "forwardaccelerationgarbage", ",", "waterflowvelocity", ",", 
   "waterflowdirection", ",", "airflowvelocity", ",", "airflowdirection", ",",
    "airmoisture", ",", "airpressure", ",", "airtemperature", ",", 
   "watersalinity", ",", "watertemperature", ",", "watercx", ",", "aircx", 
   ",", "mass"}], "}"}]], "Output",
 CellChangeTimes->{
  3.609076003064767*^9, 3.609076037787756*^9, {3.609076404742058*^9, 
   3.609076424608057*^9}, {3.6090765777893763`*^9, 3.609076595640801*^9}, {
   3.609077070284532*^9, 3.6090770902551823`*^9}, 3.6090771421607933`*^9, 
   3.609077340085786*^9, {3.609077499073052*^9, 3.609077502107769*^9}, 
   3.609079041715934*^9, 3.609079420108631*^9, {3.609083344914789*^9, 
   3.609083387426515*^9}, 3.6090836200860786`*^9, 3.609153094746364*^9, 
   3.609153324988402*^9, 3.6091533675183477`*^9, {3.609155494661314*^9, 
   3.609155512250531*^9}, 3.609156399273211*^9, 3.609156570376205*^9, {
   3.609157101397332*^9, 3.609157122237336*^9}, 3.6091572600989733`*^9, 
   3.609158944945558*^9, {3.609158995697278*^9, 3.60915901549739*^9}, 
   3.6091590548577957`*^9, {3.6091590866995573`*^9, 3.609159107963875*^9}, 
   3.609159179809307*^9, 3.6091600978043613`*^9}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.609076003064767*^9, 3.609076037787756*^9, {3.609076404742058*^9, 
   3.609076424608057*^9}, {3.6090765777893763`*^9, 3.609076595640801*^9}, {
   3.609077070284532*^9, 3.6090770902551823`*^9}, 3.6090771421607933`*^9, 
   3.609077340085786*^9, {3.609077499073052*^9, 3.609077502107769*^9}, 
   3.609079041715934*^9, 3.609079420108631*^9, {3.609083344914789*^9, 
   3.609083387426515*^9}, 3.6090836200860786`*^9, 3.609153094746364*^9, 
   3.609153324988402*^9, 3.6091533675183477`*^9, {3.609155494661314*^9, 
   3.609155512250531*^9}, 3.609156399273211*^9, 3.609156570376205*^9, {
   3.609157101397332*^9, 3.609157122237336*^9}, 3.6091572600989733`*^9, 
   3.609158944945558*^9, {3.609158995697278*^9, 3.60915901549739*^9}, 
   3.6091590548577957`*^9, {3.6091590866995573`*^9, 3.609159107963875*^9}, 
   3.609159179809307*^9, 3.609160097805258*^9}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.609076003064767*^9, 3.609076037787756*^9, {3.609076404742058*^9, 
   3.609076424608057*^9}, {3.6090765777893763`*^9, 3.609076595640801*^9}, {
   3.609077070284532*^9, 3.6090770902551823`*^9}, 3.6090771421607933`*^9, 
   3.609077340085786*^9, {3.609077499073052*^9, 3.609077502107769*^9}, 
   3.609079041715934*^9, 3.609079420108631*^9, {3.609083344914789*^9, 
   3.609083387426515*^9}, 3.6090836200860786`*^9, 3.609153094746364*^9, 
   3.609153324988402*^9, 3.6091533675183477`*^9, {3.609155494661314*^9, 
   3.609155512250531*^9}, 3.609156399273211*^9, 3.609156570376205*^9, {
   3.609157101397332*^9, 3.609157122237336*^9}, 3.6091572600989733`*^9, 
   3.609158944945558*^9, {3.609158995697278*^9, 3.60915901549739*^9}, 
   3.6091590548577957`*^9, {3.6091590866995573`*^9, 3.609159107963875*^9}, 
   3.609159179809307*^9, 3.609160097805937*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"csvfilename", ",", "j", ",", "i"}], "}"}]], "Output",
 CellChangeTimes->{
  3.609076003064767*^9, 3.609076037787756*^9, {3.609076404742058*^9, 
   3.609076424608057*^9}, {3.6090765777893763`*^9, 3.609076595640801*^9}, {
   3.609077070284532*^9, 3.6090770902551823`*^9}, 3.6090771421607933`*^9, 
   3.609077340085786*^9, {3.609077499073052*^9, 3.609077502107769*^9}, 
   3.609079041715934*^9, 3.609079420108631*^9, {3.609083344914789*^9, 
   3.609083387426515*^9}, 3.6090836200860786`*^9, 3.609153094746364*^9, 
   3.609153324988402*^9, 3.6091533675183477`*^9, {3.609155494661314*^9, 
   3.609155512250531*^9}, 3.609156399273211*^9, 3.609156570376205*^9, {
   3.609157101397332*^9, 3.609157122237336*^9}, 3.6091572600989733`*^9, 
   3.609158944945558*^9, {3.609158995697278*^9, 3.60915901549739*^9}, 
   3.6091590548577957`*^9, {3.6091590866995573`*^9, 3.609159107963875*^9}, 
   3.609159179809307*^9, 3.609160097806628*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", 
    RowBox[{"(", 
     RowBox[{"First", "/@", "computings"}], ")"}], "]"}], ",", 
   RowBox[{
    RowBox[{"raw", "=", "1"}], ";", 
    RowBox[{"time", "=", "1"}], ";", 
    RowBox[{"raw", "+", "time"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6091587191681623`*^9, 3.6091587888203573`*^9}, 
   3.60915885100268*^9}],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{{3.609158723704104*^9, 3.609158789364519*^9}, 
   3.609158851574541*^9, 3.609159123825453*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Extract", "[", 
  RowBox[{
   RowBox[{"VertexList", "[", "graph", "]"}], ",", 
   RowBox[{"Position", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"VertexInDegree", "[", 
         RowBox[{"graph", ",", "#"}], "]"}], "&"}], "/@", 
       RowBox[{"VertexList", "[", "graph", "]"}]}], ")"}], ",", "0"}], 
    "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"csvfilename", ",", "j", ",", "i"}], "}"}]], "Output",
 CellChangeTimes->{3.609159293631422*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"DeleteDuplicates", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"x", ",", "\[IndentingNewLine]", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{"Function", "[", 
            RowBox[{"z", ",", 
             RowBox[{"z", "\[DirectedEdge]", 
              RowBox[{"First", "[", "x", "]"}]}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Select", "[", 
            RowBox[{
             RowBox[{"Level", "[", 
              RowBox[{
               RowBox[{"Last", "[", "x", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"-", "1"}], "}"}]}], "]"}], ",", 
             RowBox[{"Function", "[", 
              RowBox[{"y", ",", 
               RowBox[{"And", "[", 
                RowBox[{
                 RowBox[{"MatchQ", "[", 
                  RowBox[{"y", ",", "_Symbol"}], "]"}], ",", 
                 RowBox[{"Not", "[", 
                  RowBox[{"NumericQ", "[", "y", "]"}], "]"}]}], "]"}]}], 
              "]"}]}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
       "computings"}], "]"}], "]"}], "]"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{"\"\<Name\>\"", ",", "Center"}], "]"}]}], ",", 
   RowBox[{"VertexSize", "\[Rule]", "Large"}], ",", 
   RowBox[{"VertexStyle", "\[Rule]", "White"}], ",", 
   RowBox[{"EdgeStyle", "\[Rule]", "Black"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "800"}], ","}], "]"}]], "Input",
 CellChangeTimes->{{3.609160185746069*^9, 3.609160227671494*^9}, {
  3.609160277458757*^9, 3.6091602802390223`*^9}, {3.6091603314023027`*^9, 
  3.6091605604515133`*^9}, {3.609160687434352*^9, 3.6091607379040127`*^9}, {
  3.609160819572236*^9, 3.6091608949870996`*^9}}],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{$CellContext`csvfilename, $CellContext`raw, $CellContext`time, \
$CellContext`forwardvelocity, $CellContext`forwardacceleration, \
$CellContext`upacceleration, $CellContext`rightacceleration, \
$CellContext`upvelocity, $CellContext`rightvelocity, \
$CellContext`forwardposition, $CellContext`upposition, \
$CellContext`rightposition, $CellContext`distancecorrected, \
$CellContext`pitchvelocity, $CellContext`pitchacceleration, \
$CellContext`yawvelocity, $CellContext`yawacceleration, \
$CellContext`rollvelocity, $CellContext`rollacceleration, $CellContext`pitch, \
$CellContext`yaw, $CellContext`roll, $CellContext`heading, \
$CellContext`drift, $CellContext`watervelocity, \
$CellContext`waterflowvelocity, $CellContext`waterflowdirection, \
$CellContext`airvelocity, $CellContext`airflowvelocity, \
$CellContext`airflowdirection, $CellContext`airmoisture, \
$CellContext`airdensity, $CellContext`airpressure, \
$CellContext`airtemperature, $CellContext`watersalinity, \
$CellContext`waterdensity, $CellContext`watertemperature, \
$CellContext`watercx, $CellContext`waterfrictionforce, $CellContext`aircx, \
$CellContext`airfrictionforce, $CellContext`totalfrictionforce, \
$CellContext`inertialforce, $CellContext`mass, $CellContext`totalforce, \
$CellContext`waterfrictionpower, $CellContext`airfrictionpower, \
$CellContext`totalfrictionpower, $CellContext`inertialpower, \
$CellContext`totalpower, $CellContext`waterfrictionenergy, \
$CellContext`airfrictionenergy, $CellContext`totalfrictionenergy, \
$CellContext`kineticenergy, $CellContext`totalenergy, \
$CellContext`strokeposition, $CellContext`length, $CellContext`strokemark, \
$CellContext`stroketotal, $CellContext`j, $CellContext`strokephase, \
$CellContext`i, $CellContext`strokerate, $CellContext`distanceperstroke, \
$CellContext`forwardvelocitystroke, $CellContext`forwardaccelerationstroke, \
$CellContext`forwardaccelerationstrokenormalized, \
$CellContext`forwardaccelerationstrokemean, \
$CellContext`forwardaccelerationstrokegarbage, \
$CellContext`forwardaccelerationgarbage}, {{{1, 2}, {2, 3}, {4, 5}, {2, 6}, {
       2, 7}, {2, 4}, {6, 8}, {2, 8}, {7, 9}, {4, 10}, {8, 11}, {9, 12}, {10, 
       13}, {14, 15}, {16, 17}, {18, 19}, {2, 14}, {2, 16}, {2, 18}, {2, 
       20}, {2, 21}, {2, 22}, {2, 23}, {21, 24}, {23, 24}, {4, 25}, {26, 
       25}, {23, 25}, {27, 25}, {4, 28}, {29, 28}, {23, 28}, {30, 28}, {31, 
       32}, {33, 32}, {34, 32}, {35, 36}, {37, 36}, {38, 39}, {36, 39}, {25, 
       39}, {40, 41}, {32, 41}, {28, 41}, {41, 42}, {39, 42}, {5, 43}, {44, 
       43}, {43, 45}, {42, 45}, {4, 46}, {39, 46}, {41, 47}, {4, 47}, {4, 
       48}, {42, 48}, {4, 49}, {43, 49}, {4, 50}, {45, 50}, {46, 51}, {47, 
       52}, {52, 53}, {51, 53}, {4, 54}, {44, 54}, {54, 55}, {53, 55}, {2, 
       56}, {57, 56}, {56, 58}, {57, 58}, {2, 57}, {58, 59}, {60, 61}, {62, 
       61}, {59, 61}, {56, 61}, {57, 61}, {2, 63}, {4, 64}, {63, 64}, {4, 
       65}, {56, 65}, {5, 66}, {56, 66}, {66, 67}, {67, 68}, {67, 69}, {62, 
       69}, {68, 69}, {69, 70}, {56, 70}, {57, 70}, {2, 26}, {2, 27}, {2, 
       29}, {2, 30}, {2, 31}, {2, 33}, {2, 34}, {2, 35}, {2, 37}, {2, 38}, {2,
        40}, {2, 44}}, Null}, {EdgeStyle -> {
         GrayLevel[0]}, GraphLayout -> "SpringElectricalEmbedding", ImageSize -> 
       800, VertexLabels -> {
         Placed["Name", Center]}, VertexSize -> {Large}, VertexStyle -> {
         GrayLevel[1]}}]], Typeset`boxes, Typeset`boxes$s2d = 
    GraphicsGroupBox[{{
       Arrowheads[0.01821797319275997], 
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$6", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$7", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$8", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$14", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$16", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$18", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$20", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$21", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$22", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$23", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$26", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$27", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$29", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$30", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$31", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$33", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$34", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$35", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$37", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$38", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$40", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$44", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$56", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$57", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$63", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$5", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$10", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$25", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$28", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$46", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$47", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$48", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$49", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$50", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$54", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$64", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$65", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$5", Automatic, Center], 
           DynamicLocation["VertexID$43", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$5", Automatic, Center], 
           DynamicLocation["VertexID$66", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$6", Automatic, Center], 
           DynamicLocation["VertexID$8", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$7", Automatic, Center], 
           DynamicLocation["VertexID$9", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$8", Automatic, Center], 
           DynamicLocation["VertexID$11", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$9", Automatic, Center], 
           DynamicLocation["VertexID$12", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$10", Automatic, Center], 
           DynamicLocation["VertexID$13", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$14", Automatic, Center], 
           DynamicLocation["VertexID$15", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$16", Automatic, Center], 
           DynamicLocation["VertexID$17", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$18", Automatic, Center], 
           DynamicLocation["VertexID$19", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$21", Automatic, Center], 
           DynamicLocation["VertexID$24", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$23", Automatic, Center], 
           DynamicLocation["VertexID$24", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$23", Automatic, Center], 
           DynamicLocation["VertexID$25", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$23", Automatic, Center], 
           DynamicLocation["VertexID$28", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$25", Automatic, Center], 
           DynamicLocation["VertexID$39", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$26", Automatic, Center], 
           DynamicLocation["VertexID$25", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$27", Automatic, Center], 
           DynamicLocation["VertexID$25", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$28", Automatic, Center], 
           DynamicLocation["VertexID$41", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$29", Automatic, Center], 
           DynamicLocation["VertexID$28", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$30", Automatic, Center], 
           DynamicLocation["VertexID$28", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$31", Automatic, Center], 
           DynamicLocation["VertexID$32", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$32", Automatic, Center], 
           DynamicLocation["VertexID$41", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$33", Automatic, Center], 
           DynamicLocation["VertexID$32", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$34", Automatic, Center], 
           DynamicLocation["VertexID$32", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$35", Automatic, Center], 
           DynamicLocation["VertexID$36", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$36", Automatic, Center], 
           DynamicLocation["VertexID$39", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$37", Automatic, Center], 
           DynamicLocation["VertexID$36", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$38", Automatic, Center], 
           DynamicLocation["VertexID$39", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$39", Automatic, Center], 
           DynamicLocation["VertexID$42", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$39", Automatic, Center], 
           DynamicLocation["VertexID$46", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$40", Automatic, Center], 
           DynamicLocation["VertexID$41", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$41", Automatic, Center], 
           DynamicLocation["VertexID$42", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$41", Automatic, Center], 
           DynamicLocation["VertexID$47", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$42", Automatic, Center], 
           DynamicLocation["VertexID$45", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$42", Automatic, Center], 
           DynamicLocation["VertexID$48", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$43", Automatic, Center], 
           DynamicLocation["VertexID$45", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$43", Automatic, Center], 
           DynamicLocation["VertexID$49", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$44", Automatic, Center], 
           DynamicLocation["VertexID$43", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$44", Automatic, Center], 
           DynamicLocation["VertexID$54", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$45", Automatic, Center], 
           DynamicLocation["VertexID$50", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$46", Automatic, Center], 
           DynamicLocation["VertexID$51", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$47", Automatic, Center], 
           DynamicLocation["VertexID$52", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$51", Automatic, Center], 
           DynamicLocation["VertexID$53", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$52", Automatic, Center], 
           DynamicLocation["VertexID$53", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$53", Automatic, Center], 
           DynamicLocation["VertexID$55", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$54", Automatic, Center], 
           DynamicLocation["VertexID$55", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$56", Automatic, Center], 
           DynamicLocation["VertexID$58", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$56", Automatic, Center], 
           DynamicLocation["VertexID$61", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$56", Automatic, Center], 
           DynamicLocation["VertexID$65", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$56", Automatic, Center], 
           DynamicLocation["VertexID$66", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$56", Automatic, Center], 
           DynamicLocation["VertexID$70", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$57", Automatic, Center], 
           DynamicLocation["VertexID$56", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$57", Automatic, Center], 
           DynamicLocation["VertexID$58", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$57", Automatic, Center], 
           DynamicLocation["VertexID$61", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$57", Automatic, Center], 
           DynamicLocation["VertexID$70", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$58", Automatic, Center], 
           DynamicLocation["VertexID$59", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$59", Automatic, Center], 
           DynamicLocation["VertexID$61", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$60", Automatic, Center], 
           DynamicLocation["VertexID$61", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$62", Automatic, Center], 
           DynamicLocation["VertexID$61", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$62", Automatic, Center], 
           DynamicLocation["VertexID$69", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$63", Automatic, Center], 
           DynamicLocation["VertexID$64", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$66", Automatic, Center], 
           DynamicLocation["VertexID$67", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$67", Automatic, Center], 
           DynamicLocation["VertexID$68", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$67", Automatic, Center], 
           DynamicLocation["VertexID$69", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$68", Automatic, Center], 
           DynamicLocation["VertexID$69", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False], 
       StyleBox[
        ArrowBox[
         LineBox[{
           DynamicLocation["VertexID$69", Automatic, Center], 
           DynamicLocation["VertexID$70", Automatic, Center]}]], 
        GrayLevel[0], StripOnInput -> False]}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{3.0537765623438764`, 4.24455278751404}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$1"], 
         InsetBox[
          FormBox["csvfilename", TraditionalForm], 
          DynamicLocation["VertexID$1", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{3.8520834183438457`, 4.483486648856793}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox["raw", TraditionalForm], 
          DynamicLocation["VertexID$2", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{3.166287946721399, 4.805995829045587}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox["time", TraditionalForm], 
          DynamicLocation["VertexID$3", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$3"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{5.8461396775120305`, 3.885007343524074}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$4"], 
         InsetBox[
          FormBox["forwardvelocity", TraditionalForm], 
          DynamicLocation["VertexID$4", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$4"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{5.669997344590556, 2.7018914629765556`}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$5"], 
         InsetBox[
          FormBox["forwardacceleration", TraditionalForm], 
          DynamicLocation["VertexID$5", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$5"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{3.149621047184535, 5.156552254560349}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$6"], 
         InsetBox[
          FormBox["upacceleration", TraditionalForm], 
          DynamicLocation["VertexID$6", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$6"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{2.200869266364911, 4.6707706182936795`}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$7"], 
         InsetBox[
          FormBox["rightacceleration", TraditionalForm], 
          DynamicLocation["VertexID$7", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$7"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{2.8952198052704325`, 5.4851136842882475`}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$8"], 
         InsetBox[
          FormBox["upvelocity", TraditionalForm], 
          DynamicLocation["VertexID$8", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$8"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{0.9027212364614212, 4.815902727797725}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$9"], 
         InsetBox[
          FormBox["rightvelocity", TraditionalForm], 
          DynamicLocation["VertexID$9", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$9"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{7.078353381360227, 3.167252772778665}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$10"], 
         InsetBox[
          FormBox["forwardposition", TraditionalForm], 
          DynamicLocation["VertexID$10", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$10"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{2.2108150101249455`, 6.234485306900033}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$11"], 
         InsetBox[
          FormBox["upposition", TraditionalForm], 
          DynamicLocation["VertexID$11", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$11"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{0., 4.889213181761271}, 0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$12"], 
         InsetBox[
          FormBox["rightposition", TraditionalForm], 
          DynamicLocation["VertexID$12", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$12"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{7.920684797833441, 2.7036374158462197`}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$13"], 
         InsetBox[
          FormBox["distancecorrected", TraditionalForm], 
          DynamicLocation["VertexID$13", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$13"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{3.268536155322944, 5.807147968950849}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$14"], 
         InsetBox[
          FormBox["pitchvelocity", TraditionalForm], 
          DynamicLocation["VertexID$14", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$14"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{2.8824960497538825`, 6.745078381768025}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$15"], 
         InsetBox[
          FormBox["pitchacceleration", TraditionalForm], 
          DynamicLocation["VertexID$15", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$15"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{2.580864848724917, 5.1338154125056965`}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$16"], 
         InsetBox[
          FormBox["yawvelocity", TraditionalForm], 
          DynamicLocation["VertexID$16", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$16"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{1.7111483309435491`, 5.626408517729502}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$17"], 
         InsetBox[
          FormBox["yawacceleration", TraditionalForm], 
          DynamicLocation["VertexID$17", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$17"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{2.475941899754448, 4.346695889541542}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$18"], 
         InsetBox[
          FormBox["rollvelocity", TraditionalForm], 
          DynamicLocation["VertexID$18", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$18"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{1.5103885330250506`, 4.338689134568404}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$19"], 
         InsetBox[
          FormBox["rollacceleration", TraditionalForm], 
          DynamicLocation["VertexID$19", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$19"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{3.039609372267255, 3.939024777637283}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$20"], 
         InsetBox[
          FormBox["pitch", TraditionalForm], 
          DynamicLocation["VertexID$20", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$20"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{3.4619833939364257`, 3.7490188471079824`}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$21"], 
         InsetBox[
          FormBox["yaw", TraditionalForm], 
          DynamicLocation["VertexID$21", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$21"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{2.9698958580945134`, 4.563412626967778}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$22"], 
         InsetBox[
          FormBox["roll", TraditionalForm], 
          DynamicLocation["VertexID$22", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$22"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{4.52963458220096, 4.0336084547179665`}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$23"], 
         InsetBox[
          FormBox["heading", TraditionalForm], 
          DynamicLocation["VertexID$23", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$23"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{3.879230025557429, 3.4883746616381353`}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$24"], 
         InsetBox[
          FormBox["drift", TraditionalForm], 
          DynamicLocation["VertexID$24", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$24"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{5.25448933423141, 4.504163746639023}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$25"], 
         InsetBox[
          FormBox["watervelocity", TraditionalForm], 
          DynamicLocation["VertexID$25", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$25"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{4.639929634314566, 4.479993763657811}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$26"], 
         InsetBox[
          FormBox["waterflowvelocity", TraditionalForm], 
          DynamicLocation["VertexID$26", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$26"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{4.5296598411332845`, 4.729238532669815}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$27"], 
         InsetBox[
          FormBox["waterflowdirection", TraditionalForm], 
          DynamicLocation["VertexID$27", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$27"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{5.05723846679422, 4.274203177044085}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$28"], 
         InsetBox[
          FormBox["airvelocity", TraditionalForm], 
          DynamicLocation["VertexID$28", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$28"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{4.265421131626264, 4.0492809520722}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$29"], 
         InsetBox[
          FormBox["airflowvelocity", TraditionalForm], 
          DynamicLocation["VertexID$29", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$29"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{4.3377338829584735`, 4.349560476223513}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$30"], 
         InsetBox[
          FormBox["airflowdirection", TraditionalForm], 
          DynamicLocation["VertexID$30", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$30"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{4.01708676290758, 5.294404025703519}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$31"], 
         InsetBox[
          FormBox["airmoisture", TraditionalForm], 
          DynamicLocation["VertexID$31", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$31"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{4.5625120221384075`, 5.72191909314769}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$32"], 
         InsetBox[
          FormBox["airdensity", TraditionalForm], 
          DynamicLocation["VertexID$32", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$32"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{3.9348594362607336`, 5.6142287756535865`}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$33"], 
         InsetBox[
          FormBox["airpressure", TraditionalForm], 
          DynamicLocation["VertexID$33", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$33"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{3.8060046609135805`, 5.4287036213147655`}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$34"], 
         InsetBox[
          FormBox["airtemperature", TraditionalForm], 
          DynamicLocation["VertexID$34", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$34"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{4.314721899381304, 5.570287379400719}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$35"], 
         InsetBox[
          FormBox["watersalinity", TraditionalForm], 
          DynamicLocation["VertexID$35", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$35"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{5.094568869337565, 5.781539008139986}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$36"], 
         InsetBox[
          FormBox["waterdensity", TraditionalForm], 
          DynamicLocation["VertexID$36", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$36"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{4.446249722882878, 5.370228571115464}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$37"], 
         InsetBox[
          FormBox["watertemperature", TraditionalForm], 
          DynamicLocation["VertexID$37", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$37"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{4.944602856665251, 5.02055612848746}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$38"], 
         InsetBox[
          FormBox["watercx", TraditionalForm], 
          DynamicLocation["VertexID$38", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$38"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{5.820591955117981, 5.157347261505979}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$39"], 
         InsetBox[
          FormBox["waterfrictionforce", TraditionalForm], 
          DynamicLocation["VertexID$39", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$39"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{4.6862299805465115`, 5.099181150988808}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$40"], 
         InsetBox[
          FormBox["aircx", TraditionalForm], 
          DynamicLocation["VertexID$40", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$40"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{5.521192166763635, 5.127854908576639}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$41"], 
         InsetBox[
          FormBox["airfrictionforce", TraditionalForm], 
          DynamicLocation["VertexID$41", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$41"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{6.312819136468284, 4.7368530368122235`}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$42"], 
         InsetBox[
          FormBox["totalfrictionforce", TraditionalForm], 
          DynamicLocation["VertexID$42", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$42"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{6.160047808193911, 3.3645334342624227`}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$43"], 
         InsetBox[
          FormBox["inertialforce", TraditionalForm], 
          DynamicLocation["VertexID$43", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$43"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{5.459781615672101, 4.065495408387635}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$44"], 
         InsetBox[
          FormBox["mass", TraditionalForm], 
          DynamicLocation["VertexID$44", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$44"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{6.771829451265141, 3.921773226727513}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$45"], 
         InsetBox[
          FormBox["totalforce", TraditionalForm], 
          DynamicLocation["VertexID$45", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$45"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{6.752171469311517, 4.777196659356001}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$46"], 
         InsetBox[
          FormBox["waterfrictionpower", TraditionalForm], 
          DynamicLocation["VertexID$46", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$46"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{6.539244258210848, 4.976038611262404}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$47"], 
         InsetBox[
          FormBox["airfrictionpower", TraditionalForm], 
          DynamicLocation["VertexID$47", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$47"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{6.441915731005078, 4.261240956349378}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$48"], 
         InsetBox[
          FormBox["totalfrictionpower", TraditionalForm], 
          DynamicLocation["VertexID$48", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$48"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{6.472975902682743, 3.1738167631121086`}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$49"], 
         InsetBox[
          FormBox["inertialpower", TraditionalForm], 
          DynamicLocation["VertexID$49", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$49"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{6.76300415565985, 3.5731567718757153`}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$50"], 
         InsetBox[
          FormBox["totalpower", TraditionalForm], 
          DynamicLocation["VertexID$50", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$50"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{7.768297476295393, 5.116236308346296}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$51"], 
         InsetBox[
          FormBox["waterfrictionenergy", TraditionalForm], 
          DynamicLocation["VertexID$51", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$51"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{7.561134472989913, 5.41212431975407}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$52"], 
         InsetBox[
          FormBox["airfrictionenergy", TraditionalForm], 
          DynamicLocation["VertexID$52", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$52"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{8.227119518653106, 5.211536669115439}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$53"], 
         InsetBox[
          FormBox["totalfrictionenergy", TraditionalForm], 
          DynamicLocation["VertexID$53", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$53"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{6.681219097272512, 4.23521883838195}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$54"], 
         InsetBox[
          FormBox["kineticenergy", TraditionalForm], 
          DynamicLocation["VertexID$54", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$54"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{7.775976380976801, 4.616061218727966}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$55"], 
         InsetBox[
          FormBox["totalenergy", TraditionalForm], 
          DynamicLocation["VertexID$55", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$55"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{3.968632465811821, 2.571797188824046}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$56"], 
         InsetBox[
          FormBox["strokeposition", TraditionalForm], 
          DynamicLocation["VertexID$56", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$56"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{3.542560479864739, 2.67180263640346}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$57"], 
         InsetBox[
          FormBox["length", TraditionalForm], 
          DynamicLocation["VertexID$57", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$57"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{3.2431566600267203`, 2.0138130061675676`}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$58"], 
         InsetBox[
          FormBox["strokemark", TraditionalForm], 
          DynamicLocation["VertexID$58", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$58"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{2.7791336361098513`, 1.3753374939257328`}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$59"], 
         InsetBox[
          FormBox["stroketotal", TraditionalForm], 
          DynamicLocation["VertexID$59", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$59"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{2.724344098112377, 0.7813697175676269}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$60"], 
         InsetBox[
          FormBox["j", TraditionalForm], 
          DynamicLocation["VertexID$60", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$60"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{3.28063257887957, 1.577290392867995}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$61"], 
         InsetBox[
          FormBox["strokephase", TraditionalForm], 
          DynamicLocation["VertexID$61", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$61"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{3.3641732674335145`, 0.655027225159889}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$62"], 
         InsetBox[
          FormBox["i", TraditionalForm], 
          DynamicLocation["VertexID$62", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$62"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{4.489930278155188, 3.6186259576421165`}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$63"], 
         InsetBox[
          FormBox["strokerate", TraditionalForm], 
          DynamicLocation["VertexID$63", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$63"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{5.315168551656197, 3.3778792693659736`}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$64"], 
         InsetBox[
          FormBox["distanceperstroke", TraditionalForm], 
          DynamicLocation["VertexID$64", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$64"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{5.023804807760728, 2.9407466777833253`}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$65"], 
         InsetBox[
          FormBox["forwardvelocitystroke", TraditionalForm], 
          DynamicLocation["VertexID$65", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$65"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{4.823749554108427, 1.7847410801841903`}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$66"], 
         InsetBox[
          FormBox["forwardaccelerationstroke", TraditionalForm], 
          DynamicLocation["VertexID$66", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$66"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{4.552829859632244, 0.6714951088452303}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$67"], 
         InsetBox[
          FormBox["forwardaccelerationstrokenormalized", TraditionalForm], 
          DynamicLocation["VertexID$67", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$67"], 
       TagBox[{
         TagBox[
          StyleBox[
           DiskBox[{4.303713630136838, 0.}, 0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$68"], 
         InsetBox[
          FormBox["forwardaccelerationstrokemean", TraditionalForm], 
          DynamicLocation["VertexID$68", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$68"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{3.960978150271417, 0.6077278032751336}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$69"], 
         InsetBox[
          FormBox["forwardaccelerationstrokegarbage", TraditionalForm], 
          DynamicLocation["VertexID$69", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$69"], 
       TagBox[{
         TagBox[
          StyleBox[
           
           DiskBox[{3.802360475320724, 1.6728609474658809`}, 
            0.045176602803756134`], 
           GrayLevel[1], StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$70"], 
         InsetBox[
          FormBox["forwardaccelerationgarbage", TraditionalForm], 
          DynamicLocation["VertexID$70", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> 
        "VertexLabelID$70"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{-5.520000000000191, 
       816.0200000000002}, {-319.6592000000004, 313.706491430219}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FrameTicks->None,
  ImageSize->800]], "Output",
 CellChangeTimes->{{3.609160332357347*^9, 3.60916056083698*^9}, {
  3.6091606898110447`*^9, 3.6091607351836*^9}, {3.609160820263445*^9, 
  3.609160867834985*^9}}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{958, 1156},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
ShowSelection->True,
FrontEndVersion->"9.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (November 20, \
2012)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 144, 2, 80, "Section"],
Cell[CellGroupData[{
Cell[748, 28, 122, 2, 44, "Subsection"],
Cell[873, 32, 3059, 66, 131, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3969, 103, 101, 1, 44, "Subsection"],
Cell[4073, 106, 24486, 509, 1576, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[28596, 620, 104, 1, 44, "Subsection"],
Cell[28703, 623, 7042, 161, 267, "Input"],
Cell[35748, 786, 6820, 175, 250, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[42605, 966, 196, 2, 44, "Subsection"],
Cell[42804, 970, 1984, 51, 114, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44825, 1026, 105, 1, 44, "Subsection"],
Cell[44933, 1029, 8783, 204, 641, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53753, 1238, 110, 1, 44, "Subsection"],
Cell[53866, 1241, 31023, 771, 2783, "Input"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[84938, 2018, 141, 2, 50, "Section"],
Cell[85082, 2022, 44335, 1009, 2783, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[129454, 3036, 140, 2, 50, "Section"],
Cell[CellGroupData[{
Cell[129619, 3042, 251, 5, 28, "Input"],
Cell[129873, 3049, 106, 2, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[130016, 3056, 163, 2, 44, "Subsection"],
Cell[CellGroupData[{
Cell[130204, 3062, 384, 7, 46, "Input"],
Cell[130591, 3071, 618, 16, 43, "Output"],
Cell[131212, 3089, 247, 5, 28, "Output"]
}, Open  ]],
Cell[131474, 3097, 1862, 32, 63, "Input"],
Cell[CellGroupData[{
Cell[133361, 3133, 135, 2, 28, "Input"],
Cell[133499, 3137, 771, 13, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[134307, 3155, 209, 4, 28, "Input"],
Cell[134519, 3161, 4790, 88, 114, "Output"]
}, Open  ]],
Cell[139324, 3252, 2913, 69, 301, "Input"],
Cell[142240, 3323, 4193, 106, 216, "Input"],
Cell[146436, 3431, 9483, 246, 454, "Input"],
Cell[CellGroupData[{
Cell[155944, 3681, 8907, 202, 573, "Input"],
Cell[164854, 3885, 515743, 8475, 733, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[680634, 12365, 235, 5, 28, "Input"],
Cell[680872, 12372, 1316, 32, 63, "Output"]
}, Open  ]],
Cell[682203, 12407, 295, 7, 28, "Input"],
Cell[682501, 12416, 201, 4, 28, "Input"],
Cell[682705, 12422, 206, 5, 28, "Input"],
Cell[682914, 12429, 340, 7, 28, "Input"],
Cell[CellGroupData[{
Cell[683279, 12440, 248, 5, 28, "Input"],
Cell[683530, 12447, 683, 14, 80, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[684274, 12468, 86, 1, 50, "Section"],
Cell[684363, 12471, 127, 2, 30, "Text"],
Cell[684493, 12475, 126, 2, 30, "Text"],
Cell[684622, 12479, 116, 2, 30, "Text"],
Cell[684741, 12483, 150, 2, 30, "Text"],
Cell[684894, 12487, 142, 2, 30, "Text"],
Cell[CellGroupData[{
Cell[685061, 12493, 21810, 488, 1661, "Input"],
Cell[706874, 12983, 91900, 1904, 560, "Output"],
Cell[798777, 14889, 901, 13, 28, "Output"],
Cell[799681, 14904, 2546, 38, 199, "Output"],
Cell[802230, 14944, 901, 13, 28, "Output"],
Cell[803134, 14959, 901, 13, 28, "Output"],
Cell[804038, 14974, 963, 15, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[805038, 14994, 397, 11, 28, "Input"],
Cell[805438, 15007, 142, 2, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[805617, 15014, 395, 12, 28, "Input"],
Cell[806015, 15028, 135, 3, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[806187, 15036, 1856, 43, 97, "Input"],
Cell[808046, 15081, 62345, 1556, 677, "Output"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
