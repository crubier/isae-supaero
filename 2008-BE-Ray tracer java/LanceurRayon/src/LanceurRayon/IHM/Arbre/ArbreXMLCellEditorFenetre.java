/*
 * ArbreXMLCellEditorFenetre.java
 *
 * Created on 3 avril 2008, 19:53
 */

package LanceurRayon.IHM.Arbre;

import LanceurRayon.LanceurRayonApp;
import LanceurRayon.Util.Liste;
import java.awt.Component;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.util.EventObject;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreeCellEditor;
import javax.swing.tree.TreePath;
import org.jdesktop.application.Action;

/**
 *
 * @author  Lecrubier
 */
public class ArbreXMLCellEditorFenetre extends javax.swing.JFrame implements ActionListener, TreeCellEditor,
	TreeSelectionListener{
	
	private Liste<CellEditorListener> listeners;
	private ArbreXMLNode node;
	private JTreeXML tree;
	private TreePath lastPath;
	
	/** Creates new form ArbreXMLCellEditorFenetre
	 * 
	 * @param tree 
	 */
	public ArbreXMLCellEditorFenetre(JTreeXML tree) {
		initComponents();
		this.tree=tree;
		this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		tree.addTreeSelectionListener(this);
		listeners = new Liste<CellEditorListener>();
		Attributs.setComponentPopupMenu(this.jPopupMenu1);
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        paneOutils = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        paneEdition = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Attributs = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        Texte = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();

        jPopupMenu1.setName("jPopupMenu1"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(LanceurRayon.LanceurRayonApp.class).getContext().getActionMap(ArbreXMLCellEditorFenetre.class, this);
        jMenuItem1.setAction(actionMap.get("supprimerAttribut")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setAction(actionMap.get("ajouterAttribut")); // NOI18N
        jMenuItem2.setName("jMenuItem2"); // NOI18N
        jPopupMenu1.add(jMenuItem2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 200, 300));
        setIconImage(LanceurRayonApp.getInstance(LanceurRayon.LanceurRayonApp.class).getContext().getResourceMap(LanceurRayonApp.class).getImageIcon("Application.icon").getImage());
        setName("Form"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        paneOutils.setName("paneOutils"); // NOI18N

        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); // NOI18N

        jButton1.setAction(actionMap.get("valider")); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHideActionText(true);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setName("jButton1"); // NOI18N
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton1);

        jButton2.setAction(actionMap.get("annuler")); // NOI18N
        jButton2.setFocusable(false);
        jButton2.setHideActionText(true);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setName("jButton2"); // NOI18N
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton2);

        javax.swing.GroupLayout paneOutilsLayout = new javax.swing.GroupLayout(paneOutils);
        paneOutils.setLayout(paneOutilsLayout);
        paneOutilsLayout.setHorizontalGroup(
            paneOutilsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneOutilsLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(125, Short.MAX_VALUE))
        );
        paneOutilsLayout.setVerticalGroup(
            paneOutilsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
        );

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(LanceurRayon.LanceurRayonApp.class).getContext().getResourceMap(ArbreXMLCellEditorFenetre.class);
        jSeparator1.setBackground(resourceMap.getColor("jSeparator1.background")); // NOI18N
        jSeparator1.setName("jSeparator1"); // NOI18N

        paneEdition.setName("paneEdition"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        Attributs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Attributs.setName("Attributs"); // NOI18N
        Attributs.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                AttributsPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(Attributs);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        Texte.setName("Texte"); // NOI18N
        Texte.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TexteKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(Texte);

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        javax.swing.GroupLayout paneEditionLayout = new javax.swing.GroupLayout(paneEdition);
        paneEdition.setLayout(paneEditionLayout);
        paneEditionLayout.setHorizontalGroup(
            paneEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
        );
        paneEditionLayout.setVerticalGroup(
            paneEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneEditionLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneOutils, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
            .addComponent(paneEdition, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(paneOutils, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paneEdition, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
		this.cancelCellEditing();
	}//GEN-LAST:event_formWindowClosed

	private void AttributsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_AttributsPropertyChange
		if(evt.getPropertyName().compareTo("tableCellEditor")==0) {
			if(Attributs.getSelectedRow()!=-1) {
			node.getElement().setAttribute(
					(String)Attributs.getValueAt(Attributs.getSelectedRow(), 0), 
					(String)Attributs.getValueAt(Attributs.getSelectedRow(), 1)
				);
			}
			
		}
		
		
	}//GEN-LAST:event_AttributsPropertyChange

	private void TexteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TexteKeyTyped
		node.getElement().setText(Texte.getText());
	}//GEN-LAST:event_TexteKeyTyped

	@Action
	public void valider() {
		ChangeEvent e = new ChangeEvent(this);
		for(CellEditorListener li:listeners) {
			li.editingStopped(e);
		}
		((ArbreXMLModel)tree.getModel()).treeStructureChanged();
		this.dispose();
	}

	@Action
	public void annuler() {
		ChangeEvent e = new ChangeEvent(this);
		for(CellEditorListener li:listeners) {
			li.editingCanceled(e);
		}
		this.dispose();
	}

	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Attributs;
    private javax.swing.JTextPane Texte;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel paneEdition;
    private javax.swing.JPanel paneOutils;
    // End of variables declaration//GEN-END:variables

	public Component getTreeCellEditorComponent(JTree tree, Object value, boolean isSelected, boolean expanded, boolean leaf, int row) {
		this.setVisible(true);
		this.toFront();
		return this;
	}

	public Object getCellEditorValue() {
		return node;
	}

	public boolean isCellEditable(EventObject event) {
		boolean retValue = false;
		
		if (event != null) {
			if (event.getSource() instanceof JTree) {
				setTree((JTreeXML) event.getSource());
				if (event instanceof MouseEvent) {
					TreePath path = tree.getPathForLocation(
						((MouseEvent) event).getX(),
						((MouseEvent) event).getY());
					node=(ArbreXMLNode) path.getLastPathComponent();
					Attributs.setModel(new TableModelXML(node));
					Texte.setText(node.getElement().getText());
				}
			}
		}
		retValue=true;
		if (retValue) {
			retValue = prepareForEditing();
		}
		this.toFront();
		return retValue;
	}

	public boolean shouldSelectCell(EventObject anEvent) {
		return true;
	}

	public boolean stopCellEditing() {
		ChangeEvent e = new ChangeEvent(this);
		for(CellEditorListener li:listeners) {
			li.editingStopped(e);
		}
		this.setVisible(false);
		tree.getModel().valueForPathChanged(lastPath, node);
		return true;
	}

	public void cancelCellEditing() {
		ChangeEvent e = new ChangeEvent(this);
		for(CellEditorListener li:listeners) {
			li.editingCanceled(e);
		}
		this.setVisible(false);
	}

	public void addCellEditorListener(CellEditorListener l) {
		listeners.add(l);
	}

	public void removeCellEditorListener(CellEditorListener l) {
		listeners.remove(l);
	}

	public JTreeXML getTree() {
		return tree;
	}

	public void setTree(JTreeXML tree) {
		this.tree = tree;
	}

	public void actionPerformed(ActionEvent e) {
//		if (tree != null && lastPath != null && e.getModifiers()==ActionEvent.CTRL_MASK) {
//			tree.startEditingAtPath(lastPath);
//		}
	}

	public void valueChanged(TreeSelectionEvent e) {
		if (tree != null) {
			if (tree.getSelectionCount() == 1) {
				lastPath = tree.getSelectionPath();
				node=(ArbreXMLNode) lastPath.getLastPathComponent();
			} else {
				lastPath = null;
			}
		}
	}
	
	public void rafraichir() {
		if(node!=null) {
			Attributs.setModel(new TableModelXML(node));
			Texte.setText(node.getElement().getText());
			this.setTitle(node.getElement().getName());
		}
		this.toFront();
	}

	private boolean prepareForEditing() {
		if(node!=null) {
			Attributs.setModel(new TableModelXML(node));
			Texte.setText(node.getElement().getText());
			this.setTitle(node.getElement().getName());
			return true;
		}
		else {
			Logger.getLogger("Journal").log(Level.WARNING,"Objet a editer vide !");
			return false;
		}
	}

	@Action
	public void supprimerAttribut() {
		node.getElement().removeAttribute((String) Attributs.getValueAt(Attributs.getSelectedRow(), 0));
		rafraichir();
	}

	@Action
	public void ajouterAttribut() {
		node.getElement().setAttribute(JOptionPane.showInputDialog("Nom de l'attribut :"),"");
		rafraichir();
	}


	
}
