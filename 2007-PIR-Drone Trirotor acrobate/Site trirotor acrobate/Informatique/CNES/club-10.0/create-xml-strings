#!/bin/sh

# This script is used by some Makefiles as a filter to convert
# text files containing lines of the form :
#
#    ONE_DOT_ZERO_STRING     "1.0"
#    UTF8_ENCODING           "UTF-8"
#    LS_FEATURE              "LS"
#    CORE_FEATURE            "Core"
#
# into header files containing lines of the form
#
#    static const XMLCh ONE_DOT_ZERO_STRING [] = {
#    chDigit_1, chPeriod, chDigit_0,  chNull
#    };
#    static const XMLCh UTF8_ENCODING [] = {
#    chLatin_U, chLatin_T, chLatin_F, chDash, chDigit_8,  chNull
#    };
#    static const XMLCh LS_FEATURE [] = {
#    chLatin_L, chLatin_S,  chNull
#    };
#    static const XMLCh CORE_FEATURE [] = {
#    chLatin_C, chLatin_o, chLatin_r, chLatin_e,  chNull
#    };
#
# Such header files can be included by C++ source files to handle
# string constants using the natural XML encoding of the Xerces
# library, while letting the developer use standard strings
#
# Copyright (C) 2005 Luc Maisonobe
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with
# or without modification, are permitted provided that
# the following conditions are met:
# 
#    Redistributions of source code must retain the
#    above copyright notice, this list of conditions and
#    the following disclaimer. 
#    Redistributions in binary form must reproduce the
#    above copyright notice, this list of conditions and
#    the following disclaimer in the documentation
#    and/or other materials provided with the
#    distribution. 
#    Neither the names of spaceroots.org, spaceroots.com
#    nor the names of their contributors may be used to
#    endorse or promote products derived from this
#    software without specific prior written permission. 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
# THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

sedscript=/tmp/create-xml-strings.sed.$$
trap "test -f $sedscript && rm $sedscript" 0
trap "exit 1" 1 2 3 15

convert ()
{
  while read key string ; do
    echo "static const XMLCh $key [] = {"
    echo "$string" \
    | sed 's,"\(.*\)",\1,' \
    | sed 's,\(.\),\1,g' \
    | tr '' '\12' \
    | sed -f $sedscript \
    | tr '\12' ' '
    echo "chNull"
    echo "};"
  done
}

# create a sed script converting one character per line
tr '' '\12' > $sedscript <<'EOF'
/[a-zA-Z]/ {s;\(.\);chLatin_\1,;b}
/[0-9]/    {s;\(.\);chDigit_\1,;b}
/\//       {s;.;chForwardSlash,;b}
/'/        {s;.;chSingleQuote,;b}
/\\/       {s;.;chBackSlash,;b}
EOF
for spec in '	/HTab'      '&/Ampersand'   '*/Asterisk'    '@/At'         \
            '!/Bang'        '\^/Caret'      '>/CloseAngle'  '}/CloseCurly' \
            ')/CloseParen'  ']/CloseSquare' ':/Colon'       ',/Comma'      \
            '-/Dash'        '\$/DollarSign' '"/DoubleQuote' '=/Equal'      \
            '`/Grave'       '</OpenAngle'   '{/OpenCurly'   '(/OpenParen'  \
            '\[/OpenSquare' '%/Percent'     '\./Period'     '|/Pipe'       \
            '+/Plus'        '#/Pound'       '?/Question'    ' /Space'      \
            ';/SemiColon'   '~/Tilde'       '_/Underscore'  ; do
  echo "$spec" \
  |  sed 's|\(.*\)/\(.*\)|/\1/ {s;.;ch\2,;b}|' \
  | tr '' '\12' >> $sedscript
done

# apply the string converter to each line of the standard input
echo "//"
echo "// DO NOT EDIT ! This file is automatically generated"
echo "//"
echo ""
sed -n -e 's,\\,\\\\,g' -e "s,^ *\([^ ]*\) *\(\".*\"\) *$,\1 \2,p" | convert
