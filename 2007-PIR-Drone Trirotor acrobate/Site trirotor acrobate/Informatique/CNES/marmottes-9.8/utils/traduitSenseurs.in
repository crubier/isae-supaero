#! /bin/sh

#******************************************************************************
#$<AM-V1.0>
#
#$Type
#       DEF
#
#$Projet
#       Marmottes
#
#$Application
#       traduitSenseurs
#
#$Nom
#       traduitSenseurs
#
#$Resume
#       script de traduction de fichiers senseurs
#
#$Description
#       Ce script permet de traduire un fichier de senseurs ainsi que
#       tous les fichiers inclus. Si les fichiers sont gérés en
#       configuration par RCS ou SCCS, les fichiers modifiés qui ont
#       été explicitement édités par le script sont archivés par le
#       script.
#
#$Contenu
#       Fonctions nettoyage, reception_signal, cherche_dico, construit_sed,
#                 extrait_fichier, archive_fichier,
#                 fichiers_inclus, construit_liste, traduit_fichier
#
#$Historique
#       $Log: traduitSenseurs.in,v $
#       Revision 1.1  2000/12/05 12:52:13  luc
#       version initiale (transfert depuis le répertoire parent)
#
#$Version
#       $Id: traduitSenseurs.in,v 1.1 2000/12/05 12:52:13 luc Exp $
#
#$Auteur
#       L. Maisonobe CNES
#$<>
#*****************************************************************************

nettoyage()
{ echo "nettoyage des fichiers de travail"

  for locale1 in "" $fichiers_extraits ; do
    if [ ! -z "$locale1" -a -w "$locale1" ] ; then
      echo "annulation de l'extraction de $locale1"
      if [ -d RCS -a -f RCS/$locale1,v ] ; then
        co -u $locale1
      else
        if [ -d SCCS -a -f SCCS/s.$locale1 ] ; then
          sccs unedit $locale1
        fi
      fi
    fi
  done

  for locale1 in "$tmp" "$sed_en" "$sed_fr" ; do
    if [ ! -z "$locale1" -a -f "$locale1" ] ; then
      rm -f $locale1
    fi
  done

}

reception_signal()
{ echo "réception d'un signal : arrêt prématuré"
  exit 1
}

cherche_dico()
{ # recherche du dictionnaire français anglais du domaine marmottes
  # $1 : chemin de recherche des fichiers de traduction (club)
  # $2 : nom de la variable devant contenir le nom du fichier

  eval $2=""
  for locale1 in `echo ${1}: | sed 's,::,:.:,g' | tr -s ':' '\012'` ; do
    if [ -r $locale1/en/marmottes ] ; then
      eval $2=$locale1/en/marmottes
      return 0
    fi
  done

  return 1

}

construit_sed()
{ # construction des fichiers de directive sed pour les traductions
  # $1 : nom du fichier contenant les chaînes du domaine marmottes
  # $2 : nom du fichier de traduction français -> anglais
  # $3 : nom du fichier de traduction anglais  -> français

  # cette fonction modifie la variable $locale1
  # ainsi que les fichiers $tmp et ceux passés par $2 et $3

  # extraction des couples de mots-clefs origine et traduit :
  # le premier sed filtre uniquement les mots-clefs par les étapes suivantes :
  #   - suppression des commentaires
  #   - suppression des \" (pour éviter les problèmes dans la suite)
  #   - suppression des champs entre "" contenant des blancs
  #   - suppression des "" et des blancs
  #   - suppression des lignes vides
  # le tr place un mot sur chaque ligne
  # le second sed groupe les mots par couple en éliminant un \n sur deux
  sed -e 's,#.*,,'             \
      -e 's,\\",,g'            \
      -e 's,"[^ "]* [^"]*",,g' \
      -e 's,[" ],,g'           \
      -e '/^$/d'               < $1 \
  | tr -s ' \011' '\012\012' \
  | sed -e 'N' -e 's,\n, ,'> $tmp

  # constitution des directives de traduction pour chaque mot-clef il
  # faut reconnaître le mot-clef mais aussi sa frontière sinon on a
  # des problèmes avec les mots-clefs qui sont des sous-chaînes des
  # autres mots-clefs (comme "i" ou "et"). Pour faciliter les
  # expressions rationnelles, on ajoute un blanc en début et fin de
  # chaque ligne et autour des caractères spéciaux '{', '}', '.', et
  # '#', on ne cherche alors que les mots-clefs entourés de blancs.
  # de plus pour protéger les éventuels mots-clefs dans les
  # commentaires, on parsème tous les commentaires de caractères '#'
  for locale1 in $2 $3 ; do
    cat > $locale1 <<EOF
s,\\(.*\\), \\1 ,
s,\\([{}.#]\\), \\1 ,g
:b1
/#[^#][^#]/{ s,\\(#[^#]\\)\\([^#]\\),\\1#\\2,
             bb1
           }
EOF
  done

  sed -e 's,\([^ ]*\)  *\([^ ]*\),s# \1 # \2 #g,' < $tmp >> $2
  sed -e 's,\([^ ]*\)  *\([^ ]*\),s# \2 # \1 #g,' < $tmp >> $3

  # élimination des protections établies plus haut
  for locale1 in $2 $3 ; do
    cat >> $locale1 <<EOF
:b2
/#[^#]#[^#]/{ s,\\(.*#[^#]\\)#\\([^#]\\),\\1\\2,
              bb2
            }
s, \\([{}.#]\\) ,\\1,g
s,^ \\(.*\\) \$,\\1,
EOF

  # traduction des inclusions (y compris celles qui sont en commentaires ...)
  echo 's,<\( *[^ <>][^ <>]*\)\.fr\( *\)>,<\1.en\2>,g'  >> $2
  echo 's,<\( *[^ <>][^ <>]*\)\.en\( *\)>,<\1.fr\2>,g'  >> $3

  done

}

extrait_fichier()
{ # extraction d'un fichier d'un système de gestion de configuration
  # $1 : nom du fichier à extraire
  # $2 : nom d'une variable mémorisant les extractions
  #      réalisées (concaténation des divers $1)

  # cette fonction ne modifie aucune variable du type $localei
  # elle modifie la variable passée par $2

  if [ -w $1 ] ; then
    return 0
  fi

  # il faut extraire le fichier
  if [ -d RCS -a -f RCS/$1,v ] ; then
    co -l $1 || return 1
    eval $2="\"\$$2 $1\""
    return 0
  else
    if [ -d SCCS -a -f SCCS/s.$1 ] ; then
      sccs edit $1 || return 1
      eval $2="\"\$$2 $1\""
      return 0
    else
      echo "le fichier $1 n'a pas été trouvé"
      echo "(ni directement, ni sous RCS, ni sous SCCS)"
      return 1
    fi
  fi

}

archive_fichier()
{ # archivage éventuel dans un système de gestion de configuration
  # $1 : nom du fichier à archiver
  # $2 : nom du fichier origine
  # $3 : liste des extractions réalisées

  # cette fonction modifie la variable $locale4
  # elle modifie le fichier $tmp

  for locale4 in "" $3 ; do
    if [ ! -z "$locale4" -a "$1" = "$locale4" ] ; then
      # il faut archiver le fichier, il avait été extrait par le script
      if [ -d RCS -a -f RCS/$1,v ] ; then
        # RCS se charge seul de déterminer si le fichier a changé
        echo "reconstruction par traduction de $2" | ci -u $1
      else
        if [ -d SCCS -a -f SCCS/s.$1 ] ; then
          # le fichier a-t-il changé ?
          sccs diffs $1 \
          | sed -n -e '/^</p' -e '/^>/p' | sed -e '/\%\Z\%/d' \
          > $tmp
    
          if [ `wc -l < $tmp` -eq 0 ] ; then
             sccs unedit $1
          else
             sccs delget -y"reconstruction par traduction de $2" $1
          fi
    
        fi
      fi
    fi
  done

  return 0

}

fichiers_inclus()
{ # recherche des fichiers inclus par un fichier particulier
  # $1 : nom du fichier de base

  # cette fonction ne modifie aucune variable

    sed -e 's,#.*,,' -e 's,<,|<,g' -e 's,>,>|,g' < $1 \
  | tr '|' '\012' \
  | sed -n 's,< *\([^ <>]*\) *>,\1,p' \
  | tr -s '\012' ' '

}

construit_liste()
{ # constitution récursive de la liste des fichiers nécessaires
  # $1 : nom du fichier de base
  # $2 : nom d'une variable devant contenir les fichiers inclus par $1
  # $3 : nom d'une variable mémorisant les extractions réalisées

  # cette fonction modifie les variables $locale1 à $locale4
  # ainsi que les variables passées par $2 et $3

  eval $2=""

  locale1="$1"
  locale2="$1"
  while [ ! -z "$locale2" ] ; do
    # boucle de récursivité
    # (chaque itération correspond au traitement d'un niveau d'inclusion)
    locale3=""

    for locale4 in $locale2 ; do
    # boucle de traitement des fichiers inclus au même niveau

     extrait_fichier $locale4 $3 || return 1

     # enrichissement de la liste pour le niveau suivant
     locale3="$locale3 `fichiers_inclus $locale4`"

    done

    # passage au niveau suivant
    locale2="$locale3"
    locale1="$locale1 $locale3"

  done

  eval $2="\"$locale1\""
  return 0

}

traduit_fichier()
{ # traduction de fichier de senseurs
  # $1 : nom du fichier à traduire
  # $2 : nom de la variable mémorisant les extractions réalisées

  # cette fonction modifie les variables $locale1 à $locale3 directement,
  # $locale4 par appel à la fonction archive_fichier,
  # ainsi que la variable passée par $2

  # décomposition du nom en racine et suffixe
  locale1=`echo $1 | sed 's,\(.*\)\.[^.]*$,\1,'`
  locale2=`echo $1 | sed "s,$locale1.\(.*\),\1,"`
  if [ -z "$locale1" -o -z "$locale2" ] ; then
    echo "le nom $1 n'a pas la forme racine.suffixe"
    return 1
  fi

  if [ $locale2 = fr ] ; then
    locale3=en
  else
    if [ $locale2 = en ] ; then
      locale3=fr
    else
      echo "le nom $1 ne se termine ni par .fr ni par .en"
      return 1
    fi
  fi

  echo ""
  echo "construction du fichier $locale1.$locale3 à partir du fichier $1"

  extrait_fichier $locale1.$locale3 $2 || return 1

  # traduction proprement dite
  if [ "$locale3" = "en" ] ; then
    sed -f $sed_en < $1 > $locale1.$locale3
  else
    sed -f $sed_fr < $1 > $locale1.$locale3
  fi

  eval archive_fichier $locale1.$locale3 $1 \"\$$2\" || return 1

  return 0

}

if [ $# -ne 1 ] ; then
  echo "usage : traduitSenseurs fichier"
  exit 1
fi

tmp=/tmp/traduitSenseurs.tmp.$$
sed_en=/tmp/traduitSenseurs.sed.en.$$
sed_fr=/tmp/traduitSenseurs.sed.fr.$$

trap nettoyage 0
trap reception_signal 2 3

# construction des fichiers de directives de traduction
if [ -z "$@ma_cv_var_tradpath@" ] ; then
  echo "la variable d'environnement @ma_cv_var_tradpath@ n'est pas définie" 2>&1
  exit 1
fi
cherche_dico $@ma_cv_var_tradpath@ domaine_marmottes || exit 1
construit_sed $domaine_marmottes $sed_en $sed_fr

# décomposition de $1 en répertoire et nom de fichier
rep=`echo $1 | sed -n 's,\(.*\)/[^/]*,\1,p'`
if [ -z "$rep" ] ; then
  rep="."
  fic=$1
else
  fic=`echo $1 | sed "s,$rep/\(.*\),\1,"`
fi
if [ -z "$fic" ] ; then
  echo "\"$1\" n'est pas un nom de fichier valide"
  exit 1
fi

# positionnement dans le répertoire du fichier
if [ ! -d $rep ] ; then
  echo "le répertoire $rep n'existe pas"
  exit 1
fi

cd $rep

# prise en compte des fichiers inclus par le fichier de base
fichiers_extraits=""
construit_liste $fic liste_src fichiers_extraits || exit 1

for f in $liste_src ; do
 traduit_fichier $f fichiers_extraits || exit 1
done
