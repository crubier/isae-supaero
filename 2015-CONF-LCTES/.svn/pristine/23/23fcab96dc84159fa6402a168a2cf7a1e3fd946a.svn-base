
\subsection{Basic constructs}
The basic notion is the interactive component named \lstinline{interaction} which produces output and new current internal state flows from input and previous  internal state flows.


\subsubsection{Flows}
They encode state variables, input and output of 

Notion of activation/deactivation for continuous/discrete

Example

Basic types are : \lstinline{text}, \lstinline{boolean}, \lstinline{number} and \lstinline{activation} combined with \lstinline{in} and \lstinline{out}


\subsubsection{Interface}

\colorbox{codebackground}{
\lstinline{interface} $\mathit{name}$ \lstinline{is} $\mathit{definition}$
}



\subsubsection{Interaction Operators}
Corresponding to equations

Donner celles utilisées dans l'étude de cas. 

\subsubsection{Interaction components}

\colorbox{codebackground}{
\lstinline{interaction} $\mathit{pattern}$ 
\lstinline{is a} $\mathit{interface}$ 
\lstinline{defined by} $\mathit{expression}$
}

The basic interactors component

\subsubsection{Assembling interaction components}
Here we show how interaction components are assembled and reused to build a new interaction component

\subsection{Formal semantics}
We define the actual behaviors of a LIDL interaction system by using a
semantics of traces that permits to characterize the behaviors of a
LIDL description in terms of execution traces. Intuitively every
behavior of a LIDL interaction systems corresponds to the sequences of
the values each LIDL variable has. These values define a \textit{state} of the
system and a sequence of states defines a behavior of this system. 

\begin{definition}[Memory]
Let $I$ a set of identifiers of LIDL. $V$ is a set of values and
$\bot$ denotes an undefined value. We define $A = \{false,true\}$.
Every function $\sigma : I \rightarrow A \times (V \cup \{\bot\})$ defines a
memory of the LIDL interaction system.
\end{definition}
Every state of a LIDL interaction system is characterized by a
memory that gives a  value $\sigma(id)$ to each $id \in I$. This
value is a pair $(a,v)$ with $ a \in A$ and $v \in (V \cup
\bot)$ : $a$ indicates if $id$ is \textit{active} or not. If not, $v$ is
not significant and stays undefined ($v = \bot$). 
\begin{definition}[Trace]
An execution trace $\Sigma$ is a non empty, finite or infinite,
sequence of memories.
\end{definition} 
Some  identifiers  play a  particular  role  in the  LIDL  interaction
systems.  They are used to denote \textit{activation signals} that are
not valuated.  Their values are in $A \times \{\bot\}$.  By default
$\forall id  \in I,  \sigma(id) = (false,\bot)$.   In other  words, by
default, every value is not  active. To become  active and to  get a
significant data value, a behavior of the LIDL interaction system must be
activated.

\subsubsection{Semantics of LIDL expressions over finite traces}
The value (in $A \times (V \cup \{\bot\})$ of a LIDL expression $E$
over a finite trace $\Sigma = (\sigma_0,\ldots,\sigma_n)$ is defined
by induction on the structure of $E$. We denote $\Sigma \vdash E |
(a,v)$ to mean that $E$ has the value $(a,v)$ ($a \in A$ and $v \in  A
\times (V \cup \{\bot\})$) over $\Sigma$. \\
\noindent
\textbf{Constants values.} If k denotes a bool, number or text constant
then $\Sigma \vdash$ (\mbox{k})$ | (true,k)$. A particular activation
constant, $active$ is defined in LIDL such that $\Sigma \vdash (active) | (true, \bot)$.\\
\noindent
\textbf{Variables values.} $(\sigma_0,\ldots,\sigma_n) \vdash (x) |
\sigma_n(x)$ if $x$ denotes a variable in the language.\\
\noindent
\textbf{Boolean and arithemtic operators.} If $E_1,\ldots,E_m$ denote
expressions in LIDL and $\star$ is a boolean or arithmetic operator
then $$\frac{\Sigma \vdash (E_1) | (a_1,v_1),\ldots,\Sigma \vdash (E_m) |
  (a_m,v_m)}{\Sigma \vdash \star(E_1,\ldots,E_m) |
  (\bigwedge_{i=1}^{m}a_i, \star(v_1,\ldots,v_m))}$$\\
\noindent
\textbf{Operator previous.} If $E$ denotes an expression in LIDL,
$$\sigma_0 \vdash (\mbox{previous}(E)) | (false,\bot)$$
$$\frac{\Sigma
  \vdash (E) | (a,v)}{\Sigma \cdot \sigma \vdash (\mbox{previous}(E)) | (a,v)}$$\\
\noindent
\textbf{Operator isactive.} If $E$ denotes an expression in LIDL,
$$\frac{\Sigma \vdash (E) | (a,v)}{\Sigma \vdash (\mbox{isactive}(E)) | (true, a)}$$\\
\noindent
\textbf{Operator if then else.} If $E_1$ is a boolean expression in
LIDl and if $E_2$ and $E_3$ are expressions in LIDL,
$$\frac{\Sigma \vdash (E_1)|(a_1,v_1),\Sigma \vdash (E_2)|(a_2,v_2),
  \Sigma \vdash (E_3)|(a_3,v_3)}{\Sigma \vdash \mbox{if} (E_1)
  \mbox{then} (E_2) \mbox{else} (E_3) | 
   \left\{
     \begin{array}{ll}
       (false, \bot) & \mbox{if} a_1 = false \\
       (a_2,v_2) & \mbox{if} (a_1,v_1) = (true,true)\\
       (a_2,v_2) & \mbox{if} (a_1,v_1) = (true,false)
     \end{array}
     \right.
}
$$
\subsubsection{Compatibility  of   an  infinite  trace  with   a  LIDL
description} 

Behaviors that  are described by LIDL interactions are  infinite. The
semantics of a LIDL description corresponds to the set of the infinite
execution traces that  are compatible with it. We  note $\Sigma \vdash
D$ the  fact that an  infinite trace  $\Sigma$ is compatible  with the
LIDL description $D$.

An infinite trace denotes a behavior of $D$ if and only if every
finite prefix of $D$ is compatible with $D$ :
$$(\sigma_0,\ldots,\sigma_n,\ldots) \vdash D \Longleftrightarrow
\forall n \geq 0 , (\sigma_0,\ldots,\sigma_n) \vdash D$$

The compatibility of finite traces with $D$ is defined by the
following rules. A LIDL description is considered as  (and can be
unfold in) a set of elementary interactions, depicted by equations, regardless of its syntactical
structure. LIDL is a declarative language so the order of the equations is unimportant. 

A new identifier $\langle (interaction) \rangle
\in I$ is associated with every elementary interaction $(interaction)$. $\langle (interaction) \rangle$ denotes the activation signals
that trigger $(interaction)$ : $\sigma(\langle (interaction)
\rangle) \in A \times \{\bot\}$.\\
\noindent
\textbf{Compatibility with an equation.} If x is a LIDL identifier, E
is a LIDL expression :
$$\frac{(\sigma_0,\ldots,\sigma_n) \vdash \mbox{(E)} | (a,v),
  \sigma_n(\mbox{x}) =
  (a,v), \sigma_n(\langle \mbox{(x=E)} \rangle) = (true, \bot)}
{(\sigma_0,\ldots,\sigma_n) \vdash \mbox{(x = E)}}
$$\\
\noindent
\textbf{Compatibility with composition.} A set of interactions defines
a new interaction. If $int_1$ and $int_2$ are two interactions
$$\frac{\Sigma \vdash (int_1),\Sigma \vdash (int_2) }
{\Sigma \vdash ((int_1) (int_2))}$$\\
\noindent
\textbf{Compatibility with a guarded interaction.} Let G  an activation
identifier in LIDL ($\sigma(\mbox{I}) \in A \times \{\bot\}$) and $int$ 
a LIDL interaction :
%$$\frac{\begin{array}{c}
%(\sigma_0,\ldots,\sigma_n) \vdash (\mbox{G}) | (true,\bot),
%\sigma_n(\langle (\mbox{when} (\mbox{G}) \mbox{:} (int) ) \rangle) =
%(true, \bot),\\
% (\sigma_0,\ldots,\sigma_n) \vdash \langle (int) \rangle |
%(true,\bot)
%\end{array}}
%{(\sigma_0,\ldots,\sigma_n) \vdash (\mbox{when} (\mbox{G}) \mbox{:}
%  (int) )} 
%$$
$$\frac{
\begin{array}{c}
(\sigma_n(\mbox{G}) =(true,\bot),
\sigma_n(\langle (\mbox{when} (\mbox{G}) \mbox{:} (int) ) \rangle) =
(true, \bot),\\
 \sigma_n(\langle (int) \rangle) = (true,\bot)
\end{array}
}
{(\sigma_0,\ldots,\sigma_n) \vdash (\mbox{when} (\mbox{G}) \mbox{:}
  (int) )} 
$$
