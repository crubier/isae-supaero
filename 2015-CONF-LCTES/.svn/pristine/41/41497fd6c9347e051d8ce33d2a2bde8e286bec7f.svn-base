
\subsection{Basic constructs}
The basic notion is the interactive component named \lstinline{interaction} which produces output and new current internal state flows from input and previous  internal state flows.


\subsubsection{Flows}
They encode state variables, input and output of 

Notion of activation/deactivation for continuous/discrete

Example

Basic types are : \lstinline{text}, \lstinline{boolean}, \lstinline{number} and \lstinline{activation} combined with \lstinline{in} and \lstinline{out}


\subsubsection{Interface}

\colorbox{codebackground}{
\lstinline{interface} $\mathit{name}$ \lstinline{is} $\mathit{definition}$
}



\subsubsection{Interaction Operators}
Corresponding to equations

Donner celles utilisées dans l'étude de cas. 

\subsubsection{Interaction components}

\colorbox{codebackground}{
\lstinline{interaction} $\mathit{pattern}$ 
\lstinline{is a} $\mathit{interface}$ 
\lstinline{defined by} $\mathit{expression}$
}

The basic interactors component

\subsubsection{Assembling interaction components}
Here we show how interaction components are assembled and reused to build a new interaction component

\subsection{Formal semantics}
We define the actual behaviors of a LIDL interaction system by using a
semantics of traces that permits to characterize the behaviors of a
LIDL description in terms of execution traces. Intuitively every
behavior of a LIDL interaction systems corresponds to the sequences of
the values each LIDL variable has. These values define a \textit{state} of the
system and a sequence of states defines a behvior of this system. 

\begin{definition}[Memory]
Let $I$ a set of identifiers of LIDL. $DV$ is a set of data values and
$\bot$ denotes an undefined value. We define $A = \{false,true\}$.
Every function $sigma : I \rightarrow A \times (DV \cup \{\bot\})$ defines a
memory of the LIDL interaction system.
\end{definition}
Every state of a LIDL interaction system is characterized by a
memory that gives a  value $\sigma(id)$ to each $id \in I$. This
value is a pair $(a,v)$ with $ a \in A$ and $v \in (DV \cup
\bot)$ : $a$ indicates if $id$ is \textit{active} or not. If not, $v$ is
not significant and stays undefined ($v = \bot$). 
\begin{definition}[Trace]
An execution trace $\Sigma$ is a non empty, finite or infinite,
sequence of memories.
\end{definition} 
Some  identifiers  play a  particular  role  in the  LIDL  interaction
systems.  They are used to denote \textit{activation signals} that are
not valuated.  Their values are in $A \times \{\bot\}$.  By default
$\forall id  \in I,  \sigma(id) = (false,\bot)$.   In other  words, by
default, every value is not  active. To become  active and to  get a
significant data value, a behavior of the LIDL interaction system must be
activated.

\subsubsection{Semantics of LIDL expressions over finite traces}
The value (in $A \times (DV \cup \{\bot\})$ of a LIDL expression $E$
over a finite trace $\Sigma = (\sigma_0,\ldots,\sigma_n)$ is defined
by induction on the structure of $E$. We denote $\Sigma \vdash E |
(a,v)$ to mean that $E$ has the value $(a,v)$ ($a \in A$ and $v \in  A
\times (DV \cup \{\bot\})$) over $\Sigma$. 

\textbf{Constants values.} If \textbf{k} denotes a bool, number or text constant
then $\Sigma \vdash$ (\textbf{k})$ | (true,k)$. A particular activation
constant, $active$ is such that $\Sigma \vdash (active) | (true, \bot)$.

\textbf{Variables values.} If $x$ denotes a variable in the language,
$(\sigma_0,\ldots,\sigma_n) \vdash (x) | \sigma_n(x)$. 

\textbf{Boolean and arithemtic operators.} If $E_1,\ldots,E_m$ denote
expressions in LIDL and $\star$ is a boolean or arithmetic operator
then $$\frac{\Sigma \vdash (E_1) | (a_1,v_1),\ldots,\Sigma \vdash (E_m) |
  (a_m,v_m)}{\Sigma \vdash \star(E_1,\ldots,E_m) |
  (\bigwedge_{i=1}^{m}a_i, \star(v_1,\ldots,v_m))}$$.

\textbf{Previous operator.} If $E$ denotes an expression in LIDL,
$$\sigma_0 \vdash (previous(E)) | (false,\bot)$$ and $$\frac{\Sigma
  \vdash (E) | (a,v)}{\Sigma \cdot \sigma \vdash (previous(E)) | (a,v)}$$.

Tout est comilé dans ces opératers de base et leur composition.

Trace based semantics

Compositionality
